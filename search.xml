<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis面试题</title>
      <link href="/posts/bae4ff13.html"/>
      <url>/posts/bae4ff13.html</url>
      
        <content type="html"><![CDATA[<p>⚫ 熟悉Redis缓存，熟悉数据类型，缓存持久化，分布式锁，对于缓存雪崩等问题有解决方案；</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p><strong>String（字符串）</strong></p><p>1、字符串是 Redis 中最简单和最常用的数据类型。可以用来存储如字符串、整数、浮点数、图片（图片的base64编码或图片的路径）、序列化后的对象等。</p><p>2、每个键（key）对应一个值（value），一个键最大能存储512MB的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;SET key &quot;value&quot;</span><br><span class="line">&gt;GET key</span><br></pre></td></tr></table></figure><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a><strong>Hash（哈希）</strong></h3><p>1、Redis Hash是一个String类型的field和value的映射表，类似于Java中的<strong>Map<String, object></String,></strong>。</p><p>2、Hash特别适合用于存储对象，如用户信息、商品详情等。</p><p>3、 每个Hash可以存储2^32 - 1个键值对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;HSET user:1000 name &quot;John&quot;</span><br><span class="line">&gt;HGET user:1000 name</span><br></pre></td></tr></table></figure><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a><strong>List（列表）</strong></h3><p>1、 列表是一个有序的字符串集合，可以从<strong>两端压入或弹出</strong>元素，支持在列表的头部或尾部添加元素。</p><p>2、 列表最多可存储2^32 - 1个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;LPUSH mylist &quot;world&quot;</span><br><span class="line">&gt;LPUSH mylist &quot;hello&quot;</span><br><span class="line">&gt;LRANGE mylist 0 -1</span><br></pre></td></tr></table></figure><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a><strong>Set（集合）</strong></h3><p>1、Set是一个无序的字符串集合，不允许重复元素。集合适用于去重和集合运算（如交集、并集、差集）。Set的添加、删除、查找操作的复杂度都是O(1)。</p><figure class="highlight plaintext"><figcaption><span>myset "hello"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;SADD myset &quot;hello&quot;</span><br><span class="line">&gt;SADD myset &quot;world&quot;</span><br><span class="line">&gt;SMEMBERS myset</span><br></pre></td></tr></table></figure><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a><strong>Zset（有序集合）</strong></h3><p>Zset和Set一样也是String类型元素的集合，且不允许重复的成员。有序集合类似于集合，但<strong>每个元素都会关联一个double类型的分数（score）</strong>，redis正是通过分数来为集合中的成员进行从小到大的排序。</p></blockquote><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p><img src="/posts/bae4ff13/image-20250428193506606.png" alt="image-20250428193506606"></p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><blockquote><p><strong>字符串（String）</strong></p><p><img src="/posts/bae4ff13/image-20250428193611758.png" alt="image-20250428193611758"></p><h3 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a><strong>哈希（Hash）</strong></h3><p><img src="/posts/bae4ff13/image-20250428193630157.png" alt="image-20250428193630157"></p><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a><strong>列表（List）</strong></h3><p><img src="/posts/bae4ff13/image-20250428193645660.png" alt="image-20250428193645660"></p><h3 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a><strong>集合（Set）</strong></h3><p><img src="/posts/bae4ff13/image-20250428193702575.png" alt="image-20250428193702575"></p><h3 id="有序集合（Sorted-Set）"><a href="#有序集合（Sorted-Set）" class="headerlink" title="有序集合（Sorted Set）"></a><strong>有序集合（Sorted Set）</strong></h3><p><img src="/posts/bae4ff13/image-20250428193711327.png" alt="image-20250428193711327"></p></blockquote><h1 id="Redis单线程的理解"><a href="#Redis单线程的理解" class="headerlink" title="Redis单线程的理解"></a>Redis单线程的理解</h1><blockquote><p>Redis<strong>核心操作是单线程</strong>的。Redis在处理并发请求时有<strong>简单、高效和一致性</strong>的优点。但是Redis在某些方面使用了额外的线程来处理后台任务。</p><p>Redis的主要操作，包括<strong>网络IO和键值对读写</strong>，确实是由<strong>一个线程</strong>来完成的。这保证了Redis在处理客户端请求时的简单性和一致性，避免了多线程可能带来的上下文切换开销和竞争条件。利用<strong>队列技术将并发访问变为串行访问</strong>，消除了传统数据库串行控制的开销。这意味着，虽然多个客户端可能同时发送请求，但Redis会将这些请求放入队列中，并逐个处理它们。</p><p>Redis 单线程性能高的原因：</p><p>1、 <strong>高效的 I/O 多路复用</strong>：Redis使用网络IO多路复用技术（如epoll）来同时处理多个客户端连接。这使得Redis能够高效地利用系统资源，为大量并发连接提供高性能的服务。官网数据 10w/qps。</p><p>2、 由于Redis<strong>基于内存操作</strong>，并且采用了单线程模型，不需要处理线程切换问题和多线程之间资源竞争，以及锁的问题。</p><p>Redis 多线程主要做的事情：</p><p><strong>持久化</strong>（例如，在保存RDB快照时，Redis会自动fork一个子进程去处理）、<strong>异步删除</strong>和<strong>集群数据同步</strong>等。这些任务不会阻塞Redis的主线程，从而确保Redis能够持续地为客户端提供服务。</p></blockquote><h1 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h1><blockquote><p>Redis 实际使用的是<strong>定期删除+惰性删除</strong>的方式！定期删除减少 cpu 消耗和浪费，配合惰性删除，二次检查保险。</p><p><img src="/posts/bae4ff13/image-20250428193902174.png" alt="image-20250428193902174"></p><h3 id="主动删除"><a href="#主动删除" class="headerlink" title="主动删除"></a>主动删除</h3><p><strong>定时删除</strong></p><p>当设置<strong>键的过期时间</strong>时，Redis会为该键创建一个定时器，当过期时间到达时自动删除该键。redis.c 下的 activeExpireCycle 函数实现了定期删除粗略，配合 Redis的服务器的 serverCron函数，在服务器周期执行serverCron 的时候，activeExpireCycle函数就会被调用，在一定的时间内，分多次遍历 redis 中的数据库，从数据库的expires字典中检查一部分键的过期时间，此操作是随机性的，然后删除其中的过期键。</p><p>优点：删除操作会在数据到期时立即进行，确保内存及时释放。</p><p>缺点：定时器的管理会消耗系统资源，特别是在大量键设置过期时间的情况下，删除 key 会对响应时间和吞吐量产生影响。</p><p><strong>定期删除</strong></p><p>Redis会<strong>定期扫描</strong>数据库中的键，并删除其中已过期的键。通过随机抽取一定数量的键，并检查它们是否过期，如果过期就删除，Redis默认每隔100ms（可以通过配置文件中的hz参数进行调整）就执行一次过期扫描任务。</p><p>配置redis.conf的hz选项，默认为10，1s刷新的频率。即1秒执行10次，相当于100ms执行一次，hz值越大，说明刷新频率越快，Redis性能损耗也越大</p><p>优点：通过限制删除操作执行的时长和频率来减少删除操作对CPU的影响，同时能有效释放过期键占用的内存。</p><p>缺点：难以确定删除操作执行的时长和频率，如果执行的太频繁，会对CPU造成负担，就变成了定时删除；如果执行的太少，则过期键长时间占用的内存没有及时释放，造成内存浪费。</p><p><strong>内存不足</strong></p><p>当Redis的内存达到最大限制时，还会触发<strong>内存淘汰策略</strong>，策略不同决定哪些数据会被删除以腾出空间。<br>no eviction：禁止淘汰，达到内存限制时拒绝新的写请求。<br>allkeys-lru：从所有键中淘汰最近最少使用的键。<br>volatile-lru：从设置了过期时间的键中驱逐最近最少使用的键。<br>allkeys-random：从所有键中随机驱逐键。<br>volatile-random：从设置了过期时间的键中随机驱逐键。<br>volatile-ttl：从设置了过期时间的键中驱逐剩余时间最短的键。</p><h3 id="被动删除"><a href="#被动删除" class="headerlink" title="被动删除"></a>被动删除</h3><p><strong>惰性删除</strong></p><p>Redis<strong>不会在键过期时立即删除</strong>它，而是在<strong>下一次访问这个键时检查其是否过期</strong>，然后删除过期的键。假设这个键已经过期，但是后面一直没有被访问，则会永远存在。不会被删除，这就是惰性删除。</p><p>惰性删除策略由db.c/expireIfNeeded函数实现，所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded函数对输入键进行检查。如果输入键已经过期，那么expireIfNeeded函数将输入键从数据库中删除；如果输入键未过期，那么expireIfNeeded函数不做动作。</p><p>优点：惰性删除不会增加额外的系统开销，不浪费 cpu，只在访问时进行检查。</p><p>缺点：如果某个键永远不会被访问，即使设置了过期时间，它也不会被自动删除，造成<strong>内存泄漏</strong>问题。</p></blockquote><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><blockquote><p><strong>缓存穿透</strong>是指在高并发场景下，如果某一个key被高并发访问，但该key在<strong>缓存中不存在</strong>，那么请求会穿透到数据库查询。如果这个key在<strong>数据库中也不存在</strong>，就会导致每次请求都要到数据库去查询，给数据库带来压力。严重的缓存穿透会<strong>导致数据库宕机</strong>。可以看到核心的重点在于不命中和返回空。解决方案也围绕这些即可。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>1、 缓存空对象</strong></p><p>当<strong>数据库中查不到数据时，缓存一个空对象</strong>（例如一个标记为空或不存在的对象），并给这个空对象的缓存<strong>设置一个过期时间</strong>。这样，下次再查询该数据时，就可以直接从缓存中拿到空对象，从而避免了不必要的数据库查询。</p><p>这种解决方式有两个缺点：</p><p>需要缓存层提供更多的内存空间来缓存这些空对象，当空对象很多时，会<strong>浪费更多的内存</strong>。</p><p>会导致缓存层和存储层的<strong>数据不一致</strong>，即使设置了较短的过期时间，也会在这段时间内造成数据不一致问题。比如缓存还是空对象，这个时候数据库已经有值了。这种引入复杂性，当数据库值变化的时候，要清空缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;jichiKey&quot;</span>;</span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redis.get(key);</span><br><span class="line">&gt;<span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">   value = database.query(key);</span><br><span class="line">   <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 缓存空结果，设置短过期时间</span></span><br><span class="line">       redis.set(key, <span class="string">&quot;&quot;</span>, <span class="number">60</span>);  <span class="comment">// 60秒过期</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       redis.set(key, value, <span class="number">3600</span>);  <span class="comment">// 1小时过期</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>2、 使用布隆过滤器</strong></p><p>布隆过滤器用于<strong>检测一个元素是否在集合中</strong>。访问缓存和数据库之前，<strong>先判断布隆过滤器里面有没有这个 key</strong>，如果 key 存在，可以继续往下走，如果 key 不存在，就不用往下进行走了。比较适合<strong>数据 key 相对固定的场景</strong>。可以减少误识别率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// expectedInsertions：预期插入的元素数量</span></span><br><span class="line">&gt;<span class="comment">// falsePositiveProbability：可接受的误判率</span></span><br><span class="line">&gt;BloomFilter&lt;String&gt; bloomFilter = <span class="keyword">new</span> <span class="title class_">BloomFilter</span>&lt;&gt;(expectedInsertions, falsePositiveProbability);</span><br><span class="line">   <span class="comment">// 初始化布隆过滤器，插入所有可能存在的键</span></span><br><span class="line">&gt;<span class="keyword">for</span> (String key : allPossibleKeys) &#123;</span><br><span class="line">   bloomFilter.put(key);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 查询时使用布隆过滤器</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;jichiKey&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span> (!bloomFilter.mightContain(key)) &#123;</span><br><span class="line">   <span class="comment">// 布隆过滤器判断不存在，直接返回</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 布隆过滤器判断可能存在，查询缓存和数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redis.get(key);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">           value = database.query(key);</span><br><span class="line">           redis.set(key, value, <span class="number">3600</span>);  <span class="comment">// 1小时过期</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> value;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>3、缓存预热</strong></p><p>在系统启动时，提前将热门数据加载到缓存中，可以避免因为请求热门数据而导致的缓存穿透问题。需要根据系统的实际情况和业务需求来判断是否需要对缓存进行预热。比如在一些高并发的系统下，提前预热可以大大减少毛刺的产生，以及提高性能和系统稳定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCache</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCache</span><span class="params">(String key)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadCache</span><span class="params">()</span>&#123;</span><br><span class="line">       clearCache();</span><br><span class="line">           initCache();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// CommandLineRunner: 在应用程序启动后自动执行特定代码</span></span><br><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitCache</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           <span class="comment">//我要知道哪些缓存需要进行一个预热</span></span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringContextUtil.getApplicationContext();</span><br><span class="line">            Map&lt;String, AbstractCache&gt; beanMap = applicationContext.getBeansOfType(AbstractCache.class);</span><br><span class="line">            <span class="comment">//调用init方法</span></span><br><span class="line">            <span class="keyword">if</span>(beanMap.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String,AbstractCache&gt; entry : beanMap.entrySet())&#123;</span><br><span class="line">                <span class="type">AbstractCache</span> <span class="variable">abstractCache</span> <span class="operator">=</span> (AbstractCache) SpringContextUtil.getBean(entry.getValue().getClass());</span><br><span class="line">                abstractCache.initCache();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryCache</span> <span class="keyword">extends</span> <span class="title class_">AbstractCache</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CATEGORY_CACHE_KEY</span> <span class="operator">=</span> <span class="string">&quot;CATEGORY&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initCache</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="comment">//跟数据库做联动了，跟其他的数据来源进行联动</span></span><br><span class="line">           redisUtil.set(<span class="string">&quot;category&quot;</span>,<span class="string">&quot;知识&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCache</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(!redisTemplate.hasKey(key).booleanValue())&#123;</span><br><span class="line">               reloadCache();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (T) redisTemplate.opsForValue().get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span> &#123;</span><br><span class="line">           redisTemplate.delete(CATEGORY_CACHE_KEY);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><blockquote><p><strong>缓存击穿</strong>是指在高并发的情况下，某个热点key<strong>突然失效或者未被缓存</strong>，导致大量请求直接穿透到后端数据库，从而使得<strong>数据库负载过高</strong>，甚至崩溃的问题。</p><p>这里要注意一个点就是比如<strong>构建这个 key 的缓存</strong>需要一定的时间，例如当缓存没有，查询数据后，重新放入缓存的过程需要一定的时间，如果这个时候，不进行控制，可能有很多请求都在做同一件事构建缓存，可能会引发数据库的压力剧增，或者影响到第三方服务。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>1、互斥锁</strong></p><p>在缓存失效时，通过加锁机制保证<strong>只有一个线程能访问数据库并更新缓存</strong>，其他线程等待该线程完成后再读取缓存。核心重点 ：<strong>只有一个线程访问数据库和建立缓存</strong>。</p><p><img src="/posts/bae4ff13/image-20250428194553646.png" alt="image-20250428194553646"></p><p>根据上面的流程图，我们可以看到一个非常具体的实现步骤：</p><ol><li>当缓存失效时，<strong>尝试获取一个分布式锁</strong>。</li><li>获取锁的线程去数据库<strong>查询数据并更新缓存</strong>。</li><li>其他未获取锁的线程等待锁释放后，再次尝试读取缓存。</li></ol><blockquote><p>假设没有双重检查：</p><ol><li>线程A发现缓存为空</li><li>线程A获取锁</li><li>线程A正要查询数据库</li><li>线程B也发现缓存为空</li><li>线程B等待锁</li><li>线程A查询完毕，设置缓存</li><li>线程B获取锁后，若没有二次检查，会重复查询数据库</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(String key)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redis.get(key);</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 尝试获取锁</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">lockAcquired</span> <span class="operator">=</span> redis.setnx(<span class="string">&quot;lock:&quot;</span> + key, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 双重检查锁，防止重复查询数据库</span></span><br><span class="line">              value = redis.get(key);</span><br><span class="line">              <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                  value = database.query(key);</span><br><span class="line">                  redis.set(key, value, <span class="number">3600</span>);  <span class="comment">// 1小时过期</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// 释放锁</span></span><br><span class="line">              redis.del(<span class="string">&quot;lock:&quot;</span> + key);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 等待锁释放，再次尝试获取缓存</span></span><br><span class="line">          <span class="keyword">while</span> ((value = redis.get(key)) == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">100</span>);  <span class="comment">// 等待100毫秒</span></span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  Thread.currentThread().interrupt();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>2、不过期</strong></p><p>设置一个<strong>较长的缓存过期时间</strong>，同时在缓存中存储一个<strong>逻辑过期时间</strong>。当逻辑过期时间到达时，<strong>后台异步更新缓存</strong>，而不是让用户请求直接穿透到数据库。这种方案可以<strong>彻底防止请求打到数据库</strong>，不过就是造成了代码实现过于复杂，因为你需要尽可能的保持二者的一致。</p><p><img src="/posts/bae4ff13/image-20250428194634798.png" alt="image-20250428194634798"></p><p><strong>实现步骤</strong>：</p><ol><li>在缓存中存储数据时，附带一个逻辑过期时间。</li><li>读取缓存时，检查逻辑过期时间是否到达。</li><li>如果逻辑过期时间到达，<strong>异步线程去数据库查询新数据并更新缓存，但仍返回旧数据给用户</strong>，避免缓存失效时大量请求直接访问数据库。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">CacheEntry</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String value;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">long</span> expireTime;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">CacheEntry</span><span class="params">(String value, <span class="type">long</span> expireTime)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.value = value;</span><br><span class="line">       <span class="built_in">this</span>.expireTime = expireTime;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isExpired</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> System.currentTimeMillis() &gt; expireTime;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(String key)</span> &#123;</span><br><span class="line">   <span class="type">CacheEntry</span> <span class="variable">cacheEntry</span> <span class="operator">=</span> redis.get(key);</span><br><span class="line">   <span class="keyword">if</span> (cacheEntry == <span class="literal">null</span> || cacheEntry.isExpired()) &#123;</span><br><span class="line">       <span class="comment">// 异步更新缓存</span></span><br><span class="line">       executorService.submit(() -&gt; &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">newValue</span> <span class="operator">=</span> database.query(key);</span><br><span class="line">           redis.set(key, <span class="keyword">new</span> <span class="title class_">CacheEntry</span>(newValue, System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">1000</span>));  <span class="comment">// 1小时逻辑过期</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> cacheEntry != <span class="literal">null</span> ? cacheEntry.getValue() : <span class="literal">null</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>方案对比</strong></p><p>互斥锁要注意的点是，阻塞等待可能会<strong>存在死锁或者请求阻塞</strong>的情况，降低了高并发的吞吐量。</p><p>不过期这种方式，设置逻辑时间是一个非常考验功底的情况，设置的过程，数据不一致性的时间就越长，所以要考虑好方案和业务情况。互斥锁，就不存在这种问题。各有优势，按照情况来进行选择。</p></blockquote><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><blockquote><p><strong>缓存雪崩</strong>是指在<strong>某一时刻</strong>，大量缓存数据<strong>同时失效</strong>，导致大量的请求直接穿透到数据库，瞬间给数据库带来巨大的压力，可能导致<strong>数据库崩溃或服务不可用</strong>。</p><h3 id="常见原因"><a href="#常见原因" class="headerlink" title="常见原因"></a>常见原因</h3><ol><li><strong>缓存数据过期时间相同</strong>：当缓存系统中大量数据的过期时间被设置为同一时间点或相近的时间段时，这些数据会同时失效，从而引发缓存雪崩。</li><li><strong>缓存服务器故障</strong>：当缓存服务器发生故障时，如果没有有效的容错机制，<strong>缓存中的数据将无法被访问</strong>，系统可能直接请求后端服务或数据库，导致系统性能下降。</li></ol><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>设置合理的缓存过期时间</strong></p><p>缓存过期时间的设置需要根据业务需求和数据的变化频率来确定。对于<strong>不经常变化</strong>的数据，可以设置<strong>较长</strong>的过期时间，以减少对数据库的频繁访问。对于<strong>经常变化</strong>的数据，可以设置<strong>较短</strong>的过期时间，确保缓存数据的<strong>实时性</strong>。总之就是尽量打散缓存的过期时间，最好做到均匀的时间分布，减轻系统同一时刻的压力。</p><p><strong>使用热点数据预加载</strong></p><p>预先将热点数据加载到缓存中，并设置较长的过期时间，可以避免在同一时间点大量请求直接访问数据库。可以根据业务需求，在系统启动或低峰期进行预热操作，将热点数据提前加载到缓存中。</p><p>热点数据预加载可以提升系统的性能和响应速度，减轻数据库的负载。</p><p><strong>缓存高可用</strong></p><p>缓存做成<strong>集群</strong>的形式，提高可用性，防止缓存挂掉后，造成的穿透问题。</p><p>当缓存服务器发生故障或宕机时，需要有相应的<strong>故障转移</strong>和<strong>降级策略</strong>。可以通过监控系统来及时发现缓存故障，并进行自动切换到备份缓存服务器。同时，可以实现降级策略，当缓存失效时，系统可以直接访问数据库，保证系统的可用性。通过缓存故障转移和降级策略，可以保证系统在缓存不可用或故障的情况下仍然可以正常运行，提高系统的稳定性和容错性。</p></blockquote><h1 id="setnx和setex的区别"><a href="#setnx和setex的区别" class="headerlink" title="setnx和setex的区别"></a>setnx和setex的区别</h1><blockquote><p>SET：最基础的命令，setnx 和 setex 都是在此基础上进行变种。set 命令就是设置键值对，如果已经有值则覆盖，没值就放进去，不涉及过期时间的概念。</p><p>SETNX：是一个设置键-值对的命令，但仅在<strong>键不存在时才设置该键</strong>。如果键已经存在，则不进行任何操作。它是“Set if Not Exists”的缩写，即“如果不存在则设置”。</p><p>SETEX：这个命令用于为指定的键设置值及其过期时间。如果键已经存在，SETEX命令将会<strong>替换旧的值和过期时间</strong>。</p><p><strong>命令使用</strong> </p><p>SETNX的语法为：SETNX key value。其中，key是要设置的键名，value是要设置的值。如果key不存在，则返回1表示设置成功；如果key已经存在，则返回0表示设置失败。</p><p>SETEX的语法为：SETEX key seconds value。其中，key是要设置的键名，seconds是过期时间（以秒为单位），value是要设置的值。如果设置成功，则返回“OK”。</p><p><strong>应用场景</strong> </p><p>SETNX常用于<strong>分布式场景</strong>中的锁机制。例如，在多个客户端同时访问共享资源或执行关键操作时，可以使用SETNX命令尝试在Redis中设置一个特定的键作为锁键，从而确保只有一个客户端能够成功设置该键并执行关键操作。其他执行命令因为设置不成功，所以就可以认为是未获得到锁。</p><p>SETEX则用于为键设置值和过期时间。这在需要<strong>临时存储数据或限制数据有效期的场景</strong>中非常有用。例如，可以使用SETEX命令存储会话信息或缓存数据，并为其设置适当的过期时间以自动删除过期的数据。</p></blockquote><h1 id="redis快的原因"><a href="#redis快的原因" class="headerlink" title="redis快的原因"></a>redis快的原因</h1><blockquote><p><strong>纯内存</strong></p><p>Redis将数据存储在内存中，避免了大量访问数据库和直接读取磁盘数据的操作。内存的读写速度远超过磁盘I/O，使得Redis的数据访问非常迅速。</p><p><strong>数据结构合理</strong></p><p>Redis内部的数据结构都是为快速读写而设计的，如跳跃表、SDS（简单动态字符串）、链表和Hash等。基本都能够在 o（1）复杂度下完成大部分操作，比如 hash 的结构，想获取其中一个属性的值，非常的方便，不像数据库查询需要磁盘寻找。</p><p><strong>单线程操作</strong></p><p>Redis采用<strong>单线程模型</strong>来处理客户端请求，避免了多线程带来的上下文切换和竞争条件。单线程模型使得Redis不需要考虑各种锁的问题，减少了性能消耗。但是持久化，异步删除等等是异步线程处理，但这不影响性能。不过要注意一个点，因为单线程，某个命令如果耗时太大，可能会产生阻塞，也就是我们经常说的，不要使用 keys，或者直接读整个 hash 大 key。</p><p><strong>io 多路复用模型</strong></p><p>Redis在网络通信和磁盘写入方面采用了<strong>异步式的IO处理</strong>，即使用epoll多路复用技术同时处理多个网络请求，减少了I/O阻塞及上下文切换开销，提高了系统的吞吐量和响应时间。</p><p><strong>专门设计的数据结构</strong></p><p>redis 的每种数据类型对应的底层存储结构都不一样，经历过多种方式的设计。拿 string 类型来进行说，如果存储数字的话，是用int类型的编码。如果存储非数字，小于等于39字节的字符串，是embstr。大于39个字节，则是raw编码。这种根据类型和字节数的设计，在 key 越多的场景下，占用空间越少。</p></blockquote><h1 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h1><blockquote><p><strong>RDB（Redis Database）和AOF（Append Only File）</strong></p><p>Redis 4.0引入了<strong>混合持久化模式</strong></p><h3 id="RDB（Redis-Database）"><a href="#RDB（Redis-Database）" class="headerlink" title="RDB（Redis Database）"></a>RDB（Redis Database）</h3><p>RDB持久化方式会在<strong>指定的时间间隔内生成数据集的快照</strong>，并将其<strong>保存到磁盘上</strong>。这个快照文件的默认名称是dump.rdb。</p><p>RDB的配置可以在redis.conf文件中进行。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;save 900 1      # 如果900秒（15分钟）内至少有1个键发生变化，就触发一次RDB快照</span><br><span class="line">&gt;save 300 10     # 如果300秒（5分钟）内至少有10个键发生变化，就触发一次RDB快照</span><br><span class="line">&gt;save 60 10000   # 如果60秒（1分钟）内至少有10000个键发生变化，就触发一次RDB快照</span><br></pre></td></tr></table></figure><p><strong>rdb的优势与劣势</strong></p><p><img src="/posts/bae4ff13/image-20250428195210666.png" alt="image-20250428195210666"></p><p><img src="/posts/bae4ff13/image-20250428195221822.png" alt="image-20250428195221822"></p><h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><p>AOF持久化方式<strong>记录每一个写操作到日志文件中</strong>（默认名称是appendonly.aof）。Redis会将这些写操作以追加的方式写入到AOF文件中。</p><p>AOF的配置可以在redis.conf文件中进行。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;appendonly yes         # 启用AOF持久化</span><br><span class="line">&gt;appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">&gt;appendfsync everysec   # 每秒钟同步一次AOF文件</span><br><span class="line">&gt;# 其他选项：</span><br><span class="line">&gt;# appendfsync always  # 每个写操作都同步到AOF文件，性能较差但数据最安全</span><br><span class="line">&gt;# appendfsync no      # 由操作系统决定何时同步，性能最好但数据安全性较差</span><br></pre></td></tr></table></figure><p><strong>aof的优势与劣势</strong></p><p><img src="/posts/bae4ff13/image-20250428195251170.png" alt="image-20250428195251170"></p><p><img src="/posts/bae4ff13/image-20250428195259997.png" alt="image-20250428195259997"></p><h3 id="混合持久化（Hybrid-Persistence）"><a href="#混合持久化（Hybrid-Persistence）" class="headerlink" title="混合持久化（Hybrid Persistence）"></a>混合持久化（Hybrid Persistence）</h3><p>混合持久化模式结合了RDB和AOF的优点。在Redis 4.0及以上版本中，混合持久化模式在<strong>生成新的AOF文件时，会首先创建一个RDB快照，然后在快照之后追加AOF日志</strong>。这种方式可以在保证数据恢复速度的同时，减少数据丢失的风险。</p><p>混合持久化的配置可以在redis.conf文件中进行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;aof-use-rdb-preamble yes  # 启用混合持久化模式</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><p>1、 结合了RDB和AOF的优点，既能快速恢复数据，又能减少数据丢失的风险。</p><h3 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h3><p><strong>RDB</strong>：适用于对数据一致性要求不高，但需要快速恢复数据的场景，例如缓存服务器。</p><p><strong>AOF</strong>：适用于对数据一致性要求高的场景，例如金融交易系统。</p><p><strong>混合持久化</strong>：适用于需要综合考虑数据恢复速度和数据一致性的场景。</p></blockquote><h1 id="redis事务机制"><a href="#redis事务机制" class="headerlink" title="redis事务机制"></a>redis事务机制</h1><blockquote><p>redis中事务是<strong>一组命令的集合</strong>，一组命令要么全部执行，要么全部不执行。事务在Redis中是通过<strong>流水线（Pipeline）</strong>技术实现的，所有命令在执行之前都会被放入一个队列中，直到执行EXEC命令时，所有命令才会按顺序执行。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>MULTI</strong></p><p>MULTI命令用于标记一个<strong>事务的开始</strong>。执行MULTI后，所有的命令都会被放入一个队列中，而<strong>不是立即执行</strong>。</p><p><strong>EXEC</strong></p><p>EXEC命令用于执行从MULTI命令开始后放入队列中的所有命令。所有命令会按<strong>顺序执行</strong>，并且在执行过程中<strong>不会被其他客户端的命令打断</strong>。Redis事务在执行EXEC命令时具有<strong>原子性</strong>，即所有命令要么全部执行，要么全部不执行。Redis事务并<strong>不支持回滚机制</strong>。如果在事务执行过程中发生错误，已经执行的命令不会被回滚。</p><p><strong>DISCARD</strong></p><p>DISCARD命令用于<strong>放弃从MULTI命令开始后放入队列中的所有命令，并且取消事务</strong>。</p><p><strong>WATCH</strong></p><p>WATCH命令用于<strong>监视一个或多个键</strong>，在事务执行之前，<strong>如果这些键被其他客户端修改，事务将被中止</strong>。WATCH命令通常用于<strong>实现乐观锁</strong>。这样可以防止事务中的数据竞争问题。</p><h3 id="事务的工作原理"><a href="#事务的工作原理" class="headerlink" title="事务的工作原理"></a>事务的工作原理</h3><h4 id="事务的执行过程"><a href="#事务的执行过程" class="headerlink" title="事务的执行过程"></a>事务的执行过程</h4><p><strong>1、 开始事务</strong>：使用MULTI命令开始一个事务。</p><p><strong>2、 命令入队</strong>：在事务开始之后，所有的命令都会被放入队列中，而不是立即执行。</p><p><strong>4、 执行事务</strong>：使用EXEC命令执行队列中的所有命令。如果在使用WATCH监视的键在事务执行前被修改，事务将被中止。</p><p><strong>4、 放弃事务</strong>：使用DISCARD命令可以放弃当前事务队列中的所有命令。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 开始事务</span><br><span class="line">&gt;MULTI</span><br><span class="line">&gt;# 添加命令到事务队列</span><br><span class="line">&gt;SET key1 value1</span><br><span class="line">&gt;SET key2 value2</span><br><span class="line">&gt;# 执行事务</span><br><span class="line">&gt;EXEC</span><br></pre></td></tr></table></figure><p>如果在事务执行之前，使用WATCH命令监视了某个键，并且该键在事务执行前被修改，事务将被中止：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 监视键</span><br><span class="line">&gt;WATCH key1</span><br><span class="line">&gt;# 开始事务</span><br><span class="line">&gt;MULTI</span><br><span class="line">&gt;# 添加命令到事务队列</span><br><span class="line">&gt;SET key1 value1</span><br><span class="line">&gt;SET key2 value2</span><br><span class="line">&gt;# 执行事务（如果key1在此之前被修改，事务将被中止）</span><br><span class="line">&gt;EXEC</span><br></pre></td></tr></table></figure><p>在EXEC命令执行时，所有被MULTI命令包裹的命令会按顺序一次性执行。意味着在EXEC执行时，Redis会将所有命令作为一个整体进行处理。Redis保证<strong>单个命令的原子性</strong>，即每个命令在执行时是不可分割的。</p><p>但是，Redis事务并不完全等同于传统关系型数据库的事务。</p><p>如果在EXEC执行过程中某个命令失败（例如，命令语法错误），该命令会被跳过，但其他命令仍然会继续执行。这与关系型数据库的事务不同，后者通常会在某个命令失败时回滚整个事务。</p><p>Redis事务<strong>没有回滚机制</strong>。如果某个命令执行失败，已经执行的命令不会被撤销。</p></blockquote><h1 id="哨兵模式-sentinal-与集群模式-cluster-的区别"><a href="#哨兵模式-sentinal-与集群模式-cluster-的区别" class="headerlink" title="哨兵模式(sentinal)与集群模式(cluster)的区别"></a>哨兵模式(sentinal)与集群模式(cluster)的区别</h1><blockquote><p><strong>哨兵模式</strong></p><p>Sentinel是一种用于<strong>监控Redis主从复制结构并实现自动故障转移</strong>的系统。它主要关注的是<strong>高可用性</strong>，保证当主服务器发生故障时，能够自动将一个从服务器提升为新的主服务器，并通知客户端进行相应的切换。</p><p><strong>集群模式</strong></p><p>Cluster是一种<strong>分布式存储</strong>解决方案，支持<strong>自动分片和高可用性</strong>。支持<strong>主从复制和故障转移</strong>，还能够将数据分布在多个节点上，实现数据的水平扩展。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">哨兵模式</th><th style="text-align:center">集群模式</th></tr></thead><tbody><tr><td style="text-align:center">架构区别</td><td style="text-align:center">Sentinel节点监控主从服务器的状态，当主服务器故障时，Sentinel节点会选举一个新的主服务器。</td><td style="text-align:center">数据自动分片存储在多个节点上，每个节点负责一部分数据。每个分片有一个主节点和一个或多个从节点。使用Gossip协议进行节点间通信，自动检测故障并进行主从切换。</td></tr><tr><td style="text-align:center">数据存储</td><td style="text-align:center">数据存储在一个主服务器及其从服务器上，不进行数据分片。</td><td style="text-align:center">数据通过哈希槽（hash slots）机制分布在多个节点上，每个节点负责一部分哈希槽。</td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">只提供高可用性，不能水平扩展数据存储容量。</td><td style="text-align:center">支持水平扩展，可以通过增加节点来扩展数据存储容量和处理能力。</td></tr><tr><td style="text-align:center">高可用</td><td style="text-align:center">通过心跳机制检测主服务器的状态，自动选举新的主服务器并更新拓扑结构。</td><td style="text-align:center">使用Gossip协议进行节点间的故障检测，自动进行主从切换，确保集群的高可用性。</td></tr><tr><td style="text-align:center">使用场景</td><td style="text-align:center">适用于小规模的Redis部署，主要关注高可用性。不需要数据分片。</td><td style="text-align:center">适用于大规模的Redis部署，支持水平扩展。需要同时满足高可用性和数据分片、扩展性需求。</td></tr></tbody></table></div></blockquote><h1 id="常见性能问题和解决方案"><a href="#常见性能问题和解决方案" class="headerlink" title="常见性能问题和解决方案"></a>常见性能问题和解决方案</h1><blockquote><h3 id="redis-内存空间不足"><a href="#redis-内存空间不足" class="headerlink" title="redis 内存空间不足"></a>redis 内存空间不足</h3><p>由于Redis的数据存储在内存中，当数据量增大时，可能会出现内存不足的情况，导致性能下降或服务不可用。</p><p><strong>解决方案</strong>：</p><p><strong>内存优化</strong>：使用更高效的数据结构（如哈希表、压缩列表）来存储数据，减少内存占用。</p><p><strong>水平扩展</strong>：使用Redis<strong>集群模式</strong>，将<strong>数据分片存储</strong>在多个节点上，扩展内存容量。</p><h3 id="redis-的大-key"><a href="#redis-的大-key" class="headerlink" title="redis 的大 key"></a>redis 的大 key</h3><p>某些键可能存储了大量数据（如大列表、大哈希表），操作这些大键可能导致阻塞，影响性能。</p><p><strong>解决方案</strong>：</p><p><strong>拆分大键</strong>：将大键拆分成多个小键，减少单个键的操作时间。</p><p><strong>分批处理</strong>：对于需要迭代处理的大键，使用SCAN、SSCAN、HSCAN、ZSCAN等命令进行分批处理，避免单次操作时间过长。</p><p><strong>监控和预警</strong>：定期监控Redis中的大键，及时发现并处理。</p><h3 id="阻塞操作"><a href="#阻塞操作" class="headerlink" title="阻塞操作"></a>阻塞操作</h3><p>某些Redis命令（如KEYS、FLUSHALL、SAVE等）会阻塞服务器，导致其他操作无法执行。</p><p><strong>解决方案</strong>：</p><p><strong>避免阻塞命令</strong>：尽量避免使用阻塞命令，使用非阻塞的替代命令（如SCAN代替KEYS）。</p><p><strong>异步操作</strong>：对于需要执行的阻塞操作，尽量使用异步方式（如FLUSHALL ASYNC）。</p><h3 id="网络延迟"><a href="#网络延迟" class="headerlink" title="网络延迟"></a>网络延迟</h3><p>Redis是基于<strong>TCP协议</strong>的网络服务，高网络延迟会影响Redis的性能。</p><p><strong>解决方案</strong>：</p><p><strong>本地部署</strong>：尽量将Redis服务器部署在与应用服务器同一内网，减少网络延迟。</p><p><strong>连接池</strong>：使用连接池来<strong>复用Redis连接</strong>，减少连接建立和关闭的开销。</p><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><p>某些复杂的查询或数据操作可能会导致Redis响应变慢，影响整体性能。</p><p><strong>解决方案</strong>：</p><p><strong>慢查询日志</strong>：启用Redis的慢查询日志功能，定期检查慢查询并优化。</p><p><strong>索引优化</strong>：合理使用Redis的数据结构和索引，优化查询性能。</p><h3 id="主从复制延迟"><a href="#主从复制延迟" class="headerlink" title="主从复制延迟"></a>主从复制延迟</h3><p>在主从复制架构中，从服务器可能会因为网络或负载问题导致复制延迟，影响数据一致性。</p><p><strong>解决方案</strong>：</p><p><strong>优化网络</strong>：确保主从服务器之间的网络连接稳定，带宽充足。</p><p><strong>调整复制参数</strong>：优化Redis的复制参数（如repl-backlog-size、repl-timeout等），减少复制延迟。</p><p><strong>监控复制状态</strong>：定期监控主从复制状态，及时发现并处理延迟问题。</p><h3 id="持久化性能问题"><a href="#持久化性能问题" class="headerlink" title="持久化性能问题"></a>持久化性能问题</h3><p>Redis的持久化操作（如RDB快照和AOF日志）可能会影响性能，尤其是在大数据量或高并发情况下。</p><p><strong>解决方案</strong>：</p><p><strong>合理配置持久化策略</strong>：根据业务需求配置合理的持久化策略，平衡性能和数据安全性。</p><p><strong>异步持久化</strong>：使用异步持久化方式（如AOF的fsync策略），减少对主线程的影响。</p></blockquote><h1 id="jedis和redisson的对比"><a href="#jedis和redisson的对比" class="headerlink" title="jedis和redisson的对比"></a>jedis和redisson的对比</h1><blockquote><p>Jedis和Redisson是两种常用的<strong>Java Redis客户端</strong>。Jedis是一个轻量级的Redis客户端，易于集成和使用。Redisson是一个在Redis的基础上实现的Java驻内存数据网格。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。</p><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p><strong>优点</strong></p><p><strong>直观的API</strong>：提供了直接且简单的API，便于操作Redis的各种数据结构和命令。</p><p><strong>性能高</strong>：由于其轻量级特性，Jedis在<strong>单线程操作</strong>中性能较高。</p><p><strong>广泛使用</strong>：Jedis是较早的Java Redis客户端之一，有着广泛的社区支持和文档资源。</p><p><strong>缺点</strong></p><p><strong>线程安全性</strong>：Jedis实例<strong>不是线程安全</strong>的，需要通过连接池（JedisPool）来管理连接，增加了复杂性。</p><p><strong>功能有限</strong>：Jedis主要提供了对Redis命令的直接封装，缺乏高级特性，如分布式锁、限流器等。</p><p><strong>集群支持</strong>：虽然Jedis支持Redis集群，但配置和使用相对复杂，且在某些场景下性能不如Redisson。</p><h3 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h3><p><strong>优点</strong></p><p><strong>线程安全</strong>：Redisson的所有对象都是<strong>线程安全</strong>的，简化了多线程环境下的使用。</p><p><strong>高级特性</strong>：提供了许多高级特性，如分布式锁、分布式集合、分布式队列、分布式缓存、限流器等，适合复杂的分布式系统。</p><p><strong>易用性</strong>：Redisson的API设计更加面向对象，提供了丰富的分布式数据结构和并发工具，使开发更加简便。</p><p><strong>集群支持</strong>：Redisson对Redis集群的支持更加友好和高效，配置和使用相对简单。</p><p><strong>缺点</strong></p><p><strong>重量级</strong>：Redisson的功能丰富，但也带来了较大的依赖包和内存占用，相比Jedis更为重量级。</p><p><strong>性能开销</strong>：由于提供了许多高级特性，Redisson在某些场景下的性能可能不如Jedis。</p><p><strong>学习曲线</strong>：Redisson的API和功能较多，学习和掌握所有特性需要一定的时间。</p><h3 id="选择建议-1"><a href="#选择建议-1" class="headerlink" title="选择建议"></a>选择建议</h3><p>1、 如果你的应用场景比较简单，只需要基本的Redis操作，并且对性能有较高要求，Jedis是一个不错的选择。</p><p>2、复杂分布式系统：如果你的应用需要使用Redis的高级特性，如分布式锁、限流器、分布式集合等，或者需要在多线程环境中使用Redis，Redisson会更合适。</p><p>3、 集群支持：如果需要使用Redis集群，Redisson的配置和使用相对简单、性能较好，更加推荐使用。</p></blockquote><h1 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h1><blockquote><p>当Redis的内存用完时，会根据配置的内存回收策略采取不同的措施。可以在内存达到限制时决定如何处理新的写请求。主要的策略有如下 8 种。</p><h3 id="内存回收策略"><a href="#内存回收策略" class="headerlink" title="内存回收策略"></a>内存回收策略</h3><ol><li><strong>noeviction</strong>：不删除任何键，当内存不足时<strong>返回错误</strong>。这是<strong>默认策略</strong>。</li></ol><p>当内存达到限制时，Redis将不再接受任何写请求，并返回错误。例如，客户端尝试设置新键时，会收到类似以下的错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;(error) OOM command not allowed when used memory &gt; &#x27;maxmemory&#x27;.</span><br></pre></td></tr></table></figure><ol><li><p><strong>allkeys-lru</strong>：使用<strong>最近最少使用（LRU）</strong>算法<strong>回收所有键</strong>。</p></li><li><p><strong>volatile-lru</strong>：使用最近最少使用（LRU）算法<strong>回收设置了过期时间的键</strong>。</p></li><li><p><strong>allkeys-random</strong>：随机回收所有键。</p></li><li><p><strong>volatile-random</strong>：随机回收设置了过期时间的键。</p></li><li><p><strong>volatile-ttl</strong>：回收那些<strong>剩余生存时间（TTL）最短</strong>的键。</p></li><li><p><strong>volatile-lfu</strong>：使用<strong>最长时间没有被使用（LFU）</strong>算法回收设置了过期时间的键。</p></li><li><p><strong>allkeys-lfu</strong>：使用最长时间没有被使用（LFU）算法回收所有键。</p></li></ol><h3 id="配置内存回收策略的方式"><a href="#配置内存回收策略的方式" class="headerlink" title="配置内存回收策略的方式"></a>配置内存回收策略的方式</h3><p>redis.conf文件中配置内存回收策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;maxmemory 100mb</span><br><span class="line">&gt;maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure><p>也可通过命令行参数设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;redis-server --maxmemory 100mb --maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure></blockquote><h1 id="实现延时队列"><a href="#实现延时队列" class="headerlink" title="实现延时队列"></a>实现延时队列</h1><blockquote><p>可以使用<strong>有序集合（Sorted Set）</strong>来实现延时队列。有序集合中的每个元素有一个关联的分数，可以用来表示<strong>任务的执行时间戳</strong>。具体的步骤如下，非常简单</p><h3 id="添加任务到延时队列"><a href="#添加任务到延时队列" class="headerlink" title="添加任务到延时队列"></a>添加任务到延时队列</h3><p>将任务添加到有序集合中，使用任务的执行时间作为分数（score）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 示例代码：添加任务到延时队列</span></span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;delay_queue&quot;</span>;</span><br><span class="line">&gt;String taskId=<span class="string">&quot;task_1&quot;</span>;</span><br><span class="line">&gt;<span class="type">long</span> delay=<span class="number">5000</span>; <span class="comment">// 延迟时间（毫秒）</span></span><br><span class="line">&gt;<span class="type">long</span> executionTime= System.currentTimeMillis() + delay;</span><br><span class="line">&gt;<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> newJedis(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">&gt;<span class="comment">// key(操作的集合名称) Score(任务的执行时间) Member(任务的唯一标识符)</span></span><br><span class="line">&gt;<span class="comment">//将 taskId 添加到名为 queueName 的有序集合中，其排序依据是 executionTime（分数）。</span></span><br><span class="line">&gt;jedis.zadd(queueName, executionTime, taskId);</span><br><span class="line">&gt;jedis.close();</span><br></pre></td></tr></table></figure><h3 id="轮询延时队列并执行任务"><a href="#轮询延时队列并执行任务" class="headerlink" title="轮询延时队列并执行任务"></a>轮询延时队列并执行任务</h3><p>定期检查有序集合中的任务，找到那些执行时间已经到达或超过当前时间的任务，并执行这些任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 示例代码：轮询延时队列并执行任务</span></span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;delay_queue&quot;</span>;</span><br><span class="line">&gt;Jedis jedis=<span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">&gt;<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="type">long</span> currentTime= System.currentTimeMillis();</span><br><span class="line">   <span class="comment">// key ScoreMin ScoreMax offset偏移量 count返回数量限制</span></span><br><span class="line">   Set&lt;Tuple&gt; tasks = jedis.zrangeByScoreWithScores(queueName, <span class="number">0</span>, currentTime, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (tasks.isEmpty()) &#123;</span><br><span class="line">       <span class="comment">// 没有任务需要执行，休眠一段时间</span></span><br><span class="line">       Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (Tuple task : tasks) &#123;</span><br><span class="line">       StringtaskId= task.getElement();</span><br><span class="line">       <span class="comment">// 执行任务</span></span><br><span class="line">       executeTask(taskId);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 从队列中移除已执行的任务</span></span><br><span class="line">       jedis.zrem(queueName, taskId);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;jedis.close();</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">   <span class="comment">// 实现任务执行逻辑</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Executing task: &quot;</span> + taskId);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="使用redis统计网站的uv"><a href="#使用redis统计网站的uv" class="headerlink" title="使用redis统计网站的uv"></a>使用redis统计网站的uv</h1><blockquote><h3 id="使用Set统计UV"><a href="#使用Set统计UV" class="headerlink" title="使用Set统计UV"></a>使用Set统计UV</h3><p>Set是一种集合数据结构，可以存储<strong>不重复的元素</strong>。将每个访客的唯一标识（如用户ID或IP地址）添加到Set中，可以很方便地统计独立访客数。</p><ol><li><strong>记录访客访问</strong>：每次有访客访问时，将其唯一标识添加到当天的Set中。</li><li><strong>获取UV</strong>：使用<strong>SCARD</strong>命令获取<strong>Set中元素的数量</strong>，即为独立访客数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line">&gt;<span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line">&gt;<span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UVTrackerSet</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Jedis jedis;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">DATE_FORMATTER</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">UVTrackerSet</span><span class="params">(String redisHost, <span class="type">int</span> redisPort)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.jedis = newJedis(redisHost, redisPort);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordVisit</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">       String date= LocalDate.now().format(DATE_FORMATTER);</span><br><span class="line">       String key=<span class="string">&quot;uv:set:&quot;</span> + date;</span><br><span class="line">       jedis.sadd(key, userId);</span><br><span class="line">       <span class="comment">// 设置键的过期时间为30天，防止内存无限增长</span></span><br><span class="line">       jedis.expire(key, <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getUV</span><span class="params">(String date)</span> &#123;</span><br><span class="line">       String key=<span class="string">&quot;uv:set:&quot;</span> + date;</span><br><span class="line">       <span class="keyword">return</span> jedis.scard(key);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getUVRange</span><span class="params">(String startDate, String endDate)</span> &#123;</span><br><span class="line">       LocalDatestart= LocalDate.parse(startDate, DATE_FORMATTER);</span><br><span class="line">       LocalDateend= LocalDate.parse(endDate, DATE_FORMATTER);</span><br><span class="line"></span><br><span class="line">       String[] keys = start.datesUntil(end.plusDays(<span class="number">1</span>))</span><br><span class="line">           .map(date -&gt; <span class="string">&quot;uv:set:&quot;</span> + date.format(DATE_FORMATTER))</span><br><span class="line">           .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">       StringtempKey=<span class="string">&quot;uv:set:range&quot;</span>;</span><br><span class="line">       jedis.sunionstore(tempKey, keys);</span><br><span class="line">       longuvCount= jedis.scard(tempKey);</span><br><span class="line">       jedis.del(tempKey);</span><br><span class="line">       <span class="keyword">return</span> uvCount;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">UVTrackerSet</span> <span class="variable">tracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UVTrackerSet</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 记录访客访问</span></span><br><span class="line">       tracker.recordVisit(<span class="string">&quot;user_123&quot;</span>);</span><br><span class="line">       tracker.recordVisit(<span class="string">&quot;user_456&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取指定日期的UV</span></span><br><span class="line">       Stringtoday= LocalDate.now().format(DATE_FORMATTER);</span><br><span class="line">       System.out.println(<span class="string">&quot;UV for &quot;</span> + today + <span class="string">&quot;: &quot;</span> + tracker.getUV(today));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取一段时间内的UV</span></span><br><span class="line">       StringstartDate=<span class="string">&quot;2023-07-01&quot;</span>;</span><br><span class="line">       StringendDate=<span class="string">&quot;2023-07-07&quot;</span>;</span><br><span class="line">       System.out.println(<span class="string">&quot;UV from &quot;</span> + startDate + <span class="string">&quot; to &quot;</span> + endDate + <span class="string">&quot;: &quot;</span> + tracker.getUVRange(startDate, endDate));</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用HyperLogLog统计UV"><a href="#使用HyperLogLog统计UV" class="headerlink" title="使用HyperLogLog统计UV\"></a>使用HyperLogLog统计UV\</h3><p>HyperLogLog是一种<strong>概率性数据结构</strong>，可以在固定的内存空间内提供<strong>高效的基数估计</strong>。它适合<strong>处理大规模数据</strong>。</p><ol><li><strong>记录访客访问</strong>：每次有访客访问时，将其唯一标识添加到当天的HyperLogLog中。</li><li><strong>获取UV</strong>：使用<strong>PFCOUNT</strong>命令获取HyperLogLog的基数估计。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line">&gt;<span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line">&gt;<span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UVTrackerHLL</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Jedis jedis;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_FORMATTER= DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">UVTrackerHLL</span><span class="params">(String redisHost, <span class="type">int</span> redisPort)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.jedis = newJedis(redisHost, redisPort);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordVisit</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">       Stringdate= LocalDate.now().format(DATE_FORMATTER);</span><br><span class="line">       Stringkey=<span class="string">&quot;uv:hll:&quot;</span> + date;</span><br><span class="line">       jedis.pfadd(key, userId);</span><br><span class="line">       <span class="comment">// 设置键的过期时间为30天，防止内存无限增长</span></span><br><span class="line">       jedis.expire(key, <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getUV</span><span class="params">(String date)</span> &#123;</span><br><span class="line">       Stringkey=<span class="string">&quot;uv:hll:&quot;</span> + date;</span><br><span class="line">       <span class="keyword">return</span> jedis.pfcount(key);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getUVRange</span><span class="params">(String startDate, String endDate)</span> &#123;</span><br><span class="line">       LocalDatestart= LocalDate.parse(startDate, DATE_FORMATTER);</span><br><span class="line">       LocalDateend= LocalDate.parse(endDate, DATE_FORMATTER);</span><br><span class="line"></span><br><span class="line">       String[] keys = start.datesUntil(end.plusDays(<span class="number">1</span>))</span><br><span class="line">           .map(date -&gt; <span class="string">&quot;uv:hll:&quot;</span> + date.format(DATE_FORMATTER))</span><br><span class="line">           .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">       StringtempKey=<span class="string">&quot;uv:hll:range&quot;</span>;</span><br><span class="line">       jedis.pfmerge(tempKey, keys);</span><br><span class="line">       longuvCount= jedis.pfcount(tempKey);</span><br><span class="line">       jedis.del(tempKey);</span><br><span class="line">       <span class="keyword">return</span> uvCount;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       UVTrackerHLLtracker=newUVTrackerHLL(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 记录访客访问</span></span><br><span class="line">       tracker.recordVisit(<span class="string">&quot;user_123&quot;</span>);</span><br><span class="line">       tracker.recordVisit(<span class="string">&quot;user_456&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取指定日期的UV</span></span><br><span class="line">       Stringtoday= LocalDate.now().format(DATE_FORMATTER);</span><br><span class="line">       System.out.println(<span class="string">&quot;UV for &quot;</span> + today + <span class="string">&quot;: &quot;</span> + tracker.getUV(today));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取一段时间内的UV</span></span><br><span class="line">       StringstartDate=<span class="string">&quot;2023-07-01&quot;</span>;</span><br><span class="line">       StringendDate=<span class="string">&quot;2023-07-07&quot;</span>;</span><br><span class="line">       System.out.println(<span class="string">&quot;UV from &quot;</span> + startDate + <span class="string">&quot; to &quot;</span> + endDate + <span class="string">&quot;: &quot;</span> + tracker.getUVRange(startDate, endDate));</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">set</th><th style="text-align:center">HyperLogLog</th></tr></thead><tbody><tr><td style="text-align:center">精准度</td><td style="text-align:center">精确统计，无误差</td><td style="text-align:center">存在一定误差（通常在0.81%左右）</td></tr><tr><td style="text-align:center">占用内存</td><td style="text-align:center">内存占用较大，尤其是当访客数量很大时</td><td style="text-align:center">内存占用小，通常只需要12KB内存。</td></tr><tr><td style="text-align:center">内存占用情况</td><td style="text-align:center">小数据量，同时对内存不敏感可以</td><td style="text-align:center">适合大规模数据</td></tr></tbody></table></div></blockquote><h1 id="看门狗机制的原理"><a href="#看门狗机制的原理" class="headerlink" title="看门狗机制的原理"></a>看门狗机制的原理</h1><blockquote><p>Redisson 的看门狗机制是一种用于<strong>自动续约分布式锁</strong>的机制，确保在持有锁的客户端处理完业务逻辑之前，锁不会过期。比如，我们平时使用分布式锁的时候，一般会设置一个锁的过期时间，那么如果锁过期的时候，业务还没执行完怎么办，于是就有了看门狗。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>初始锁定</strong>：</p><p>当客户端获取到锁时，会在 Redis 中设置一个键（代表锁）和一个过期时间（默认30秒）。同时，Redisson 会启动一个<strong>后台任务（看门狗）</strong>，这个任务会<strong>定期检查锁的状态</strong>。</p><p><strong>自动续约</strong>：</p><p>看门狗任务会每隔一段时间（默认是锁的<strong>过期时间的1/3</strong>，即10秒）检查锁的状态。如果锁仍然被持有（即客户端还在持有锁且没有释放），看门狗任务会将锁的过期时间<strong>重置为初始值</strong>（例如，再次设置为30秒）。这样，锁的过期时间不断被延长，直到客户端明确释放锁或者客户端挂掉。</p><p><strong>释放锁</strong>：</p><p>当客户端完成业务逻辑后，会显式地调用<strong>unlock()</strong>方法释放锁。一旦锁被释放，看门狗任务会停止续约，锁在 Redis 中的键会被删除或自然过期。</p><h3 id="看门狗机制的工作流程"><a href="#看门狗机制的工作流程" class="headerlink" title="看门狗机制的工作流程"></a>看门狗机制的工作流程</h3><p><strong>获取锁</strong>：客户端请求获取锁，Redis 中创建一个键表示锁，并设置一个过期时间（例如30秒）。启动看门狗任务，定期检查锁的状态。</p><p><strong>定期续约</strong>：看门狗任务每隔一定时间（例如10秒）检查锁的状态。如果锁仍然被持有（即客户端还在处理业务逻辑），看门狗任务会重置锁的过期时间（例如，再次设置为30秒）。</p><p><strong>锁的释放</strong>：客户端业务逻辑完成后，调用unlock()方法释放锁。看门狗任务停止续约，锁在 Redis 中的键被删除或自然过期。</p><h3 id="看门狗机制的优势"><a href="#看门狗机制的优势" class="headerlink" title="看门狗机制的优势"></a>看门狗机制的优势</h3><p><strong>高可靠性</strong>：通过自动续约机制，确保锁在持有者处理完业务逻辑之前不会过期，<strong>避免了锁意外过期导致的并发问题</strong>。</p><p><strong>自动管理</strong>：无需手动续约锁的过期时间，简化了分布式锁的使用和管理。</p><p><strong>容错性</strong>：如果客户端在持有锁期间崩溃或断开连接，锁会在过期时间后自动释放，<strong>避免了死锁问题</strong>。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line">&gt;<span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonLockExample</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> RedissonConfig.createClient();</span><br><span class="line">       <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;myLock&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 尝试获取锁，等待时间为100秒，锁的过期时间为10秒</span></span><br><span class="line">           <span class="keyword">if</span> (lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">// 业务逻辑</span></span><br><span class="line">                   System.out.println(<span class="string">&quot;Lock acquired, executing business logic&quot;</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// 模拟长时间运行的任务</span></span><br><span class="line">                   Thread.sleep(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   lock.unlock();</span><br><span class="line">                   System.out.println(<span class="string">&quot;Lock released&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;Could not acquire lock&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           redissonClient.shutdown();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="分布式锁的特点"><a href="#分布式锁的特点" class="headerlink" title="分布式锁的特点"></a>分布式锁的特点</h1><blockquote><p>分布式锁主要有三个特点，是我们要时刻进行注意的。</p><ol><li><strong>互斥性</strong>：在某一时刻，只有一个客户端可以持有锁。</li><li><strong>容错性</strong>：即使某个持有锁的客户端崩溃或失去连接，锁也能够被其他客户端重新获取。</li><li><strong>高可用性</strong>：锁服务需要高可用，通常需要在分布式环境中实现。</li></ol><h3 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h3><p><strong>基于数据库</strong></p><p>使用数据库的SELECT … FOR UPDATE 语句或类似的<strong>行级锁机制</strong>来实现分布式锁。优点是实现简单，缺点是性能较低，依赖于数据库的高可用性。高并发情况下也会对数据库造成非常大的压力。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="comment">-- 获取锁</span></span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> locks <span class="keyword">WHERE</span> resource <span class="operator">=</span> <span class="string">&#x27;resource_name&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span><span class="comment">-- 释放锁</span></span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">DELETE</span> <span class="keyword">FROM</span> locks <span class="keyword">WHERE</span> resource <span class="operator">=</span> <span class="string">&#x27;resource_name&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>基于 Redis</strong></p><p>Redis 提供了原子操作和高性能的特性，非常适合用来实现分布式锁。通常使用<strong>SETNX命令</strong>来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 获取锁</span></span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;lock_key&quot;</span>, <span class="string">&quot;lock_value&quot;</span>, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, <span class="number">30000</span>);</span><br><span class="line">&gt;<span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">   <span class="comment">// 锁获取成功</span></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 释放锁</span></span><br><span class="line">&gt;<span class="keyword">if</span> (lock_value.equals(jedis.get(<span class="string">&quot;lock_key&quot;</span>))) &#123;</span><br><span class="line">   jedis.del(<span class="string">&quot;lock_key&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>基于 Zookeeper</strong></p><p>Zookeeper 提供了分布式协调服务，可以用来实现分布式锁。通过创建临时顺序节点来实现锁机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 创建一个临时顺序节点</span></span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> zookeeper.create(<span class="string">&quot;/locks/lock-&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 检查是否获取到锁</span></span><br><span class="line">&gt;List&lt;String&gt; children = zookeeper.getChildren(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">&gt;Collections.sort(children);</span><br><span class="line">&gt;<span class="keyword">if</span> (path.equals(<span class="string">&quot;/locks/&quot;</span> + children.get(<span class="number">0</span>))) &#123;</span><br><span class="line">   <span class="comment">// 获取到锁</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式锁的使用场景"><a href="#分布式锁的使用场景" class="headerlink" title="分布式锁的使用场景"></a>分布式锁的使用场景</h3><ol><li><strong>分布式事务</strong>：在分布式系统中，需要确保多个节点上的操作在同一事务中执行。</li><li><strong>资源共享</strong>：如分布式系统中的限流、分布式任务调度等场景。</li><li><strong>数据一致性</strong>：在多个节点并发访问同一资源时，确保数据一致性。</li></ol><h3 id="分布式锁的常见常见问题"><a href="#分布式锁的常见常见问题" class="headerlink" title="分布式锁的常见常见问题"></a>分布式锁的常见常见问题</h3><ol><li><strong>死锁</strong>：如果某个节点在持有锁期间崩溃或失去连接，可能会导致其他节点无法获取锁。</li><li><strong>性能</strong>：分布式锁的实现需要考虑性能问题，尤其是在高并发场景下。</li><li><strong>可靠性</strong>：锁服务需要高可用，通常需要在分布式环境中实现。</li></ol><h3 id="分布式锁的改进"><a href="#分布式锁的改进" class="headerlink" title="分布式锁的改进"></a>分布式锁的改进</h3><ol><li><strong>锁过期时间</strong>：设置锁的过期时间，避免死锁问题。</li><li><strong>租约机制</strong>：使用租约机制，定期续约锁，确保锁在持有期间不会被其他节点获取。</li><li><strong>锁竞争优化</strong>：使用合适的锁竞争算法，减少锁竞争的开销。</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ面试题</title>
      <link href="/posts/186242d5.html"/>
      <url>/posts/186242d5.html</url>
      
        <content type="html"><![CDATA[<p>⚫ 熟悉Rocketmq的使用，掌握持久化机制，消息可靠性，延迟消费等，解决过消息积压，消息逆序等问题；</p><h1 id="使用场景（系统解耦和流量削峰）"><a href="#使用场景（系统解耦和流量削峰）" class="headerlink" title="使用场景（系统解耦和流量削峰）"></a>使用场景（系统解耦和流量削峰）</h1><p><img src="/posts/186242d5/image-20250421215648224.png" alt="image-20250421215648224"></p><blockquote><h3 id="异步通信场景："><a href="#异步通信场景：" class="headerlink" title="异步通信场景："></a>异步通信场景：</h3><p>MQ可以实现消息的异步传递，避免了请求等待的时间，提高了系统的响应速度和吞吐量。</p><p>常见的应用场景有<strong>异步下单、异步支付</strong>等，例如在电商平台中，当用户下单或支付后，这些操作可以被转化为消息发送至MQ，由后台服务异步处理，而用户无需等待操作完成即可进行其他操作。</p><h3 id="分布式系统场景："><a href="#分布式系统场景：" class="headerlink" title="分布式系统场景："></a>分布式系统场景：</h3><p>MQ可以在分布式系统中实现各个节点之间的高效通信，解决网络延迟、网络抖动等问题。</p><p>常见的应用场景有<strong>分布式任务调度、分布式事务</strong>等。例如，在微服务架构中，服务之间的数据交互可以通过MQ实现，降低服务的耦合度，提高系统的可扩展性和可维护性。</p><h3 id="解耦系统场景："><a href="#解耦系统场景：" class="headerlink" title="解耦系统场景："></a>解耦系统场景：</h3><p>MQ可以将系统各个模块之间的耦合度降低，实现系统的解耦。</p><p>常见的应用场景有<strong>日志收集、异常监控</strong>等。通过使用MQ，可以将这些操作从主业务逻辑中分离出来，降低系统的复杂性。</p><h3 id="流量削峰场景："><a href="#流量削峰场景：" class="headerlink" title="流量削峰场景："></a>流量削峰场景：</h3><p>MQ可以在高并发场景下，实现流量的削峰，避免系统崩溃或响应变慢。</p><p>常见的应用场景有<strong>秒杀、活动抢购</strong>等。通过使用MQ缓存请求，后台服务可以按顺序处理，避免大量请求直接冲击系统。</p><h3 id="消息通知场景："><a href="#消息通知场景：" class="headerlink" title="消息通知场景："></a>消息通知场景：</h3><p>MQ可以实现消息的实时通知，提高用户体验。</p><p>常见的应用场景有<strong>订单状态变更通知、短信验证码发送</strong>等。用户可以在无需主动查询的情况下，实时获取到最新的信息。</p><h3 id="数据同步场景："><a href="#数据同步场景：" class="headerlink" title="数据同步场景："></a>数据同步场景：</h3><p>MQ可以实现不同系统之间数据的同步，保证数据的一致性。</p><p>常见的应用场景有<strong>缓存同步、库存同步</strong>等。当某个系统修改了共享数据后，可以通过MQ通知其他系统同步数据。</p></blockquote><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><blockquote><h3 id="系统复杂性增加"><a href="#系统复杂性增加" class="headerlink" title="系统复杂性增加"></a>系统复杂性增加</h3><p>引入消息队列会增加系统的复杂性，包括系统架构、开发和运维的复杂性。需要处理消息的生产、消费、路由、持久化、重试、重复消息处理等问题。</p><p>在一个简单的单体应用中，引入消息队列需要重新设计系统架构，并且需要开发和维护消息生产者和消费者代码，这增加了系统的复杂性。</p><h3 id="消息丢失风险"><a href="#消息丢失风险" class="headerlink" title="消息丢失风险"></a>消息丢失风险</h3><p>尽管大多数消息队列系统提供了消息持久化和重试机制，但在极端情况下（如硬件故障、网络故障等），仍然存在消息丢失的风险。</p><p>在网络分区或硬盘故障的情况下，消息可能会丢失，导致系统无法处理某些关键操作，如订单处理中的支付请求。</p><h3 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h3><p>由于网络故障或消费者处理失败，消息队列系统可能会重发消息，这会导致消息重复。消费者需要具备<strong>幂等性</strong>，能够正确处理重复消息。</p><p>在支付系统中，如果支付请求被重复处理，可能会导致用户被多次扣款。因此，消费者需要确保每个支付请求只被处理一次。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>消息队列引入了额外的网络传输和排队时间，这可能会导致消息处理的延迟。对于某些实时性要求高的系统，这可能是一个问题。</p><p>在实时交易系统中，消息处理的延迟可能会影响交易的及时性和准确性，进而影响用户体验和系统的可靠性。</p><h3 id="运维成本"><a href="#运维成本" class="headerlink" title="运维成本"></a>运维成本</h3><p>消息队列系统需要专门的运维和监控，确保其高可用性和性能。这包括<strong>集群管理、节点监控、日志分析、性能调优</strong>等。</p><p>Kafka、RabbitMQ 等消息队列系统需要专门的运维人员进行日常管理和维护，包括<strong>集群的扩展、故障处理、性能调优</strong>等。</p><h3 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h3><p>在分布式系统中，使用消息队列可能会导致<strong>数据一致性问题</strong>。需要设计合理的事务管理和一致性保障机制。</p><p>在订单系统中，订单创建和库存扣减需要保证一致性。如果订单创建成功但库存扣减失败，可能会导致数据不一致，需要设计<strong>补偿机制</strong>来处理这种情况。</p></blockquote><h1 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h1><p><img src="/posts/186242d5/image-20250421215632260.png" alt="image-20250421215632260"></p><h1 id="保障消息的顺序消费"><a href="#保障消息的顺序消费" class="headerlink" title="保障消息的顺序消费"></a>保障消息的顺序消费</h1><blockquote><h3 id="消息顺序消费问题的原因"><a href="#消息顺序消费问题的原因" class="headerlink" title="消息顺序消费问题的原因"></a>消息顺序消费问题的原因</h3><p><strong>1、 多个消费者并行处理</strong>：当多个消费者并行处理消息时，消息的处理顺序可能会与发送顺序不一致。</p><p><strong>2、 分区机制</strong>：在分布式消息队列系统中，消息通常会被分区存储和处理。不同分区内的消息顺序可能会被打乱。</p><p><strong>3、 重试机制</strong>：消息处理失败时，重试机制可能会导致消息顺序被打乱。</p><h3 id="解决消息顺序消费问题的方案"><a href="#解决消息顺序消费问题的方案" class="headerlink" title="解决消息顺序消费问题的方案"></a>解决消息顺序消费问题的方案</h3><p><strong>使用顺序队列</strong>:顺序队列确保消息按照发送的顺序进行处理。常见的消息队列系统，如Kafka、RabbitMQ等，都支持顺序队列。 在Kafka中，可以通过使用单个分区来保证消息的顺序性。因为同一个分区内的消息是按顺序存储和处理的。其他消息队列也有响应的机制。</p><p><strong>使用消息分区键</strong>:通过设置消息分区键，确保同一分区内的消息按顺序处理。分区键通常是业务相关的标识符，如订单ID、用户ID等。 在Kafka中，可以使用分区键来确保同一订单的消息发送到同一分区。</p><p><strong>单消费者模式</strong>：在某些情况下，可以使用单消费者模式，即一个队列只有一个消费者。这样可以确保消息按顺序处理。 在RabbitMQ中，可以配置队列为单消费者模式。</p><p><strong>消息排序</strong>：在某些场景中，可以在消费端进行消息排序。消费者在处理消息前，对消息进行排序，确保处理顺序。这种场景其实实际很难使用，因为你不知道消息多少，比较适合固定时间内的批量处理，可以排序。</p></blockquote><h1 id="避免消息丢失"><a href="#避免消息丢失" class="headerlink" title="避免消息丢失"></a>避免消息丢失</h1><blockquote><h3 id="消息生产过程中的可靠性保证"><a href="#消息生产过程中的可靠性保证" class="headerlink" title="消息生产过程中的可靠性保证:"></a>消息生产过程中的可靠性保证:</h3><p><strong>确保</strong>消息被<strong>成功发送</strong>到消息队列系统。<strong>比如 Kafka</strong>：使用acks配置，设置为all，确保消息被所有副本确认。<strong>RabbitMQ</strong> 则使用publisher confirms，确保消息被队列接收。</p><h3 id="消息传输过程中的可靠性保证"><a href="#消息传输过程中的可靠性保证" class="headerlink" title="消息传输过程中的可靠性保证"></a>消息传输过程中的可靠性保证</h3><p>在网络传输失败时进行<strong>重试</strong>。同时使用 <strong>TCP</strong>，确保消息传输的可靠性。 </p><h3 id="消息存储过程中的可靠性保证"><a href="#消息存储过程中的可靠性保证" class="headerlink" title="消息存储过程中的可靠性保证"></a>消息存储过程中的可靠性保证</h3><p><strong>确保</strong>消息在磁盘上<strong>持久化存储</strong>。<strong>Kafka</strong>默认情况下消息是持久化存储的。<strong>RabbitMQ</strong> 则需要设置队列和消息为持久化。 在RabbitMQ中设置持久化：</p><h3 id="消息消费过程中的可靠性保证"><a href="#消息消费过程中的可靠性保证" class="headerlink" title="消息消费过程中的可靠性保证"></a>消息消费过程中的可靠性保证</h3><p><strong>消息确认机制（Consumer Acknowledgment）</strong>：确保消息被成功处理后才从队列中删除。比如 <strong>Kafka</strong>使用手动提交偏移量。<strong>RabbitMQ</strong> 则使用手动确认机制（manual acknowledgment）。</p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p><strong>1、 监控和报警</strong>：实时监控消息队列系统的运行状态，设置报警机制，及时发现和处理消息丢失问题。</p><p><strong>2、 日志记录</strong>：记录消息的生产、传输、存储和消费日志，便于问题排查和恢复。</p><p><strong>3、 消息重试机制</strong>：配置合理的消息重试机制，确保在处理失败时进行重试。</p><p><strong>4、 高可用部署</strong>：部署高可用集群，确保在节点故障时系统能够自动切换，避免消息丢失。</p></blockquote><h1 id="避免消息重复投递或重复消费"><a href="#避免消息重复投递或重复消费" class="headerlink" title="避免消息重复投递或重复消费"></a>避免消息重复投递或重复消费</h1><blockquote><h3 id="消息幂等性"><a href="#消息幂等性" class="headerlink" title="消息幂等性"></a>消息幂等性</h3><p>消息幂等性是指<strong>无论消息被处理多少次，结果都是相同的</strong>。实现幂等性是避免重复消费的基础。</p><p>主要可以通过如下方式进行实现：</p><p><strong>1、 唯一标识</strong>：每条消息都带有一个唯一标识（如 UUID），在处理消息时，先检查这个标识是否已经处理过。</p><p><strong>2、 去重表</strong>：使用数据库或缓存系统（如 Redis）记录处理过的消息标识，避免重复处理。</p><p><strong>3、 业务逻辑幂等性</strong>：确保业务操作本身是幂等的，例如扣款操作确保同一笔交易不会被重复扣款。</p><h3 id="消息投递机制"><a href="#消息投递机制" class="headerlink" title="消息投递机制"></a>消息投递机制</h3><p>RocketMQ 支持多种消息投递机制，可以根据业务需求选择合适的投递策略。</p><p><strong>同步投递</strong>确保消息被可靠地发送到 Broker，并且发送方可以收到确认。通过这种方式，可以减少消息丢失的可能性。</p><p>RocketMQ 提供了消息重试机制，当消息投递失败时，会自动重试。为了避免重复投递，可以设置合理的重试次数和间隔时间。</p><h3 id="消费进度管理"><a href="#消费进度管理" class="headerlink" title="消费进度管理"></a>消费进度管理</h3><p>消费进度管理是避免重复消费的关键。RocketMQ 通过<strong>消费位点（Offset</strong>）来管理消费进度。</p><p>消费者实例在消费消息后，需要定期提交消费位点到 Broker。这样即使消费者实例重启，也能从上次提交的位置继续消费。</p><p>消费位点可以存储在 Broker 或外部存储系统（如数据库、Zookeeper）中。确保<strong>消费位点的持久化存储</strong>，可以在消费者实例故障恢复后继续消费。</p></blockquote><h1 id="消息重复消费的原因"><a href="#消息重复消费的原因" class="headerlink" title="消息重复消费的原因"></a>消息重复消费的原因</h1><p><img src="/posts/186242d5/image-20250421221045345.png" alt="image-20250421221045345"></p><h1 id="死信队列和延迟队列"><a href="#死信队列和延迟队列" class="headerlink" title="死信队列和延迟队列"></a>死信队列和延迟队列</h1><blockquote><h3 id="死信队列（DLQ）"><a href="#死信队列（DLQ）" class="headerlink" title="死信队列（DLQ）"></a>死信队列（DLQ）</h3><p>死信队列用于存储那些无法被正常处理的消息。这些消息被称为“死信消息”。消息进入死信队列的原因通常包括：</p><p>1、消息被<strong>消费多次但仍然处理失败</strong>。</p><p>2、消息在队列中<strong>存活时间超过了最大时间限制</strong>。</p><p>3、消息<strong>被拒绝</strong>（例如，消费者明确拒绝处理该消息）。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong>错误处理</strong>：当消息处理失败多次后，将其放入死信队列，可以进行后续的人工干预或特殊处理。</p><p><strong>监控和报警</strong>：通过监控死信队列，可以发现系统中的异常情况，及时进行报警和处理。</p><p><strong>消息审计</strong>：对死信队列中的消息进行审计，分析系统中可能存在的问题。</p><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p><strong>配置死信策略</strong>：在消息队列系统中配置死信策略，如最大重试次数、消息存活时间等。</p><p><strong>专用死信队列</strong>：为每个队列配置一个专用的死信队列，存储无法处理的消息。</p><p><strong>消费者处理</strong>：设置专门的消费者处理死信队列中的消息，进行日志记录、报警或其他处理。</p><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p>延迟队列用于存储那些需要<strong>在指定时间后才能被消费的消息</strong>。消息在发送到延迟队列后，会在设定的延迟时间到达后才被投递到目标队列供消费者消费。</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong>定时任务</strong>：实现定时任务调度，如在指定时间发送通知、执行任务等。</p><p><strong>重试机制</strong>：在消息处理失败后，将消息放入延迟队列，等待一段时间后再重新处理。</p><h4 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h4><p><strong>消息定时属性</strong>：为消息设置定时属性，如延迟时间、到期时间等。</p><p><strong>时间轮算法</strong>：使用时间轮算法管理延迟消息，定时检查并将到期的消息投递到目标队列。</p></blockquote><h1 id="解决消息队列的延时以及过期失效问题"><a href="#解决消息队列的延时以及过期失效问题" class="headerlink" title="解决消息队列的延时以及过期失效问题"></a>解决消息队列的延时以及过期失效问题</h1><blockquote><h3 id="解决消息队列的延时问题"><a href="#解决消息队列的延时问题" class="headerlink" title="解决消息队列的延时问题"></a>解决消息队列的延时问题</h3><p><strong>1、增加消费者实例：</strong>增加消费者实例可以提高消息处理的并发度，从而减少消息的等待时间。</p><p><strong>2、优化消费者处理逻辑：</strong>优化消费者的处理逻辑，减少每条消息的处理时间。例如，通过批量处理、异步处理、减少不必要的计算和 I/O 操作等方式来提高处理效率。</p><p><strong>3、调整消息队列的分区：</strong>增加消息队列的分区数，使更多的消费者能够并行处理消息，从而提高处理速度。</p><p><strong>4、 调整消息队列的配置：</strong>调整消息队列的配置参数，如增加内存缓冲区大小、优化网络配置等，以减少消息传输和处理的延时。</p><h3 id="解决消息过期失效问题"><a href="#解决消息过期失效问题" class="headerlink" title="解决消息过期失效问题"></a>解决消息过期失效问题</h3><p><strong>1、 设置合理的消息过期时间：</strong>根据业务需求设置合理的消息过期时间，确保消息在有效期内被处理。</p><p><strong>2、 使用死信队列（DLQ）：</strong>将处理失败或过期的消息转移到死信队列，进行后续处理或人工干预。</p></blockquote><h1 id="解决消息积压的问题"><a href="#解决消息积压的问题" class="headerlink" title="解决消息积压的问题"></a>解决消息积压的问题</h1><p><img src="/posts/186242d5/image-20250421221444093.png" alt="image-20250421221444093"></p><h1 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ有什么优缺点"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ有什么优缺点" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ有什么优缺点"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ有什么优缺点</h1><blockquote><h3 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>高吞吐量</strong>：Kafka 设计用于处理高吞吐量的实时数据流，能够处理数百万条消息每秒。</li><li><strong>持久化和可靠性</strong>：消息被持久化到磁盘，并且可以配置副本机制，保证消息的高可用性和可靠性。</li><li><strong>水平扩展</strong>：Kafka 的分区机制允许其轻松扩展，增加更多的代理（broker）来处理更多的数据。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>复杂的运维</strong>：Kafka 的部署和运维相对复杂，需要专门的运维人员来管理和监控 Kafka 集群。</li><li><strong>高延迟</strong>：相对于内存中消息传递的系统，Kafka 的磁盘 I/O 操作会带来一定的延迟。</li><li><strong>功能单一</strong>：Kafka 专注于高吞吐量和持久化，但在消息路由、优先级队列等高级特性上不如其他消息队列。</li></ol><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>丰富的特性</strong>：支持多种消息传递模型（点对点、发布-订阅）、消息持久化、事务、消息优先级、延迟消息等高级特性。</li><li><strong>多协议支持</strong>：支持多种协议（如 AMQP、MQTT、STOMP、OpenWire 等），灵活性高。</li><li><strong>简单易用</strong>：相对容易部署和使用，适合中小型企业和应用。</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>性能瓶颈</strong>：在高吞吐量和高并发场景下，ActiveMQ 的性能较 Kafka 和 RocketMQ 略显不足。</li><li><strong>扩展性有限</strong>：虽然支持集群模式，但扩展性和水平扩展能力不如 Kafka 和 RocketMQ。</li></ol><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>灵活的路由机制</strong>：RabbitMQ 提供了复杂的消息路由机制（如交换器、绑定键、队列），支持多种消息传递和路由模式。</li><li><strong>多协议支持</strong>：支持 AMQP、MQTT、STOMP 等多种协议，适用性广。</li><li><strong>可靠性高</strong>：支持消息持久化、确认机制、事务等，保证消息的可靠传递。</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>性能限制</strong>：在极高吞吐量和低延迟场景下，RabbitMQ 的性能不如 Kafka 和 RocketMQ。</li><li><strong>运维复杂度</strong>：在大规模集群中，RabbitMQ 的运维和管理相对复杂。</li><li><strong>内存消耗</strong>：RabbitMQ 在处理大量消息时，内存消耗较高，需要合理配置和管理。</li></ol><h3 id="Apache-RocketMQ"><a href="#Apache-RocketMQ" class="headerlink" title="Apache RocketMQ"></a>Apache RocketMQ</h3><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>高性能</strong>：RocketMQ 设计用于高吞吐量和低延迟的消息传递，性能接近 Kafka。</li><li><strong>强大的消息路由</strong>：支持复杂的消息路由和过滤机制，灵活性高。</li><li><strong>分布式事务</strong>：支持分布式事务，适合需要严格事务保证的场景。</li><li><strong>扩展性强</strong>：支持水平扩展，能够轻松扩展集群规模。</li><li><strong>可靠性高</strong>：支持消息持久化、副本机制，保证消息的高可用性和可靠性。</li></ol><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>运维复杂度</strong>：RocketMQ 的部署和运维相对复杂，需要专业知识和经验。</li></ol></blockquote><h1 id="RocketMQ消费模式有几种"><a href="#RocketMQ消费模式有几种" class="headerlink" title="RocketMQ消费模式有几种"></a>RocketMQ消费模式有几种</h1><blockquote><h3 id="集群消费"><a href="#集群消费" class="headerlink" title="集群消费"></a>集群消费</h3><p>在集群消费模式下，<strong>多个消费者实例组成一个消费组</strong>（Consumer Group），每个消息只会被消费组中的<strong>一个</strong>消费者实例消费。这种模式适用于消息处理需要负载均衡的场景。每个消息只会被消费一次。<strong>适合需要处理大量消息的场景</strong>。</p><p>假设有一个消费组GroupA，包含两个消费者实例Consumer1和Consumer2。当生产者发送消息到主题TopicA时，消息会被分配给Consumer1或Consumer2，但不会同时被两个消费者实例消费。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR  </span><br><span class="line">    TopicA --&gt; msg1  </span><br><span class="line">    TopicA --&gt; msg2  </span><br><span class="line">    msg1 --&gt; Consumer1  </span><br><span class="line">    msg2 --&gt; Consumer2  </span><br><span class="line"></span><br><span class="line">    subgraph GroupA  </span><br><span class="line">        Consumer1  </span><br><span class="line">        Consumer2  </span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="广播消费"><a href="#广播消费" class="headerlink" title="广播消费"></a>广播消费</h3><p>在广播消费模式下，<strong>多个消费者实例组成一个消费组</strong>，每个消息会被消费组中的<strong>所有</strong>消费者实例消费。这种模式适用于消息需要被多个消费者同时处理的场景。<strong>适合需要消息被多个消费者处理的场景</strong>，如日志处理、监控数据等。</p><p>假设有一个消费组GroupB，包含两个消费者实例Consumer3和Consumer4。当生产者发送消息到主题TopicB时，消息会被Consumer3和Consumer4同时消费。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph LR  </span><br><span class="line">    TopicA --&gt; msg1  </span><br><span class="line">    TopicA --&gt; msg1</span><br><span class="line">    msg1 --&gt; msg2  </span><br><span class="line">    msg1 --&gt; msg2  </span><br><span class="line">    msg2 --&gt; Consumer3</span><br><span class="line">    msg2 --&gt; Consumer4</span><br><span class="line">    subgraph GroupB  </span><br><span class="line">        Consumer3  </span><br><span class="line">        Consumer4  </span><br><span class="line">    end</span><br></pre></td></tr></table></figure></blockquote><h1 id="RocketMQ如何保证消息不丢失"><a href="#RocketMQ如何保证消息不丢失" class="headerlink" title="RocketMQ如何保证消息不丢失"></a>RocketMQ如何保证消息不丢失</h1><p><img src="/posts/186242d5/image-20250421221934180.png" alt="image-20250421221934180"></p><blockquote><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>主要是靠的<strong>刷盘机制</strong>。RocketMQ 的磁盘消息保存在磁盘上，支持<strong>同步刷盘和异步刷盘</strong>两种方式，通过刷盘机制可以确保消息在Broker宕机时不会丢失。</p><p><strong>同步刷盘（SYNC_FLUSH）</strong>：消息写入后，立即同步刷盘，确保消息持久化到磁盘。同步刷盘虽然会<strong>增加延迟</strong>，但极大地提高了消息的可靠性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;flushDiskType=SYNC_FLUSH</span><br></pre></td></tr></table></figure><p><strong>异步刷盘（ASYNC_FLUSH）</strong>：消息写入后，异步刷盘，性能较高，但<strong>可靠性略低</strong>于同步刷盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>RocketMQ 支持主从复制，通过将消息从主节点复制到从节点来提高消息的可靠性。主节点负责<strong>写入和读取</strong>，从节点负责<strong>复制数据</strong>。</p><p><strong>同步复制（SYNC_MASTER）</strong>：消息写入主节点后，立即同步复制到从节点，确保消息在主从节点都存在。同步复制提高了消息的可靠性，但会增加写入延迟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;brokerRole=SYNC_MASTER</span><br></pre></td></tr></table></figure><p><strong>异步复制（ASYNC_MASTER）</strong>：消息写入主节点后，异步复制到从节点，性能较高，但可靠性略低于同步复制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;brokerRole=ASYNC_MASTER</span><br></pre></td></tr></table></figure><h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><p>RocketMQ 提供了消息确认机制，确保消息被消费者成功处理。</p><p><strong>消费者确认</strong>：消费者处理完消息后，向 RocketMQ 发送确认（ack）。如果消费者未确认消息（如消费者崩溃），RocketMQ 会将消息重新投递给其他消费者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 消费者处理消息</span></span><br><span class="line">&gt;consumer.registerMessageListener(newMessageListenerConcurrently() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">       <span class="comment">// 处理消息逻辑</span></span><br><span class="line">       <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS; <span class="comment">// 处理成功</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;);</span><br></pre></td></tr></table></figure><h3 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h3><p>RocketMQ 提供了消息重试机制，确保消息在处理失败时不会丢失。</p><p><strong>生产者重试</strong>：生产者在消息发送失败时，可以进行重试，确保消息成功发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;producer.setRetryTimesWhenSendFailed(<span class="number">3</span>); <span class="comment">// 设置重试次数</span></span><br></pre></td></tr></table></figure><p><strong>消费者重试</strong>：消费者在处理消息失败时，RocketMQ 会自动进行重试，直到消息被成功处理或达到最大重试次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;consumer.setMaxReconsumeTimes(<span class="number">5</span>); <span class="comment">// 设置最大重试次数</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="RocketMQ如何做负载均衡"><a href="#RocketMQ如何做负载均衡" class="headerlink" title="RocketMQ如何做负载均衡"></a>RocketMQ如何做负载均衡</h1><blockquote><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p>RocketMQ 提供了多种负载均衡策略，常用的有以下几种：</p><h4 id="平均分配（AllocateMessageQueueAveragely）"><a href="#平均分配（AllocateMessageQueueAveragely）" class="headerlink" title="平均分配（AllocateMessageQueueAveragely）"></a>平均分配（AllocateMessageQueueAveragely）</h4><p>这是<strong>默认</strong>的负载均衡策略，将消息队列均匀分配给消费者组中的每个消费者实例。</p><p><strong>示例：</strong> 假设有一个主题TopicA，包含 4 个消息队列Q1、Q2、Q3、Q4，消费者组GroupA中有 2 个消费者实例Consumer1和Consumer2。使用平均分配策略时，Consumer1可能会分配到Q1和Q2，而Consumer2分配到Q3和Q4。</p><h4 id="按环形分配（AllocateMessageQueueByCircle）"><a href="#按环形分配（AllocateMessageQueueByCircle）" class="headerlink" title="按环形分配（AllocateMessageQueueByCircle）"></a>按环形分配（AllocateMessageQueueByCircle）</h4><p>这种策略将消息队列按<strong>顺序循环分配</strong>给消费者实例。</p><p><strong>示例：</strong> 假设有 3 个消息队列Q1、Q2、Q3，消费者组中有 2 个消费者实例Consumer1和Consumer2。使用按环形分配策略时，Consumer1可能会分配到Q1和Q3，而Consumer2分配到Q2。</p><h4 id="自定义分配策略"><a href="#自定义分配策略" class="headerlink" title="自定义分配策略"></a>自定义分配策略</h4><p>RocketMQ 允许用户实现自定义的负载均衡策略。用户可以通过实现<strong>AllocateMessageQueueStrategy接口</strong>，定义自己的消息队列分配逻辑。</p><h3 id="负载均衡过程"><a href="#负载均衡过程" class="headerlink" title="负载均衡过程"></a>负载均衡过程</h3><p>负载均衡过程通常在以下几种情况下触发：</p><p><strong>消费者实例启动</strong>：当新的消费者实例加入消费者组时，RocketMQ 会重新分配消息队列。</p><p><strong>消费者实例停止</strong>：当消费者实例停止或崩溃时，RocketMQ 会重新分配该实例负责的消息队列给其他存活的消费者实例。</p><p><strong>定时任务</strong>：RocketMQ 内部有定时任务定期检查和调整消息队列的分配情况，确保负载均衡的持续有效。</p></blockquote><h1 id="RocketMQ在分布式事务下的底层原理"><a href="#RocketMQ在分布式事务下的底层原理" class="headerlink" title="RocketMQ在分布式事务下的底层原理"></a>RocketMQ在分布式事务下的底层原理</h1><blockquote><p>RocketMQ 提供了分布式事务支持，主要通过<strong>两阶段提交（Two-Phase Commit）协议</strong>来实现</p><p><img src="/posts/186242d5/image-20250421222253936.png" alt="image-20250421222253936"></p><h3 id="事务消息发送流程"><a href="#事务消息发送流程" class="headerlink" title="事务消息发送流程"></a>事务消息发送流程</h3><p>分布式事务消息发送过程分为三个阶段：<strong>准备阶段、提交/回滚阶段和事务状态检查阶段。</strong></p><h4 id="准备阶段（Prepare-Phase）"><a href="#准备阶段（Prepare-Phase）" class="headerlink" title="准备阶段（Prepare Phase）"></a>准备阶段（Prepare Phase）</h4><p>在这个阶段，消息生产者发送一条<strong>预备消息</strong>（Prepare Message）到 RocketMQ Broker。预备消息会被持久化到 Broker，但<strong>不会被消费者消费</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;ProducerGroupName&quot;</span>);</span><br><span class="line">&gt;producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">&gt;producer.start();</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 定义事务监听器</span></span><br><span class="line">&gt;<span class="type">TransactionListener</span> <span class="variable">transactionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionListenerImpl</span>();</span><br><span class="line">&gt;producer.setTransactionListener(transactionListener);</span><br><span class="line"></span><br><span class="line">&gt;<span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;TagA&quot;</span>, (<span class="string">&quot;Hello RocketMQ&quot;</span>).getBytes());</span><br><span class="line">&gt;<span class="type">TransactionSendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.sendMessageInTransaction(msg, <span class="literal">null</span>);</span><br><span class="line">&gt;System.out.printf(<span class="string">&quot;%s%n&quot;</span>, result);</span><br></pre></td></tr></table></figure><h4 id="提交-回滚阶段（Commit-Rollback-Phase）"><a href="#提交-回滚阶段（Commit-Rollback-Phase）" class="headerlink" title="提交/回滚阶段（Commit/Rollback Phase）"></a>提交/回滚阶段（Commit/Rollback Phase）</h4><p>在本地事务执行完毕后，<strong>生产者</strong>会根据本地事务的执行结果来<strong>提交（Commit）或回滚（Rollback）</strong>之前的预备消息。提交消息会使得消息对消费者可见，而回滚消息则会删除预备消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> &#123;</span><br><span class="line">       <span class="comment">// 执行本地事务逻辑</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> executeLocalBusinessLogic();</span><br><span class="line">       <span class="keyword">if</span> (success) &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> &#123;</span><br><span class="line">       <span class="comment">// 检查本地事务状态</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> checkLocalTransactionStatus();</span><br><span class="line">       <span class="keyword">if</span> (success) &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="事务状态检查阶段（Transaction-Status-Check-Phase）"><a href="#事务状态检查阶段（Transaction-Status-Check-Phase）" class="headerlink" title="事务状态检查阶段（Transaction Status Check Phase）"></a>事务状态检查阶段（Transaction Status Check Phase）</h4><p>如果在预备消息发送之后，由于网络或其他原因导致生产者未能及时提交或回滚事务，Broker 会定期向生产者询问事务的状态。生产者需要实现<strong>checkLocalTransaction方法</strong>来返回事务的实际状态。</p><h3 id="事务消息的存储和状态管理"><a href="#事务消息的存储和状态管理" class="headerlink" title="事务消息的存储和状态管理"></a>事务消息的存储和状态管理</h3><p>RocketMQ 在 Broker 端会持久化预备消息，并在消息的元数据中记录其状态（准备中、已提交、已回滚）。当生产者提交或回滚事务时，Broker 会更新消息的状态。</p><h3 id="消费者处理事务消息"><a href="#消费者处理事务消息" class="headerlink" title="消费者处理事务消息"></a>消费者处理事务消息</h3><p>消费者在消费消息时，<strong>不会区分事务消息和普通消息</strong>。事务消息在被提交后，消费者才能消费到这些消息。</p><h3 id="事务消息的可靠性保证"><a href="#事务消息的可靠性保证" class="headerlink" title="事务消息的可靠性保证"></a>事务消息的可靠性保证</h3><p><strong>消息持久化</strong>：RocketMQ 对预备消息进行持久化存储，确保消息不会丢失。</p><p><strong>事务状态检查</strong>：通过事务状态检查机制，确保最终事务的一致性。</p><p><strong>重试机制</strong>：在事务消息的各个阶段都有重试机制，确保消息的可靠传递和处理。</p><h4 id="事务消息的示例代码"><a href="#事务消息的示例代码" class="headerlink" title="事务消息的示例代码"></a>事务消息的示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionProducer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">       <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;ProducerGroupName&quot;</span>);</span><br><span class="line">       producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">       producer.setTransactionListener(<span class="keyword">new</span> <span class="title class_">TransactionListenerImpl</span>());</span><br><span class="line">       producer.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;TagA&quot;</span>, (<span class="string">&quot;Hello RocketMQ&quot;</span>).getBytes());</span><br><span class="line">           <span class="type">TransactionSendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.sendMessageInTransaction(msg, <span class="literal">null</span>);</span><br><span class="line">           System.out.printf(<span class="string">&quot;%s%n&quot;</span>, result);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 保持生产者运行，模拟执行本地事务</span></span><br><span class="line">       Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(producer::shutdown));</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> &#123;</span><br><span class="line">       <span class="comment">// 执行本地事务逻辑</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> executeLocalBusinessLogic();</span><br><span class="line">       <span class="keyword">if</span> (success) &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> &#123;</span><br><span class="line">       <span class="comment">// 检查本地事务状态</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> checkLocalTransactionStatus();</span><br><span class="line">       <span class="keyword">if</span> (success) &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">executeLocalBusinessLogic</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 模拟本地事务执行</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回事务执行结果</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkLocalTransactionStatus</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 模拟检查本地事务状态</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回事务状态</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="为什么不应该对所有的message-都使用持久化机制"><a href="#为什么不应该对所有的message-都使用持久化机制" class="headerlink" title="为什么不应该对所有的message 都使用持久化机制"></a>为什么不应该对所有的message 都使用持久化机制</h1><blockquote><h3 id="性能开销"><a href="#性能开销" class="headerlink" title="性能开销"></a>性能开销</h3><p>持久化操作通常涉及磁盘 I/O 操作，而磁盘 I/O 的速度远低于内存操作。频繁的持久化会导致<strong>系统性能下降</strong>，包括消息发送和接收的延迟增加。每次消息持久化都需要写入磁盘，增加了消息发送的延迟。高频率的磁盘 I/O 会限制系统的整体吞吐量。</p><h3 id="资源消耗"><a href="#资源消耗" class="headerlink" title="资源消耗"></a>资源消耗</h3><p>持久化消息需要存储在磁盘上，这会<strong>占用大量的存储空间</strong>。对于高频率、大量的消息传输场景，存储成本会显著增加。大量持久化消息会迅速消耗磁盘空间。</p><h3 id="复杂性和维护成本"><a href="#复杂性和维护成本" class="headerlink" title="复杂性和维护成本"></a>复杂性和维护成本</h3><p>持久化机制增加了系统的复杂性，需要额外的维护和管理。例如，需要定期清理过期的持久化消息，确保磁盘空间的可用性。</p><h3 id="应用场景需求"><a href="#应用场景需求" class="headerlink" title="应用场景需求"></a>应用场景需求</h3><p>并非所有应用场景都需要消息持久化。对于一些实时性要求高但对消息可靠性要求不高的场景，持久化反而会带来不必要的开销。比如<strong>实时性要求高</strong>的场景：如<strong>实时数据流处理、临时通知</strong>等，不需要持久化。又比如<strong>可靠性要求低</strong>的场景：如<strong>缓存更新通知、统计数据</strong>等，丢失少量消息对系统影响不大。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（java）</title>
      <link href="/posts/c35f27cb.html"/>
      <url>/posts/c35f27cb.html</url>
      
        <content type="html"><![CDATA[<h2 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h2><blockquote><p>注意：  </p><ol><li><p>如果读取的字符串中含有空格，则使用上述方法读取字符串，会存在读取问题，读到空格就 停止本次的数据读入，因为StreamTokenizer在读取输入数据时，是以空格或回车换行为每次 输入数据的分隔，所以如果要读取含有空格的字符串，要使用下面的方法  </p></li><li><p>虽然StreamTokenizer 有提供方法，可以修改输入数据时的分隔符，但是由于大部分题目的输 入数据中都是以空格或换行为分隔符，所以不建议进行修改（如要修改可以参考： StreamTokenizer 使用详解）  </p></li><li><p>如果要将数值数据以字符串的形式读入，则不能使用上述的方法，需要使用下面的方法。 StreamTokenizer 以字符串的形式读取数值数据，读入后的字符串变量将指向null，即 StreamTokenizer 以字符串的形式读入数值数据读入的结果为空。  </p></li><li><p>用StreamTokenizer 快读读的数范围不能抄过1e16！否则可能会导致double转long 丢失精度！一行一行读的建议直接用BufferedReader</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">fastRW</span> &#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span>  </span><br><span class="line">                                                  <span class="title class_">InputStreamReader</span>(System.in)); </span><br><span class="line">    <span class="keyword">static</span> <span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br); </span><br><span class="line">    <span class="comment">//记得最后加上OUT.flush() </span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">OUT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span>  </span><br><span class="line">                                             <span class="title class_">BufferedOutputStream</span>(System.out)); </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        st.nextToken(); </span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) st.nval; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        st.nextToken(); </span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span>) st.nval; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        st.nextToken(); </span><br><span class="line">        <span class="keyword">return</span> st.nval; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//只能读取由字母和数字组成的字符串 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">nextStr</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        st.nextToken(); </span><br><span class="line">        <span class="keyword">return</span> st.sval; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="keyword">return</span> br.readLine(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">abs()    <span class="comment">//返回 this 的绝对值 </span></span><br><span class="line">negate()   <span class="comment">//返回 -this </span></span><br><span class="line">add(BigInteger val)  <span class="comment">//返回 this + val </span></span><br><span class="line">subtract(BigInteger val) <span class="comment">//返回 this - val </span></span><br><span class="line">multiply(BigInteger val) <span class="comment">//返回 this * val </span></span><br><span class="line">divide(BigInteger val) <span class="comment">//返回 this / val </span></span><br><span class="line">remainder(BigInteger val) <span class="comment">//返回 this % val </span></span><br><span class="line">mod(BigInteger val)  <span class="comment">//返回 this mod val </span></span><br><span class="line">pow(<span class="type">int</span> e)   <span class="comment">//返回 this^e </span></span><br><span class="line">and(BigInteger val)  <span class="comment">//返回 this &amp; val </span></span><br><span class="line">or(BigInteger val)  <span class="comment">//返回 this | val </span></span><br><span class="line">not()    <span class="comment">//返回 ~this </span></span><br><span class="line">xor(BigInteger val)  <span class="comment">//返回 this ^ val </span></span><br><span class="line">shiftLeft(<span class="type">int</span> n)  <span class="comment">//返回 this &lt;&lt; n </span></span><br><span class="line">shiftRight(<span class="type">int</span> n)  <span class="comment">//返回 this &gt;&gt; n </span></span><br><span class="line">max(BigInteger val)  <span class="comment">//返回 this 与 val 的较大值 </span></span><br><span class="line">min(BigInteger val)  <span class="comment">//返回 this 与 val 的较小值 </span></span><br><span class="line">bitCount()   <span class="comment">//返回 this 的二进制中不包括符号位的 1 的个数 </span></span><br><span class="line">bitLength()   <span class="comment">//返回 this 的二进制中不包括符号位的长度 </span></span><br><span class="line">getLowestSetBit()  <span class="comment">//返回 this 的二进制中最右边的位置 </span></span><br><span class="line">compareTo(BigInteger val) <span class="comment">//比较 this 和 val 值大小 </span></span><br><span class="line">toString()   <span class="comment">//返回 this 的 10 进制字符串表示形式 </span></span><br><span class="line">toString(<span class="type">int</span> radix)。  <span class="comment">//返回 this 的 raidx 进制字符串表示形式 </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">gcd(BigInteger val)  <span class="comment">//返回this绝对值与 val 绝对值的最大公约数 </span></span><br><span class="line">isProbablePrime(<span class="type">int</span> val) <span class="comment">//返回一个表示 this 是否是素数的布尔值 </span></span><br><span class="line">nextProbablePrime()  <span class="comment">//返回第一个大于 this 的素数 </span></span><br><span class="line">modPow(BigInteger b, BigInteger p) <span class="comment">//返回 this ^ b mod p </span></span><br><span class="line">modInverse(BigInteger p) <span class="comment">//返回 a mod p 的乘法逆元</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String </span><br><span class="line">    <span class="title function_">trim</span><span class="params">()</span><span class="comment">// 除去任何前导和尾随空格，如果该字符串没有前导或尾随的空格，则</span></span><br><span class="line">返回值为该字符串本身 </span><br><span class="line">    split(String regex)<span class="comment">// 根据指定字符串拆分 </span></span><br><span class="line">    indexOf(<span class="type">char</span> ch)<span class="comment">// 返回指定字符在此字符串中第一次出现的索引 </span></span><br><span class="line">    starstWith(String prefix)<span class="comment">//判断字符串是否以prefix为前缀开头 </span></span><br><span class="line">    endsWith(String suffix) </span><br><span class="line">    toLowerCase()<span class="comment">//返回字符串的小写形式 </span></span><br><span class="line">    toUpperCase() </span><br><span class="line">    contains(String s) </span><br><span class="line">StringBuilder </span><br><span class="line"> <span class="title function_">append</span><span class="params">(String str)</span><span class="comment">// 在此字符串追加str【参数为StringBuilder也可以】 </span></span><br><span class="line">    insert(<span class="type">int</span> index, <span class="type">char</span>[] c)<span class="comment">// 在index处插入字符数组c【c也可以是单个字符或者其他类型】 </span></span><br><span class="line">    delete(<span class="type">int</span> start, <span class="type">int</span> end)<span class="comment">// 移除此序列从start到end-1的字符串 </span></span><br><span class="line">    deleteCharAt(<span class="type">int</span> index)<span class="comment">// 移除指定索引上的字符 </span></span><br><span class="line">    setCharAt(<span class="type">int</span> index, <span class="type">char</span> ch)<span class="comment">// 将指定索引处的字符替换为ch </span></span><br><span class="line">    reverse()<span class="comment">// 将此字符串反转 </span></span><br></pre></td></tr></table></figure><h2 id="容器api"><a href="#容器api" class="headerlink" title="容器api"></a>容器api</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">List </span><br><span class="line">  <span class="comment">// 不要在 for/foreach 遍历 List 的过程中删除其中的元素，否则会抛出异常。 </span></span><br><span class="line">  <span class="comment">// 原因也很简单，list.size() 改变了，但在循环中已循环的次数却是没有随之变化。 </span></span><br><span class="line">  <span class="comment">// 原来预计在下一个 index 的数据,因为删除的操作变成了当前 index 的数据， </span></span><br><span class="line">  <span class="comment">// 运行下一个循环时操作的会变为原来预计在下下个 index 的数据， </span></span><br><span class="line">  <span class="comment">// 最终会导致操作的数据不符合预期。 </span></span><br><span class="line">  add(<span class="type">int</span> idx, Integer e) </span><br><span class="line">  set(<span class="type">int</span> idx, Integer e)<span class="comment">//修改 List 中第 idx 位置的值 </span></span><br><span class="line">  </span><br><span class="line">Queue </span><br><span class="line">  Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); </span><br><span class="line">  <span class="comment">// LinkedList 底层实现了 List 接口与 Deque 接口，而 Deque 接口继承自 Queue 接口， </span></span><br><span class="line">  <span class="comment">// 所以 LinkedList 可以同时实现 List 与 Queue 。 </span></span><br><span class="line">   </span><br><span class="line">PriorityQueue <span class="comment">//默认是小根堆 </span></span><br><span class="line">  Queue&lt;Integer&gt; q2 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((x, y) -&gt; &#123;<span class="keyword">return</span> y - x;&#125;);  <span class="comment">// 大根堆 </span></span><br><span class="line">  offer(Integer val) <span class="comment">//入队  </span></span><br><span class="line">  peek() <span class="comment">//返回队头元素 </span></span><br><span class="line">  poll() <span class="comment">//返回队头元素并删除 </span></span><br><span class="line">  </span><br><span class="line">Deque <span class="comment">//双端队列 </span></span><br><span class="line">  push(Integer val) <span class="comment">//将一个元素从队头加入Deque，等效于addFirst </span></span><br><span class="line">  add(Integer val) <span class="comment">//将一个元素从队尾加入this </span></span><br><span class="line">  <span class="comment">//add、remove 操作在遇到异常时会抛出异常，而offer、 poll 不会抛出异常。 </span></span><br><span class="line">  </span><br><span class="line">Set <span class="comment">//元素不重复 </span></span><br><span class="line">  addAll(Collection e)<span class="comment">//将一个容器里的所有元素添加进 Set </span></span><br><span class="line">  retainAll(Collection e)<span class="comment">//将 Set 改为两个容器内相同的元素 </span></span><br><span class="line">  removeAll(Collection e)<span class="comment">//将 Set 中与 e 相同的元素删除 </span></span><br><span class="line">  HashSet<span class="comment">//随机位置插入的 Set。 </span></span><br><span class="line">  LinkedHashSet<span class="comment">//保持插入顺序的 Set。 </span></span><br><span class="line">  TreeSet<span class="comment">//保持容器中元素有序的 Set，默认为升序。 </span></span><br><span class="line">    Set&lt;Integer&gt; s4 = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((x, y) -&gt; &#123;<span class="keyword">return</span> y - x;&#125;);  <span class="comment">// 降序  </span></span><br><span class="line">    TreeSet&lt;Integer&gt; s4 = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((x, y) -&gt; &#123;<span class="keyword">return</span> y - x;&#125;);  <span class="comment">// 降序  </span></span><br><span class="line">    <span class="comment">//TreeSet特有api </span></span><br><span class="line">   first() <span class="comment">//返回 TreeSet 中第一个元素，无则返回 null </span></span><br><span class="line">      last() </span><br><span class="line">      floor(Integer val)<span class="comment">//返回集合中 &lt;=val 的第一个元素，无则返回 null </span></span><br><span class="line">      ceiling(Integer val)<span class="comment">//返回集合中 &gt;=val 的第一个元素，无则返回 null </span></span><br><span class="line">      higher(Integer val)<span class="comment">//返回集合中 &gt;val 的第一个元素，无则返回 null </span></span><br><span class="line">      lower(Integer val)<span class="comment">//返回集合中 &lt;val 的第一个元素，无则返回 null </span></span><br><span class="line">      pollFirst()<span class="comment">//返回并删除 TreeSet 中第一个元素，无则返回 null </span></span><br><span class="line">      pollLast() </span><br><span class="line">  </span><br><span class="line">Map <span class="comment">//HashMap LinkedHashMap TreeMap与set中类似 </span></span><br><span class="line">  keySet() <span class="comment">//将 this 中所有元素的 key 作为集合返回 </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//工具类 </span></span><br><span class="line">Arrays </span><br><span class="line">  Arrays.sort() <span class="comment">//排序区间为左闭右开 [firstIdx, lastIdx) </span></span><br><span class="line">  <span class="comment">//Arrays.sort() 底层函数： </span></span><br><span class="line">    <span class="comment">// 当你 Arrays.sort 的参数数组元素类型为基本数据类型 </span></span><br><span class="line">    <span class="comment">// （byte、short、char、int、long、double、float）时， </span></span><br><span class="line">    <span class="comment">// 默认为 DualPivotQuicksort（双轴快排），复杂度最坏可以达到 O(n^2)。 </span></span><br><span class="line">    <span class="comment">// 当你 Arrays.sort 的参数数组元素类型为非基本数据类型时， </span></span><br><span class="line">    <span class="comment">// 则默认为 legacyMergeSort 和 TimSort（归并排序），复杂度为O(nlog n)。 </span></span><br><span class="line">  Arrays.binarySearch() <span class="comment">//二分查找是否存在key，存在返回下标。不存在，返回一个负</span></span><br><span class="line">数。 </span><br><span class="line"> <span class="comment">//源码 </span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex, </span></span><br><span class="line"><span class="params"><span class="type">int</span> key)</span> &#123; </span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex; </span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>; </span><br><span class="line">     </span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123; </span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>; </span><br><span class="line">                <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid]; </span><br><span class="line">     </span><br><span class="line">                <span class="keyword">if</span> (midVal &lt; key) </span><br><span class="line">                    low = mid + <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key) </span><br><span class="line">                    high = mid - <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="keyword">return</span> mid; <span class="comment">// key found </span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found. </span></span><br><span class="line">        &#125; </span><br><span class="line">  </span><br><span class="line">Collections </span><br><span class="line">  Collections.sort()<span class="comment">//将其中所有元素转化为数组调用 Arrays.sort()， </span></span><br><span class="line">     <span class="comment">//完成排序后再赋值给原本的集合。归并排序。 </span></span><br><span class="line">  Collections.binarySearch()<span class="comment">//该方法无法对指定区间进行搜索。 </span></span><br><span class="line">  Collections.swap()<span class="comment">// Collections.swap(list, i, j); </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//如果单纯是数值类型，-0.0 = 0.0 。若是对象类型，则 -0.0 != 0.0 。 </span></span><br><span class="line"><span class="comment">//倘若你尝试用 Set 统计斜率数量时,要把所有的斜率加入 Set 前将值增加 0.0。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis面试题</title>
      <link href="/posts/da3e1361.html"/>
      <url>/posts/da3e1361.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring面试题</title>
      <link href="/posts/6c92115f.html"/>
      <url>/posts/6c92115f.html</url>
      
        <content type="html"><![CDATA[<h2 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h2><blockquote><h4 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h4><p>将对象的创建和依赖关系的管理交给Spring IoC容器，极大地提高了代码的模块化和可维护性。</p><p>Spring IoC容器负责管理应用程序中对象的生命周期和依赖关系。它的主要职责包括：</p><p><strong>对象的创建</strong>：根据配置文件或注解创建对象。</p><p><strong>依赖注入</strong>：将对象的依赖注入到相应的对象中。</p><p><strong>对象的销毁</strong>：在适当的时候销毁对象，释放资源。</p><p><strong>配置方式</strong></p><p><strong>XML配置</strong>：通过XML文件定义Bean及其依赖关系。</p><p><strong>Java配置</strong>：通过Java类和注解定义Bean及其依赖关系。</p><p><strong>注解配置</strong>：通过注解（如@Component,@Autowired）自动扫描和注入Bean。</p><h4 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h4><p>依赖注入是实现控制反转的一种方式。</p><p><strong>构造函数注入</strong>：通过构造函数将依赖对象传递给被依赖对象。</p><p><strong>Setter方法注入</strong>：通过Setter方法将依赖对象注入到被依赖对象中。</p><p><strong>字段注入</strong>：直接在字段上使用注解进行注入。</p></blockquote><h2 id="BeanFactory-和-ApplicationContext-的区别？"><a href="#BeanFactory-和-ApplicationContext-的区别？" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别？"></a>BeanFactory 和 ApplicationContext 的区别？</h2><blockquote><p>BeanFactory和ApplicationContext都是用于管理Bean的容器接口</p><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>BeanFactory是Spring框架的核心接口之一，负责管理和配置应用程序中的Bean。它提供了基本的Bean容器功能，但功能相对简单。BeanFactory提供了Bean的创建、获取和管理功能。它是Spring IoC容器的最基本接口。</p><p>BeanFactory默认采用懒加载（lazy loading），即只有在第一次访问Bean时才会创建该Bean。这有助于提升启动性能。</p><p>因为功能较为基础，BeanFactory通常用于资源受限的环境中，比如移动设备或嵌入式设备。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">&gt;<span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resource);</span><br><span class="line">&gt;<span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> (MyBean) beanFactory.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>ApplicationContext是BeanFactory的子接口，提供了更丰富的功能和更多的企业级特性。</p><p>不仅提供了BeanFactory的所有功能，还提供了更多高级特性，如事件发布、国际化、AOP、自动Bean装配等。</p><p>ApplicationContext默认会在启动时创建并初始化所有单例Bean（除非显式配置为延迟初始化）。这有助于在应用启动时尽早发现配置问题。</p><p>ApplicationContext支持自动装配Bean，可以根据配置自动注入依赖对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">&gt;<span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> (MyBean) context.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br></pre></td></tr></table></figure><p>ApplicationContext有多种实现，如ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、AnnotationConfigApplicationContext等，适用于不同的配置方式和场景。</p><p><strong>ClassPathXmlApplicationContext</strong>:从类路径下加载XML配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>FileSystemXmlApplicationContext：</strong>从文件系统路径加载XML配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;C:/path/to/applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>AnnotationConfigApplicationContext：</strong>从Java配置类（使用@Configuration注解的类）加载配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Configuration</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> MyBean <span class="title function_">myBean</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br></pre></td></tr></table></figure><p><strong>XmlWebApplicationContext：</strong>专门为Web应用设计的ApplicationContext实现类，从Web应用的上下文中加载XML配置文件。</p><p>web.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;context-param&gt;</span><br><span class="line">   &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">   &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">&gt;&lt;/context-param&gt;</span><br><span class="line">&gt;&lt;listener&gt;</span><br><span class="line">   &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">&gt;&lt;/listener&gt;</span><br></pre></td></tr></table></figure><p><strong>AnnotationConfigWebApplicationContext：</strong>专门为Web应用设计的ApplicationContext实现类，从Java配置类加载配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span> <span class="keyword">implements</span> <span class="title class_">WebApplicationInitializer</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(ServletContext container)</span> &#123;</span><br><span class="line">       <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">       context.register(AppConfig.class);</span><br><span class="line">       container.addListener(<span class="keyword">new</span> <span class="title class_">ContextLoaderListener</span>(context));</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>GenericGroovyApplicationContext：</strong>从Groovy脚本配置文件加载配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericGroovyApplicationContext</span>(<span class="string">&quot;applicationContext.groovy&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><div class="table-container"><table><thead><tr><th></th><th><strong>BeanFactory</strong></th><th><strong>ApplicationContext</strong></th></tr></thead><tbody><tr><td><strong>初始化时机</strong></td><td>延迟初始化，只有在第一次访问Bean时才创建该Bean。</td><td>立即初始化，在容器启动时就创建并初始化所有单例Bean。</td></tr><tr><td><strong>特性</strong></td><td>功能较为基础，只提供Bean的创建、获取和管理功能。</td><td>提供更多企业级特性，如事件发布、国际化、AOP、自动装配等。</td></tr><tr><td><strong>使用场景</strong></td><td>适用于资源受限的环境，或者需要延迟初始化的场景。</td><td>适用于大多数企业级应用</td></tr></tbody></table></div></blockquote><h2 id="spring-bean标签的属性和生命周期"><a href="#spring-bean标签的属性和生命周期" class="headerlink" title="spring bean标签的属性和生命周期"></a>spring bean标签的属性和生命周期</h2><blockquote><p><strong>id：</strong>Bean的唯一标识符。</p><p><strong>name：</strong>Bean的别名，可以为Bean定义一个或多个别名。</p><p><strong>class：</strong>Bean的全限定类名。</p><p><strong>scope：</strong>Bean的作用域，常见值包括（默认）、prototype、request、session、globalSession、application。</p><p>singleton：默认作用范围，整个Spring容器中只有一个实例，所有对该Bean的引用都指向同一个实例。适用于无状态的Bean。</p><p>prototype：每次请求该Bean时都会创建一个新的实例。适用于有状态的Bean。<br>request：每次HTTP请求都会创建一个新的实例，仅适用于Web应用。</p><p>session：每个HTTP会话都会创建一个新的实例，仅适用于Web应用。</p><p>globalSession：每个全局HTTP会话都会创建一个新的实例，仅适用于Portlet应用。</p><p>application：每个ServletContext会创建一个新的实例，适用于Web应用。</p><p><strong>init-method：</strong>Bean初始化时调用的方法。</p><p><strong>destroy-method：</strong>Bean销毁时调用的方法。</p><p><strong>factory-method：</strong>用于创建Bean实例的静态工厂方法。<br><strong>factory-bean：</strong>用于创建Bean实例的工厂Bean的名称。</p><p><strong>constructor-arg：</strong>用于构造函数注入。</p><p><strong>property：</strong>用于Setter方法注入。</p><p><strong>autowire：</strong>自动装配模式，常见值包括no（默认）、byName、byType、constructor、autodetect。</p><p><strong>depends-on：</strong>指定Bean的依赖关系，即在初始化当前Bean之前需要先初始化的Bean。</p><p><strong>lazy-init：</strong>是否延迟初始化，默认值为false。</p><p><strong>primary：</strong>当自动装配时，如果有多个候选Bean，可以将某个Bean标记为主要候选者。</p></blockquote><p><strong>生命周期</strong></p><p><img src="/posts/6c92115f/image.png" alt="image.png"></p><blockquote><p><strong>实例化（Instantiation）</strong><br>Spring容器根据配置创建Bean实例。<br><strong>属性设置（Property Population）</strong><br>Spring容器进行依赖注入，设置Bean的属性。<br><strong>初始化（Initialization）</strong><br>如果Bean实现了InitializingBean接口，Spring会调用其afterPropertiesSet()方法。<br>如果在XML配置中指定了init-method属性，Spring会调用指定的初始化方法。<br>如果Bean使用了@PostConstruct注解，Spring会调用标注的方法。<br><strong>使用（Usage）</strong><br>Bean处于就绪状态，可以被应用程序使用。<br><strong>销毁（Destruction）</strong><br>如果Bean实现了DisposableBean接口，Spring会调用其destroy()方法。<br>如果在XML配置中指定了destroy-method属性，Spring会调用指定的销毁方法。<br>如果Bean使用了@PreDestroy注解，Spring会调用标注的方法。</p></blockquote><h2 id="解决Spring-循环依赖"><a href="#解决Spring-循环依赖" class="headerlink" title="解决Spring 循环依赖"></a>解决Spring 循环依赖</h2><blockquote><p><strong>构造器注入的循环依赖</strong></p><p>Spring 无法直接解决通过构造器注入引起的循环依赖，因为在这种情况下，Spring 无法创建任何一个 Bean 实例而不先创建另一个 Bean 实例。这会导致一个无限循环。因此，通常建议避免在构造器注入中引入循环依赖。</p><p><strong>Setter 注入的循环依赖</strong></p><p>对于通过 setter 方法注入引起的循环依赖，Spring 采用三级缓存机制来解决问题。</p><h4 id="三级缓存机制"><a href="#三级缓存机制" class="headerlink" title="三级缓存机制"></a>三级缓存机制</h4><ol><li><strong>一级缓存（singletonObjects）</strong>：用于存储完全初始化好的单例 Bean。类型：Map<String, object></String,></li><li><strong>二级缓存（earlySingletonObjects）</strong>：用于存储早期暴露的 Bean 实例，部分初始化的 Bean。Map<String, object></String,></li><li><strong>三级缓存（singletonFactories）</strong>：用于存储 Bean 工厂，主要用于创建 Bean 的代理对象。Map<String, objectfactory<?>&gt;</String,></li></ol><h4 id="解决循环依赖的过程"><a href="#解决循环依赖的过程" class="headerlink" title="解决循环依赖的过程"></a>解决循环依赖的过程</h4><p>我们拿 A 依赖 B，B 依赖 A 来进行举例</p><p>1、在创建 A 对象放入到 spring 容器的过程，先看一级缓存，能否可以直接获取到 A，如果可以，直接获取，如果不可以，则开始创建 A 对象，A创建过程中发现需要属性 B，查找发现 B 还没有在一级缓存中，于是先将 A 放到三级缓存中，此时的 A 不完整，没有属性，但是可以引用。接下来就去实例化B。</p><p>2、B 实例化的过程，也是先从一级缓存，看自己有没有，没有的话，开始创建，此时发现需要A，于是B先查一级缓存寻找A，如果没有，再查二级缓存，如果还没有，再查三级缓存，找到了A，然后把三级缓存里面的这个A放到二级缓存里面，并删除三级缓存里面的A。</p><p>3、B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中的状态）。然后回来接着创建A，此时B已经创建结束，可以直接从一级缓存里面拿到B，去完成A的创建，并将A放到一级缓存。</p><h4 id="假设我们没有三级缓存，只有一级缓存，那么我们会怎样进行处理呢？"><a href="#假设我们没有三级缓存，只有一级缓存，那么我们会怎样进行处理呢？" class="headerlink" title="假设我们没有三级缓存，只有一级缓存，那么我们会怎样进行处理呢？"></a>假设我们没有三级缓存，只有一级缓存，那么我们会怎样进行处理呢？</h4><p>首先A对象进行实例化，A要进行属性填充B。但是B还没有创建，于是开始B进行实例化，同样的B也要进行属性填充，发现他需要A。然而我们的一级缓存的Map里面还没有A，所以他有创建A，于是就产生了死循环。循环往复，最后栈溢出。那么小伙伴们会问，我的A我不进行属性填充，我直接扔一级缓存里面，那不就可以了吗？这样就会造成map里面存的A是个假A，缺胳膊少腿，当你真正用到他的时候，啪一个空指针异常。而且我们的一级缓存规定是完全初始化好的bean。给我们的程序进行使用。那么大家这会都理解了，一级缓存行不通</p><h4 id="二级缓存解决了什么问题？"><a href="#二级缓存解决了什么问题？" class="headerlink" title="二级缓存解决了什么问题？"></a>二级缓存解决了什么问题？</h4><p>首先我们还是实例化A开始，注意这个地方，我们实例化后，还没有进行属性填充的时候，就把A对象的引用放入到了map2备用。然后进行属性填充，A去填充B，发现B没有实例化，于是B同样实例化后，把自己的半成品放入到map2。B开始进行填充，发现Map1中没有A，又去Map2中进行寻找，发现map2里面有。于是B直接拿到map2中的A使自己变得非常完整。这个时候B就把自己放入Map1。并把Map2的半成品删除了。回到刚才A的阶段，A发现Map1中已经有B了。那么A也就完成了属性的创建。于是双方都完成了自己的创建。这就是二级缓存解决的问题。</p><h4 id="不需要三级缓存可以吗？"><a href="#不需要三级缓存可以吗？" class="headerlink" title="不需要三级缓存可以吗？"></a>不需要三级缓存可以吗？</h4><p>主要是因为Spring的Aop机制所产生的代理对象问题。首先要了解一个前置就是Spring的代理对象产生阶段是在填充属性后才进行的，原理通过后置处理器BeanPostProcessor来实现。如果说我们用二级缓存来解决，那么就要在属性填充的时候，将代理对象生成好，放入二级缓存。那么就与我们spring的对象生命周期相悖。所以这种方式不好，于是我们引入了三级缓存。</p></blockquote><h2 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a>@ComponentScan注解</h2><blockquote><p>@ComponentScan是用于自动扫描指定的包及其子包中的组件类，并将它们注册为 Spring 容器管理的 Bean。这个过程被称为组件扫描（Component Scanning）。</p><p><strong>basePackages属性</strong>:用于指定要扫描的包。可以指定一个或多个包路径。</p><p><strong>basePackageClasses属性</strong>:用于指定一个或多个类，Spring 会扫描这些类所在的包。</p><p><strong>includeFilters和excludeFilters属性</strong>: 用于指定包含或排除的过滤器。可以根据注解、类型、正则表达式等进行过滤。</p><p><strong>lazyInit属性</strong>:用于指定是否延迟初始化扫描到的 Bean。默认值为false，表示立即初始化。</p></blockquote><h2 id="Autowired和-Resource的区别"><a href="#Autowired和-Resource的区别" class="headerlink" title="@Autowired和@Resource的区别"></a>@Autowired和@Resource的区别</h2><blockquote><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p><strong>来源</strong>：Spring 框架。<br><strong>注入方式</strong>：默认按<strong>类型</strong>注入。<br><strong>用法</strong>：可以用于字段、构造器、Setter 方法或其他任意方法。<br><strong>可选性</strong>：可以与@Qualifier一起使用，以指定具体的 Bean。<br><strong>处理机制</strong>：Spring 的AutowiredAnnotationBeanPostProcessor处理@Autowired注解。</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p><strong>来源</strong>：由 Java EE 提供。<br><strong>注入方式</strong>：默认按<strong>名称</strong>注入，如果按名称找不到，则按类型注入。<br><strong>用法</strong>：可以用于字段或 Setter 方法。<br><strong>属性</strong>：可以指定name和type属性。<br><strong>处理机制</strong>：Spring 的CommonAnnotationBeanPostProcessor处理@Resource注解。</p></blockquote><h2 id="Component和-Bean的区别"><a href="#Component和-Bean的区别" class="headerlink" title="@Component和@Bean的区别"></a>@Component和@Bean的区别</h2><blockquote><h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><p><strong>用途</strong>：用于将一个类标记为 Spring 组件类，使其被 Spring 容器自动扫描并注册为 Bean。<br><strong>使用场景</strong>：通常用于标记那些需要自动检测和注册为 Bean 的类。<br><strong>位置</strong>：直接标记在类上。<br><strong>自动扫描</strong>：需要配合@ComponentScan注解使用，Spring 会自动扫描指定包及其子包中的所有类，找到带有@Component注解的类，并将它们注册为 Bean。</p><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p><strong>用途</strong>：用于定义一个方法，该方法返回一个要注册为 Spring 容器管理的 Bean。<br><strong>使用场景</strong>：通常用于显式定义 Bean，特别是当需要一些复杂的初始化逻辑或需要从第三方库创建 Bean 时。<br><strong>位置</strong>：标记在方法上，<strong>方法所在的类需要用@Configuration注解标记</strong>。<br><strong>显式配置</strong>：通过显式的 Java 配置方式定义 Bean，而不是通过类路径扫描。</p></blockquote><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>AOP（面向切面编程）是一种编程范式，它旨在通过分离横切关注点来提高代码的模块化。AOP 在传统的面向对象编程（OOP）基础上，提供了一种处理系统级关注点（如日志记录、事务管理、安全性等）的机制，而这些关注点通常会散布在多个模块中。</p><h4 id="AOP-的基本概念"><a href="#AOP-的基本概念" class="headerlink" title="AOP 的基本概念"></a>AOP 的基本概念</h4><p><strong>Aspect（切面）</strong>：切面是模块化的横切关注点。它可以包含多个 advice（通知）和 pointcut（切入点）。</p><p><strong>Advice（通知）</strong>：通知是切面在特定的切入点执行的动作。通知有几种类型：</p><ul><li><strong>Before</strong>：在方法执行之前执行。</li><li><strong>After</strong>：在方法执行之后执行。</li><li><strong>AfterReturning</strong>：在方法成功执行之后执行。</li><li><strong>AfterThrowing</strong>：在方法抛出异常后执行。</li><li><strong>Around</strong>：包围一个方法的执行，能够控制方法的执行前后。</li></ul><p><strong>Pointcut（切入点）</strong>：切入点定义了通知应该应用到哪些连接点上。连接点是程序执行的特定点，如方法调用或异常抛出。</p><p><strong>Join Point（连接点）</strong>：连接点是程序执行过程中可以插入切面的一个点。通常，连接点是方法的调用或执行。AOP 框架允许在这些连接点上插入额外的行为。</p><p><strong>Weaving（织入）</strong>：将切面应用到目标对象创建代理对象的过程。织入可以在编译时、类加载时、运行时进行。</p><h4 id="AOP-的作用和优势"><a href="#AOP-的作用和优势" class="headerlink" title="AOP 的作用和优势"></a>AOP 的作用和优势</h4><p><strong>模块化横切关注点</strong>：AOP 允许将横切关注点（如日志记录、事务管理、安全性等）从业务逻辑中分离出来，从而提高代码的模块化和可维护性。</p><p><strong>减少重复代码</strong>：通过将通用功能提取到切面中，可以减少代码的重复，提高代码的可读性和可维护性。</p><p><strong>提高代码的可维护性</strong>：由于横切关注点被模块化为切面，任何修改只需要在切面中进行，而不需要修改业务逻辑代码，从而提高了代码的可维护性。</p><p><strong>动态代理</strong>：AOP 使用动态代理机制，可以在不修改源代码的情况下为现有代码添加功能。</p><p><strong>增强代码的可测试性</strong>：由于横切关注点被分离成切面，业务逻辑代码变得更加简洁和专注，从而提高了代码的可测试性。</p><h4 id="AOP-的应用场景"><a href="#AOP-的应用场景" class="headerlink" title="AOP 的应用场景"></a>AOP 的应用场景</h4><p><strong>日志记录</strong>：在方法调用前后记录日志。</p><p><strong>事务管理</strong>：在方法执行前开启事务，在方法执行后提交事务，在方法抛出异常时回滚事务。</p><p><strong>安全性检查</strong>：在方法执行前进行权限检查。</p><p><strong>性能监控</strong>：在方法执行前后记录执行时间。</p><p><strong>缓存</strong>：在方法调用前检查缓存，在方法调用后更新缓存。</p><h4 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">&gt;import org.aspectj.lang.annotation.Before;</span><br><span class="line">&gt;import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">&gt;@Aspect</span><br><span class="line">&gt;@Component</span><br><span class="line">&gt;public class LoggingAspect &#123;</span><br><span class="line">   @Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span><br><span class="line">   public void logBefore() &#123;</span><br><span class="line">       System.out.println(&quot;Logging before method execution&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-Spring-应用"><a href="#配置-Spring-应用" class="headerlink" title="配置 Spring 应用"></a>配置 Spring 应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">&gt;import org.springframework.context.annotation.Configuration;</span><br><span class="line">&gt;import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line">&gt;@Configuration</span><br><span class="line">&gt;@ComponentScan(basePackages = &quot;com.example&quot;)</span><br><span class="line">&gt;@EnableAspectJAutoProxy</span><br><span class="line">&gt;public class AppConfig &#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-AOP-的服务类"><a href="#使用-AOP-的服务类" class="headerlink" title="使用 AOP 的服务类"></a>使用 AOP 的服务类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">&gt;@Service</span><br><span class="line">&gt;public class MyService &#123;</span><br><span class="line">   public void performTask() &#123;</span><br><span class="line">       System.out.println(&quot;Performing task&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;import org.springframework.context.ApplicationContext;</span><br><span class="line">&gt;import org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line">&gt;public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">       MyService myService = context.getBean(MyService.class);</span><br><span class="line">       myService.performTask();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>LoggingAspect切面会在每次调用MyService中的方法时记录日志，而无需修改MyService的源代码。 AOP 通过分离横切关注点来提高代码的模块化和可维护性。</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>动态代理是一种在运行时动态生成代理类的机制，它允许我们在不修改原始类的情况下增强或修改其行为。动态代理是通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口来实现的。</p><h4 id="动态代理的基本概念"><a href="#动态代理的基本概念" class="headerlink" title="动态代理的基本概念"></a>动态代理的基本概念</h4><p><strong>代理类（Proxy Class）</strong>：一个代理类是一个实现了一个或多个接口的类，它可以在运行时动态生成。代理类的实例可以用来代替原始对象，并在调用方法时执行额外的逻辑。</p><p><strong>调用处理器（Invocation Handler）</strong>：调用处理器是一个实现了InvocationHandler接口的类，它定义了代理类的方法调用逻辑。每次代理对象的方法被调用时，调用处理器的invoke方法都会被执行。</p><h4 id="动态代理的作用和优势"><a href="#动态代理的作用和优势" class="headerlink" title="动态代理的作用和优势"></a>动态代理的作用和优势</h4><p><strong>1、 解耦业务逻辑和通用功能</strong>：动态代理允许将通用功能（如日志记录、事务管理、安全性检查等）从业务逻辑中分离出来，从而提高代码的模块化和可维护性。</p><p><strong>2、 灵活性</strong>：动态代理在运行时生成代理类，不需要在编译时确定代理类，因此具有很大的灵活性。</p><p><strong>3、 减少代码重复</strong>：通过动态代理，可以将通用功能集中到一个地方，从而减少代码重复。</p><p><strong>4、 增强现有代码</strong>：动态代理允许在不修改现有代码的情况下增强其功能。</p><h4 id="动态代理的应用场景"><a href="#动态代理的应用场景" class="headerlink" title="动态代理的应用场景"></a>动态代理的应用场景</h4><p><strong>1、AOP（面向切面编程）</strong>：动态代理是实现 AOP 的核心技术之一，通过动态代理可以在方法执行前后添加横切关注点（如日志记录、事务管理等）。</p><p><strong>2、 远程方法调用（RMI）</strong>：动态代理可以用来实现客户端和服务器之间的远程方法调用。</p><p><strong>3、 装饰器模式</strong>：动态代理可以用来实现装饰器模式，在不修改原始类的情况下增强其功能。</p><p><strong>4、 框架和中间件</strong>：许多框架和中间件（如 Spring、Hibernate 等）都使用动态代理来实现其核心功能。</p><p>动态代理通过在运行时生成代理类，提供了一种灵活且强大的方式来增强现有代码的功能，而无需修改原始代码。</p><h4 id="常用的两种方式"><a href="#常用的两种方式" class="headerlink" title="常用的两种方式"></a>常用的两种方式</h4><p>动态代理常用的两种方式是基于接口的动态代理（JDK 动态代理）和基于类的动态代理（CGLIB 动态代理）。</p><h5 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h5><p>JDK 动态代理是 Java 标准库提供的一种动态代理机制，它依赖于接口来创建代理对象。JDK 动态代理通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口实现。当你有一个接口并希望为该接口的实现类创建代理时，可以使用 JDK 动态代理。</p><p><strong>实现：</strong>JDK 动态代理主要依赖于java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口来实现。</p><p><strong>步骤：</strong></p><p>定义接口：定义需要代理的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">performTask</span><span class="params">()</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>实现接口：创建接口的实现类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;public class MyServiceImpl implements MyService &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void performTask() &#123;</span><br><span class="line">       System.out.println(&quot;Performing task&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>创建调用处理器：实现InvocationHandler接口，并在invoke方法中定义代理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LoggingInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.target = target;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Logging before method execution: &quot;</span> + method.getName());</span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">       System.out.println(<span class="string">&quot;Logging after method execution: &quot;</span> + method.getName());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象：通过Proxy.newProxyInstance方法创建代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 创建目标对象</span></span><br><span class="line">       <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建调用处理器</span></span><br><span class="line">       <span class="type">LoggingInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingInvocationHandler</span>(myService);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建代理对象</span></span><br><span class="line">       <span class="type">MyService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (MyService) Proxy.newProxyInstance(</span><br><span class="line">               myService.getClass().getClassLoader(),</span><br><span class="line">               myService.getClass().getInterfaces(),</span><br><span class="line">               handler</span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">       proxyInstance.performTask();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h5><p>CGLIB（Code Generation Library）是一个强大的高性能代码生成库，它通过生成子类的方式来为目标类创建代理对象。CGLIB 动态代理不需要接口，可以直接代理类。当你没有接口，只有具体类时，可以使用 CGLIB 动态代理。</p><p><strong>步骤</strong>:</p><p>引入 CGLIB 库：确保在项目中添加 CGLIB 依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>创建目标类：定义需要代理的具体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performTask</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Performing task&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>创建方法拦截器：实现MethodInterceptor接口，并在intercept方法中定义代理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line">&gt;<span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Logging before method execution: &quot;</span> + method.getName());</span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">       System.out.println(<span class="string">&quot;Logging after method execution: &quot;</span> + method.getName());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象：通过Enhancer类创建代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 创建 Enhancer 对象</span></span><br><span class="line">       <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 设置目标类为代理类的父类</span></span><br><span class="line">       enhancer.setSuperclass(MyService.class);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 设置方法拦截器</span></span><br><span class="line">       enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">LoggingMethodInterceptor</span>());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建代理对象</span></span><br><span class="line">       <span class="type">MyService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (MyService) enhancer.create();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">       proxyInstance.performTask();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><p><strong>依赖性</strong>：</p><p>JDK 动态代理依赖于接口，如果没有接口就无法使用。</p><p>CGLIB 动态代理可以直接代理类，不需要接口。</p><p><strong>性能</strong>：</p><p>JDK 动态代理由于需要通过反射调用方法，性能可能会有所影响。</p><p>CGLIB 动态代理通过生成字节码来创建代理类，性能通常比 JDK 动态代理更高，但生成字节码的过程会稍微多占用一些内存。</p><p><strong>使用场景</strong>：</p><p>JDK 动态代理适用于有接口的情况，适用于大多数常见的业务场景。</p><p>CGLIB 动态代理适用于没有接口的情况，适用于需要代理大量具体类的场景。</p></blockquote><h2 id="Spring中的单例Beans不是线程安全"><a href="#Spring中的单例Beans不是线程安全" class="headerlink" title="Spring中的单例Beans不是线程安全"></a>Spring中的单例Beans不是线程安全</h2><blockquote><p>在 Spring 中，单例（Singleton）Beans 是默认的 Bean 范围（Scope）。这意味着 Spring 容器在整个应用程序生命周期内只会创建一个 Bean 实例，并在需要时重复使用该实例。</p><p>单例 Beans 本身并不是线程安全的。Spring 容器不会自动为你处理线程安全问题。如果你的单例 Bean 被多个线程同时访问，并且这些线程执行的操作会修改 Bean 的状态，那么你需要自己确保线程安全。</p></blockquote><h2 id="Spring事务传播行为"><a href="#Spring事务传播行为" class="headerlink" title="Spring事务传播行为"></a>Spring事务传播行为</h2><blockquote><p>这些传播行为通过@Transactional注解的propagation属性来配置</p><h5 id="传播行为类型-前三个常用"><a href="#传播行为类型-前三个常用" class="headerlink" title="传播行为类型(前三个常用)"></a>传播行为类型(前三个常用)</h5><p><strong>REQUIRED</strong>（默认值）：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</p><p><strong>REQUIRES_NEW：</strong>总是创建一个新的事务。如果当前存在事务，则挂起当前事务。</p><p><strong>SUPPORTS：</strong>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务方式继续执行。</p><p><strong>NOT_SUPPORTED：</strong>总是以非事务方式执行，如果当前存在事务，则挂起当前事务。</p><p><strong>MANDATORY：</strong>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p><p><strong>NEVER：</strong>总是以非事务方式执行，如果当前存在事务，则抛出异常。</p><p><strong>NESTED：</strong>如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则创建一个新的事务。</p><h5 id="事务传播行为的选择"><a href="#事务传播行为的选择" class="headerlink" title="事务传播行为的选择"></a>事务传播行为的选择</h5><p><strong>REQUIRED</strong>：大多数情况下使用的默认传播行为，适用于大多数需要事务管理的方法。</p><p><strong>REQUIRES_NEW</strong>：适用于需要独立事务的情况，例如记录日志、审计等操作，即使外层事务回滚，这些操作也应该提交。</p><p><strong>SUPPORTS</strong>：适用于可选事务的情况，例如读取操作，可以在事务内或事务外执行。</p><p><strong>NOT_SUPPORTED</strong>：适用于不需要事务的情况，例如调用外部服务。</p><p><strong>MANDATORY</strong>：适用于必须在事务内执行的方法，例如严格依赖事务上下文的操作。</p><p><strong>NEVER</strong>：适用于必须在非事务上下文中执行的方法。</p><p><strong>NESTED</strong>：适用于需要嵌套事务的情况，例如需要在一个事务内执行多个子事务，并且可以单独回滚子事务。</p></blockquote><h2 id="Spring事务中的隔离级别有哪几种"><a href="#Spring事务中的隔离级别有哪几种" class="headerlink" title="Spring事务中的隔离级别有哪几种"></a>Spring事务中的隔离级别有哪几种</h2><blockquote><p>Spring 提供了以下几种隔离级别，通过@Transactional注解的isolation属性来配置：</p><h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><p><strong>DEFAULT</strong>：使用底层数据库的默认隔离级别。通常情况下，这个默认值是READ_COMMITTED。</p><p><strong>READ_UNCOMMITTED（读未提交）</strong>：允许一个事务读取另一个事务尚未提交的数据。可能会导致脏读（Dirty Read）、不可重复读（Non-repeatable Read）和幻读（Phantom Read）问题。</p><p><strong>READ_COMMITTED（读已提交）</strong>：保证一个事务只能读取另一个事务已经提交的数据。可以防止脏读，但可能会导致不可重复读和幻读问题。</p><p><strong>REPEATABLE_READ（可重复读）</strong>：保证一个事务在读取数据时不会看到其他事务对该数据的修改。可以防止脏读和不可重复读，但可能会导致幻读问题。</p><p><strong>SERIALIZABLE（串行化）</strong>：最高的隔离级别。保证事务按顺序执行，完全隔离。可以防止脏读、不可重复读和幻读问题，但并发性最低，可能导致性能下降。</p><h5 id="隔离级别的选择"><a href="#隔离级别的选择" class="headerlink" title="隔离级别的选择"></a>隔离级别的选择</h5><p><strong>READ_UNCOMMITTED</strong>：适用于对数据一致性要求不高，且需要最高并发性的场景。</p><p><strong>READ_COMMITTED</strong>：适用于大多数应用，能够防止脏读，提供较好的并发性和数据一致性平衡。</p><p><strong>REPEATABLE_READ</strong>：适用于需要防止脏读和不可重复读，但可以容忍幻读的场景。</p><p><strong>SERIALIZABLE</strong>：适用于对数据一致性要求极高的场景，尽管会牺牲并发性。</p></blockquote><h2 id="Spring中用到了哪些设计模式"><a href="#Spring中用到了哪些设计模式" class="headerlink" title="Spring中用到了哪些设计模式"></a>Spring中用到了哪些设计模式</h2><blockquote><h5 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h5><p>Spring 使用工厂模式来创建对象实例。BeanFactory和ApplicationContext是 Spring 框架中实现工厂模式的核心接口。</p><p><strong>应用场景</strong>：Spring 容器负责创建和管理 bean 的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">&gt;<span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> (MyBean) context.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h5><p>Spring 默认以单例模式管理 bean，这意味着每个 bean 在 Spring 容器中只有一个实例。</p><p><strong>应用场景</strong>：默认情况下，Spring 容器中的每个 bean 都是单例的。</p><h5 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h5><p>Spring AOP（面向切面编程）使用代理模式来创建代理对象，以实现方法拦截和增强功能。</p><p><strong>应用场景</strong>：AOP 实现事务管理、日志记录、安全检查等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Aspect</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">   <span class="meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBeforeMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Executing method: &quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="模板方法模式（Template-Method-Pattern）"><a href="#模板方法模式（Template-Method-Pattern）" class="headerlink" title="模板方法模式（Template Method Pattern）"></a>模板方法模式（Template Method Pattern）</h5><p>Spring 提供了多种模板类（如JdbcTemplate、RestTemplate），这些类封装了常见的操作步骤，允许用户只需实现特定的步骤。</p><p><strong>应用场景</strong>：简化数据库操作、RESTful 服务调用等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Autowired</span></span><br><span class="line">&gt;<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO my_table (data) VALUES (?)&quot;</span>;</span><br><span class="line">   jdbcTemplate.update(sql, data);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h5><p>Spring 的事件处理机制使用观察者模式。ApplicationEventPublisher和ApplicationListener是实现观察者模式的核心接口。</p><p><strong>应用场景</strong>：实现事件驱动的编程模型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(source);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt; &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Received event: &quot;</span> + event.getSource());</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEventPublisher</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">MyEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>);</span><br><span class="line">       applicationEventPublisher.publishEvent(event);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="依赖注入模式（Dependency-Injection-Pattern）"><a href="#依赖注入模式（Dependency-Injection-Pattern）" class="headerlink" title="依赖注入模式（Dependency Injection Pattern）"></a>依赖注入模式（Dependency Injection Pattern）</h5><p>Spring 的核心功能之一就是依赖注入，通过构造函数注入、setter 注入或字段注入，将对象的依赖关系注入到对象中。</p><p><strong>应用场景</strong>：解耦对象之间的依赖关系，便于测试和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> MyRepository myRepository;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(MyRepository myRepository)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.myRepository = myRepository;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h5><p>Spring 使用装饰器模式来增强 bean 的功能，特别是在 AOP 中，通过将增强逻辑应用到目标对象上。</p><p><strong>应用场景</strong>：动态地为对象添加职责，而不影响其他对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Aspect</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceAspect</span> &#123;</span><br><span class="line">   <span class="meta">@Around(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">measureExecutionTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">       <span class="type">long</span> <span class="variable">executionTime</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">       System.out.println(<span class="string">&quot;Method executed in: &quot;</span> + executionTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h5 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h5><p>Spring 中的TransactionManager使用策略模式来定义事务管理的策略，允许在运行时选择不同的事务管理器。</p><p><strong>应用场景</strong>：定义一系列算法，允许在运行时选择具体的算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Configuration</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource());</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Spring事务失效场景"><a href="#Spring事务失效场景" class="headerlink" title="Spring事务失效场景"></a>Spring事务失效场景</h2><blockquote><h5 id="非public方法使用-Transactional"><a href="#非public方法使用-Transactional" class="headerlink" title="非public方法使用@Transactional"></a>非public方法使用@Transactional</h5><p>场景描述：Spring事务管理是基于AOP实现的，而AOP对于JDK动态代理或CGLib动态代理只会代理public方法。如果事务方法的访问修饰符为非public，SpringAOP无法正确地代理该方法，从而导致事务失效。</p><p>示例代码：事务方法的访问修饰符被设置为private、default或protected。</p><p>解决方案：将需要事务管理的方法设置为public。</p><h5 id="在同类中的非事务方法调用事务方法（常见）"><a href="#在同类中的非事务方法调用事务方法（常见）" class="headerlink" title="在同类中的非事务方法调用事务方法（常见）"></a>在同类中的非事务方法调用事务方法（常见）</h5><p>场景描述：Spring的事务管理是通过动态代理实现的，只有通过代理对象调用的方法才能享受到Spring的事务管理。<code>如果在同一个类中，一个没有标记为@Transactional的方法内部调用了一个标记为@Transactional的方法，那么事务是不会起作用的。</code></p><p>解决方案：尽量将事务方法放在不同的类中，或者使用Spring的AopContext.currentProxy()来获取当前类的代理对象，然后通过代理对象调用事务方法。</p><h5 id="事务属性设置不当"><a href="#事务属性设置不当" class="headerlink" title="事务属性设置不当"></a>事务属性设置不当</h5><p>场景描述：在Spring的事务管理中，如果在一个支持当前事务的方法（比如，已经被标记为@Transactional的方法）中调用了一个需要新事务的方法，如果后者方法抛出了异常，但异常并未被Spring识别为需要回滚事务的异常，那么后者的事务将不会回滚。</p><h5 id="异常类型不匹配"><a href="#异常类型不匹配" class="headerlink" title="异常类型不匹配"></a>异常类型不匹配</h5><p>场景描述：默认情况下，Spring只有在方法抛出运行时异常或者错误时才会回滚事务。对于检查性异常，即使你在方法中抛出了，Spring也不会回滚事务，除非你在@Transactional注解中显式地指定需要回滚哪些检查性异常。</p><p>解决方案：了解Spring事务管理对异常的处理，必要时在@Transactional注解中指定需要回滚的异常类型。</p><h5 id="事务拦截器配置错误"><a href="#事务拦截器配置错误" class="headerlink" title="事务拦截器配置错误"></a>事务拦截器配置错误</h5><p>场景描述：如果没有正确地配置事务拦截器，例如没有指定切入点或指定了错误的切入点，就会导致Spring事务失效。</p><h5 id="事务超时配置错误"><a href="#事务超时配置错误" class="headerlink" title="事务超时配置错误"></a>事务超时配置错误</h5><p>场景描述：如果事务超时时间设置得太短，就有可能在事务执行过程中出现超时，从而导致Spring事务失效。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM面试题</title>
      <link href="/posts/66c016fb.html"/>
      <url>/posts/66c016fb.html</url>
      
        <content type="html"><![CDATA[<p>⚫ 熟悉JVM相关知识，如JVM组成，垃圾回收，双亲委派机制，类加载机制和过程等；</p><h2 id="垃圾回收过程"><a href="#垃圾回收过程" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h2>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法模板</title>
      <link href="/posts/b7e144d1.html"/>
      <url>/posts/b7e144d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>; </span><br><span class="line">    <span class="built_in">swap</span>(a[i],a[l+<span class="built_in">rand</span>()%(r-l+<span class="number">1</span>)]); </span><br><span class="line">    <span class="type">int</span> x = a[l]; </span><br><span class="line">    <span class="type">int</span> i = l,j = r; </span><br><span class="line">    <span class="keyword">while</span> (i&lt;j) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">while</span> (i&lt;j&amp;&amp;a[j]&gt;x) </span><br><span class="line">            j--; </span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) a[i++] = a[j]; </span><br><span class="line">        <span class="keyword">while</span> (i&lt;j&amp;&amp;a[i]&lt;x) </span><br><span class="line">            i++; </span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) a[j--] = a[i];        </span><br><span class="line">    &#125; </span><br><span class="line">    a[i] = x; </span><br><span class="line">    <span class="built_in">quicksort</span>(l,i<span class="number">-1</span>); </span><br><span class="line">    <span class="built_in">quicksort</span>(i+<span class="number">1</span>,r); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>; </span><br><span class="line">    <span class="type">int</span> m = (l+r)/<span class="number">2</span>; </span><br><span class="line">    <span class="built_in">mergesort</span>(l,m); </span><br><span class="line">    <span class="built_in">mergesort</span>(m+<span class="number">1</span>,r); </span><br><span class="line">    <span class="type">int</span> p1 = l,p2 = m+<span class="number">1</span>,tot = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span> (p1&lt;=m&amp;&amp;p2&lt;=r) </span><br><span class="line">        <span class="keyword">if</span>(a[p1]&lt;=a[p2]) </span><br><span class="line">            c[++tot] = a[p1++]; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            c[++tot] = a[p2++]; </span><br><span class="line">    <span class="keyword">while</span> (p1&lt;=m) </span><br><span class="line">        c[++tot] = a[p1++]; </span><br><span class="line">    <span class="keyword">while</span> (p2&lt;=r) </span><br><span class="line">        c[++tot] = a[p2++];         </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) </span><br><span class="line">        a[i+l<span class="number">-1</span>] = c[i];     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><img src="/posts/b7e144d1/image-20250418215334448.png" alt="image-20250418215334448"></p><h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><blockquote><p>预处理:s[i]=a[i]+a[i-1] </p><p>求区间[l,r]:sum=s[r]-s[l-1] </p><p>“前缀和数组”和”原数组”可以合二为一</p></blockquote><h2 id="二位前缀和"><a href="#二位前缀和" class="headerlink" title="二位前缀和"></a>二位前缀和</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;计算矩阵的前缀和：s[x][y] = s[x - 1][y] + s[x][y -1] - s[x-1][y-1] + a[x][y] </span><br><span class="line"></span><br><span class="line">&gt;以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line"></span><br><span class="line">计算子矩阵的和：s = s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 -1]</span><br></pre></td></tr></table></figure></blockquote><h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><blockquote><p>差分是前缀和的逆运算，对于一个数组a，其差分数组b的每一项都是a [ i ]和前一项a [ i − 1 ]的差。 </p><p>注意：差分数组和原数组必须分开存放！！！！ </p><p>给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c</p></blockquote><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><blockquote><p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c： </p><p>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</p></blockquote><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><blockquote><p>离散化的本质是建立了一段数列到自然数之间的映射关系（value -&gt; index)，通过建立新索引，来缩小 目标区间，使得可以进行一系列连续数组可以进行的操作比如二分，前缀和等</p><p>离散化首先需要排序去重： </p><ol><li>排序：sort(alls.begin(),alls.end()) </li><li><ol><li>去重：alls.earse(unique(alls.begin(),alls.end()),alls.end());</li></ol></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">segs = res;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line"><span class="comment">//求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断s中是否包含p，f表示匹配到p的第几位 o(n+m) </span></span><br><span class="line"><span class="type">int</span> n,m; </span><br><span class="line"><span class="type">int</span> nxt[M+<span class="number">1</span>],f[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">char</span> s[N+<span class="number">2</span>],p[M+<span class="number">2</span>];<span class="comment">//s 主串 p 模式串 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    n = <span class="built_in">strlen</span>(s+<span class="number">1</span>); </span><br><span class="line">    m = <span class="built_in">strlen</span>(p+<span class="number">1</span>); </span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; </span><br><span class="line">    nxt[<span class="number">1</span>] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;p[j+<span class="number">1</span>]!=p[i]) </span><br><span class="line">            j = nxt[j]; </span><br><span class="line">        <span class="keyword">if</span>(p[j+<span class="number">1</span>]==p[i]) </span><br><span class="line">            j++; </span><br><span class="line">        nxt[i] = j; </span><br><span class="line">    &#125; </span><br><span class="line">    j = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">while</span> ((j==m)||(j&gt;<span class="number">0</span>&amp;&amp;p[j+<span class="number">1</span>]!=s[i])) </span><br><span class="line">            j = nxt[j]; </span><br><span class="line">        <span class="keyword">if</span>(p[j+<span class="number">1</span>]==s[i]) </span><br><span class="line">            j++; </span><br><span class="line">        f[i] = j;                 </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="EXKMP"><a href="#EXKMP" class="headerlink" title="EXKMP"></a>EXKMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求出s跟它的任意后缀的最长公共前缀的长度 </span></span><br><span class="line"><span class="type">int</span> n; </span><br><span class="line"><span class="type">int</span> z[N+<span class="number">1</span>];<span class="comment">//z[i]表示s和s[i]-s[n]的最长公共前缀的长度 </span></span><br><span class="line"><span class="type">char</span> s[N+<span class="number">2</span>]; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exkmp</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    n = <span class="built_in">strlen</span>(s+<span class="number">1</span>); </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = <span class="number">0</span>; </span><br><span class="line">    z[<span class="number">1</span>] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(i&gt;r) z[i] = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">else</span> z[i] = <span class="built_in">min</span>(z[i-l+<span class="number">1</span>],r-i+<span class="number">1</span>); </span><br><span class="line">        <span class="keyword">while</span> (i+z[i]&lt;=n&amp;&amp;s[z[i]+<span class="number">1</span>]==s[i+z[i]]) </span><br><span class="line">            z[i]++; </span><br><span class="line">        <span class="keyword">if</span>(i+z[i]<span class="number">-1</span>&gt;R) </span><br><span class="line">            l = i,r = i+z[i]<span class="number">-1</span>;         </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="最长回文字串"><a href="#最长回文字串" class="headerlink" title="最长回文字串"></a>最长回文字串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//o(n) </span></span><br><span class="line"><span class="type">int</span> n,p[<span class="number">2</span>*N+<span class="number">2</span>]; </span><br><span class="line"><span class="type">char</span> s[N+<span class="number">2</span>],t[<span class="number">2</span>*N+<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span></span>&#123; </span><br><span class="line">    n = <span class="built_in">strlen</span>(s+<span class="number">1</span>); </span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>; </span><br><span class="line">    t[++m] = <span class="string">&#x27;$&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        t[++m] = s[i],t[++m] = <span class="string">&#x27;$&#x27;</span>; </span><br><span class="line">    <span class="type">int</span> M = <span class="number">0</span>,R = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(i&gt;R) p[i] = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="built_in">min</span>(p[<span class="number">2</span>*M-i],R-i+<span class="number">1</span>); </span><br><span class="line">        <span class="keyword">while</span> (i-p[i]&gt;<span class="number">0</span>&amp;&amp;i+p[i]&lt;=m&amp;&amp;t[i-p[i]]==t[i+p[i]]) </span><br><span class="line">            ++p[i]; </span><br><span class="line">        <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;R)  </span><br><span class="line">            M = i,R = i+p[i]<span class="number">-1</span>;                 </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) </span><br><span class="line">        ans = <span class="built_in">max</span>(ans,p[i]); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans<span class="number">-1</span>);    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h2><blockquote><p>Trie 树是一种多叉树的结构，每个节点保存一个字符，一条路径表示一个字符串。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"><span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"><span class="type">int</span> p[N], size[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"><span class="type">int</span> p[N], d[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    d[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">核心思想：将字符串看成P进制数，P的经验值是<span class="number">131</span>或<span class="number">13331</span>，取这两个值的冲突概率低</span><br><span class="line">    小技巧：取模的数用<span class="number">2</span>^<span class="number">64</span>，这样直接用<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>存储，溢出的结果就是取模的结果</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><blockquote><p>一个有向图，如果图中有入度为 0 的点，就把这个点删掉，同时也删掉这个点所连的边</p><p>一直进行上面出处理，如果所有点都能被删掉，则这个图可以进行拓扑排序</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,q[N+<span class="number">1</span>],d[N+<span class="number">1</span>];<span class="comment">//d 记录了每个点一开始的入度 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">TopoSort</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> front = <span class="number">1</span>,rear = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">        <span class="keyword">if</span> (!d[i]) q[++rear] = i; </span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="type">int</span> x = q[front]; </span><br><span class="line">        ++front; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : edge[x]) </span><br><span class="line">            <span class="keyword">if</span> (--d[y] == <span class="number">0</span>) q[++rear] = y; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (rear == n) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>); </span><br><span class="line">        <span class="comment">//q 中记录啦一个合法的拓扑序列 </span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><blockquote><p>朴素版</p><p>时间复杂是O(n^2+m)，n表示点数，m表示边数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> y, v; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _y, <span class="type">int</span> _v) </span><br><span class="line">    &#123; </span><br><span class="line">        y = _y; </span><br><span class="line">        v = _v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">vector&lt;Node&gt; edge[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,dist[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">bool</span> b[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="literal">false</span>, <span class="built_in">sizeof</span>(b)); </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">127</span>, <span class="built_in">sizeof</span>(dist)); </span><br><span class="line">    dist[s] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> ( ; ; ) &#123; </span><br><span class="line">        <span class="type">int</span> x = <span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            <span class="keyword">if</span> (!b[i]&amp;&amp;dist[i] &lt; <span class="number">1</span> &lt;&lt; <span class="number">30</span>)  </span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">-1</span> || dist[i] &lt; dist[x])  </span><br><span class="line">                    x = i; </span><br><span class="line">        <span class="keyword">if</span>(x == t || x == <span class="number">-1</span>) <span class="keyword">break</span>; </span><br><span class="line">        b[x] = <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x])  </span><br><span class="line">            dist[i.y] = <span class="built_in">min</span>(dist[i.y], dist[x] + i.v); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> dist[t]; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>堆优化版</p><p>时间复杂度O(mlogn)，n表示点数，m表示边数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> y, v; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _y, <span class="type">int</span> _v) </span><br><span class="line">    &#123; </span><br><span class="line">        y = _y; </span><br><span class="line">        v = _v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; q; </span><br><span class="line">vector&lt;Node&gt; edge[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,dist[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">127</span>, <span class="built_in">sizeof</span>(dist)); </span><br><span class="line">    dist[s] = <span class="number">0</span>;q.<span class="built_in">clear</span>(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        q.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(dist[i],i)); </span><br><span class="line">    <span class="keyword">for</span> ( ; !q.<span class="built_in">empty</span>(); ) &#123; </span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">begin</span>()-&gt;second; </span><br><span class="line">        q.<span class="built_in">erase</span>(q.<span class="built_in">begin</span>()); </span><br><span class="line">        <span class="keyword">if</span> (x == t || dist[x] &gt; <span class="number">1</span>&lt;&lt;<span class="number">30</span>) <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x]) &#123; </span><br><span class="line">            <span class="keyword">if</span> (dist[x] + i.v &lt; dist[i.y]) &#123; </span><br><span class="line">                q.<span class="built_in">erase</span>(<span class="built_in">make_pair</span>(dist[i.y], i.y)); </span><br><span class="line">                dist[i.y] = dist[x] + i.v; </span><br><span class="line">                q.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(dist[i.y], i.y)); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> dist[t]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"> <span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);<span class="comment">//距离初始化为无穷大</span></span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//1-&gt;1的节点距离为0</span></span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;<span class="comment">//小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);<span class="comment">//插入距离和节点编号</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=heap.<span class="built_in">top</span>();<span class="comment">//取距离源点最近的点</span></span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ver=t.second,distance=t.first;<span class="comment">//ver：节点编号，distance源点距离ver</span></span><br><span class="line">        <span class="keyword">if</span>(st[ver])<span class="keyword">continue</span>;<span class="comment">//如果距离已经确定，则跳过该点</span></span><br><span class="line">        st[ver]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[ver];i!=<span class="number">-1</span>;i=ne[i])<span class="comment">//更新ver所指向的节点距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j]&gt;dist[ver]+w[i])&#123;</span><br><span class="line">                dist[j]=dist[ver]+w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j],j&#125;);<span class="comment">//距离变小，则入堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Bellman-Ford最短路"><a href="#Bellman-Ford最短路" class="headerlink" title="Bellman-Ford最短路"></a>Bellman-Ford最短路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123; </span><br><span class="line">    <span class="type">int</span> x,y,v; </span><br><span class="line">&#125;edge[M+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,dist[N+<span class="number">1</span>],pre[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shortestpath</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">127</span>, <span class="built_in">sizeof</span>(dist)); </span><br><span class="line">    dist[s] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>( ; ; ) &#123; </span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123; </span><br><span class="line">            <span class="type">int</span> x = edge[i].x, y = edge[i].y, v = edge[i].v; </span><br><span class="line">            <span class="keyword">if</span>(dist[x] &lt; <span class="number">1</span> &lt;&lt;<span class="number">30</span>) &#123; </span><br><span class="line">                <span class="keyword">if</span> (dist[x] + v &lt; dist[y]) &#123; </span><br><span class="line">                    dist[y] = dist[x] + v; </span><br><span class="line">                    pre[y] = x; </span><br><span class="line">                    ok = <span class="literal">true</span>; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> dist[t]; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Floyd-最短路"><a href="#Floyd-最短路" class="headerlink" title="Floyd 最短路"></a>Floyd 最短路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><blockquote><p>时间复杂度是 O(n^2+m)，n表示点数，m表示边数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> g[N][N];        </span><br><span class="line"><span class="type">int</span> dist[N];        </span><br><span class="line"><span class="type">bool</span> st[N];     </span><br><span class="line"><span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">st[t] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//朴素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> y, v; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _y, <span class="type">int</span> _v) </span><br><span class="line">    &#123; </span><br><span class="line">        y = _y; </span><br><span class="line">        v = _v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">vector&lt;Node&gt; edge[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,dist[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">bool</span> b[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Prim</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="literal">false</span>, <span class="built_in">sizeof</span>(b)); </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">127</span>, <span class="built_in">sizeof</span>(dist)); </span><br><span class="line">    dist[s] = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, tot = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> ( ; ; ) &#123; </span><br><span class="line">        <span class="type">int</span> x = <span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            <span class="keyword">if</span> (!b[i]&amp;&amp;dist[i] &lt; <span class="number">1</span> &lt;&lt; <span class="number">30</span>)  </span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">-1</span> || dist[i] &lt; dist[x])  </span><br><span class="line">                    x = i; </span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">break</span>; </span><br><span class="line">        ++tot; </span><br><span class="line">        ans += dist[x]; </span><br><span class="line">        b[x] = <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x])  </span><br><span class="line">            dist[i.y] = <span class="built_in">min</span>(dist[i.y], i.v); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (tot != n) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">return</span> ans; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆优化</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> y, v; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _y, <span class="type">int</span> _v) </span><br><span class="line">    &#123; </span><br><span class="line">        y = _y; </span><br><span class="line">        v = _v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; q; </span><br><span class="line">vector&lt;Node&gt; edge[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> n,m,dist[N+<span class="number">1</span>]; </span><br><span class="line"><span class="type">bool</span> b[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Prim</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="literal">false</span>, <span class="built_in">sizeof</span>(b)); </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">127</span>, <span class="built_in">sizeof</span>(dist)); </span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;q.<span class="built_in">clear</span>(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        q.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(dist[i],i)); </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, tot = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> ( ; !q.<span class="built_in">empty</span>(); ) &#123; </span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">begin</span>()-&gt;second; </span><br><span class="line">        q.<span class="built_in">erase</span>(q.<span class="built_in">begin</span>()); </span><br><span class="line">        <span class="keyword">if</span> (dist[x] &gt; <span class="number">1</span>&lt;&lt;<span class="number">30</span>) <span class="keyword">break</span>; </span><br><span class="line">        ++tot; </span><br><span class="line">        ans += dist[x]; </span><br><span class="line">        b[x] = <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x]) &#123; </span><br><span class="line">            <span class="keyword">if</span> (!b[i.y] &amp;&amp; i.v &lt; dist[i.y]) &#123; </span><br><span class="line">                q.<span class="built_in">erase</span>(<span class="built_in">make_pair</span>(dist[i.y], i.y)); </span><br><span class="line">                dist[i.y] = i.v; </span><br><span class="line">                q.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(dist[i.y], i.y)); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (tot != n) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">return</span> ans; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> x, y, v; </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;A) <span class="type">const</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> v &lt; A.v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;a[M+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,fa[N+<span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findset</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (i == fa[i]) <span class="keyword">return</span> i; </span><br><span class="line">    <span class="keyword">return</span> fa[i] == <span class="built_in">findset</span>(fa[i]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Kruskal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        fa[i] = i; </span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>); </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = n; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123; </span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">findset</span>(a[i].x), y = <span class="built_in">findset</span>(a[i].y); </span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123; </span><br><span class="line">            fa[x] = y; </span><br><span class="line">            ans += a[i].v; </span><br><span class="line">            --cnt; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">1</span>) <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (cnt != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><blockquote><p>树状数组（O(logn)  单点加   查询前缀和 ） </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N]; </span><br><span class="line">ll c[N]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//下标不能为0 要不死循环 </span></span><br><span class="line"><span class="comment">//c[i] = a[i-lowbit(i)+1] ~ a[i] 的和 </span></span><br><span class="line"><span class="comment">//lowbit(i) ==&gt; x&amp;(-x)</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="comment">// 1...x 的和 </span></span><br><span class="line">    ll s = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (; x; x -= x&amp;(-x)) </span><br><span class="line">        s+= c[x]; </span><br><span class="line">    <span class="keyword">return</span> s;     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,ll s)</span></span>&#123; <span class="comment">// a[x] += s </span></span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += x&amp;(-x)) </span><br><span class="line">        c[x] += s; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><blockquote><p>（单点修改 区间查询） </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以查询区间最小值为例 </span></span><br><span class="line"><span class="type">int</span> a[N]; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123; </span><br><span class="line">    <span class="type">int</span> minv; </span><br><span class="line">&#125;seg[N*<span class="number">4</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; </span><br><span class="line">    seg[id].minv = <span class="built_in">min</span>(seg[id*<span class="number">2</span>].minv,seg[id*<span class="number">2</span>+<span class="number">1</span>].minv); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// [l,r] </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">        seg[id].minv = a[l]; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="type">int</span> mid = (l+r)/<span class="number">2</span>; </span><br><span class="line">        <span class="built_in">build</span>(id*<span class="number">2</span>,l,mid); </span><br><span class="line">        <span class="built_in">build</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r); </span><br><span class="line">        <span class="built_in">update</span>(id); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//节点为id,对应的区间为[l,r],修改a[pos] -&gt; val </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> val)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">        seg[id].minv = val; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="type">int</span> mid = (l+r)/<span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">change</span>(id*<span class="number">2</span>,l,mid,pos,val); </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">change</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,val); </span><br><span class="line">        <span class="built_in">update</span>(id); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//[ql,qr] 表示要查询的区间 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l, <span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l == ql &amp;&amp; r == qr) <span class="keyword">return</span> seg[id].minv; </span><br><span class="line">    <span class="type">int</span> mid = (l + r)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,qr); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr); </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">            <span class="built_in">min</span>(<span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,mid),<span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr)) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（区间修改 区间查询） 懒标记 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以 </span></span><br><span class="line"><span class="comment">//1.将某区间每一个数加上k </span></span><br><span class="line"><span class="comment">//2.求出某区间每一个数的和。 </span></span><br><span class="line"><span class="comment">//为例 </span></span><br><span class="line"><span class="type">int</span> a[N]; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123; </span><br><span class="line">    ll t,val,sz; </span><br><span class="line">&#125;seg[N*<span class="number">4</span>]; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setting</span><span class="params">(<span class="type">int</span> id,ll t)</span> </span>&#123; <span class="comment">//给节点加标记 </span></span><br><span class="line">    seg[id].val = seg[id].val + t*seg[id].sz; </span><br><span class="line">    seg[id].t = seg[id].t + t; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; <span class="comment">// 标记下沉 </span></span><br><span class="line">    <span class="keyword">if</span>(seg[id].t != <span class="number">0</span>) &#123; <span class="comment">// 标记非空 </span></span><br><span class="line">        <span class="built_in">setting</span>(id *<span class="number">2</span>,seg[id].t); </span><br><span class="line">        <span class="built_in">setting</span>(id *<span class="number">2</span>+<span class="number">1</span>,seg[id].t); </span><br><span class="line">        seg[id].t = <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; </span><br><span class="line">    seg[id].sz = seg[id*<span class="number">2</span>].sz+seg[id*<span class="number">2</span>+<span class="number">1</span>].sz; </span><br><span class="line">    seg[id].val = seg[id*<span class="number">2</span>].val+seg[id*<span class="number">2</span>+<span class="number">1</span>].val; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// [l,r] </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">        seg[id].val = a[l]; </span><br><span class="line">        seg[id].sz = <span class="number">1</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="type">int</span> mid = (l+r)/<span class="number">2</span>; </span><br><span class="line">        <span class="built_in">build</span>(id*<span class="number">2</span>,l,mid); </span><br><span class="line">        <span class="built_in">build</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r); </span><br><span class="line">        <span class="built_in">update</span>(id); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//节点为id,对应的区间为[l,r],给区间[ql,qr]加上t </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr,ll t)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l == ql &amp;&amp; r == qr) &#123; </span><br><span class="line">        <span class="built_in">setting</span>(id,t); </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">int</span> mid = (l + r)/<span class="number">2</span>; </span><br><span class="line">    <span class="built_in">pushdown</span>(id); </span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) <span class="built_in">modify</span>(id*<span class="number">2</span>,l,mid,ql,qr,t); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql&gt;mid) <span class="built_in">modify</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr,t); </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">modify</span>(id*<span class="number">2</span>,l,mid,ql,mid,t); </span><br><span class="line">        <span class="built_in">modify</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr,t); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">update</span>(id); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//[ql,qr] 表示要查询的区间 </span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l, <span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l == ql &amp;&amp; r == qr) <span class="keyword">return</span> seg[id].val; </span><br><span class="line">    <span class="type">int</span> mid = (l + r)/<span class="number">2</span>; </span><br><span class="line">    <span class="built_in">pushdown</span>(id); </span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,qr); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr); </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">            <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,mid)+<span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><blockquote><p>ST表（求 RMQ问题即区间最值 以及区间&amp; | 等重复 运算不会改变值）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n个数 a1 - an q个询问 每次给出l，r  问al-ar之间的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,q,A,B,C; </span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>],a[N];<span class="comment">//f[i][j]：从i开始长度为2的j次的区间最大值 </span></span><br><span class="line"><span class="comment">//让小的维度在第一维可以更快 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p&gt;&gt;A&gt;&gt;B&gt;&gt;C; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        cin&gt;&gt;a[i]; </span><br><span class="line">        f[i][<span class="number">0</span>] = a[i]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; j++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j) &lt;= n; i++) </span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="type">int</span> l,r; </span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r; </span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r); </span><br><span class="line">        <span class="type">int</span> len = __lg(r-l+<span class="number">1</span>); </span><br><span class="line">        ans ^= <span class="built_in">max</span>(f[l][len],f[r-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]); </span><br><span class="line">    &#125; </span><br><span class="line">    cout&lt;&lt;ans; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA（最近公共祖先）"><a href="#LCA（最近公共祖先）" class="headerlink" title="LCA（最近公共祖先）"></a>LCA（最近公共祖先）</h2><blockquote><p>倍增o((n+m)logn) </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span>+<span class="number">10</span>; </span><br><span class="line"><span class="type">int</span> n,m,s,a,b; </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N]; </span><br><span class="line"><span class="type">int</span> dep[N],fa[N][<span class="number">20</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    dep[u] = dep[father]+<span class="number">1</span>; </span><br><span class="line">    <span class="comment">//向上跳1,2,4...步的祖先节点 </span></span><br><span class="line">    fa[u][<span class="number">0</span>] = father; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) </span><br><span class="line">        fa[u][i] = fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v:e[u]) </span><br><span class="line">        <span class="keyword">if</span>(v!=father) <span class="built_in">dfs</span>(v,u); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v); </span><br><span class="line">    <span class="comment">//先跳到同一层 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        <span class="keyword">if</span>(dep[fa[u][i]]&gt;=dep[v])  </span><br><span class="line">            u = fa[u][i]; </span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> v; </span><br><span class="line">    <span class="comment">//再跳到lca的下一层 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i]) </span><br><span class="line">            u=fa[u][i],v=fa[v][i]; </span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>]; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>Tarjan(离线)o(n+m)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; e[N]; </span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; query[N]; </span><br><span class="line"><span class="type">int</span> vis[N],fa[N],ans[M]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(u==fa[u]) <span class="keyword">return</span> u; </span><br><span class="line">    <span class="keyword">return</span> fa[u] = <span class="built_in">find</span>(fa[u]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    vis[u] = <span class="literal">true</span>;<span class="comment">//刚到u时 标记u </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v:e[u]) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123; </span><br><span class="line">            <span class="built_in">tarjan</span>(v); </span><br><span class="line">            fa[v] = u;<span class="comment">//回到u时 v指向u </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//离开u时 枚举lca </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q:query[u]) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="type">int</span> v = q.first,i = q.second; </span><br><span class="line">        <span class="keyword">if</span>(vis[v]) ans[i]=<span class="built_in">find</span>(v); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) </span><br><span class="line">&#123; </span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b; </span><br><span class="line">    e[a].<span class="built_in">push_back</span>(b); </span><br><span class="line">    e[b].<span class="built_in">push_back</span>(a); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) </span><br><span class="line">&#123; </span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b; </span><br><span class="line">    query[a].<span class="built_in">push_back</span>(&#123;b,i&#125;); </span><br><span class="line">    query[b].<span class="built_in">push_back</span>(&#123;a,i&#125;); </span><br><span class="line">&#125;     </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) </span><br><span class="line">    fa[i]=i; </span><br></pre></td></tr></table></figure><blockquote><p>树链剖分</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m; </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N]; </span><br><span class="line"><span class="type">int</span> dep[N],fa[N],son[N],sz[N];<span class="comment">//sz[u] 存以u为根的子树的节点数 </span></span><br><span class="line"><span class="type">int</span> top[N];<span class="comment">//存u所在重链的顶点 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    fa[u]=father,dep[u]=dep[father]+<span class="number">1</span>,sz[u]=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v:e[u]) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">        <span class="built_in">dfs1</span>(v,u); </span><br><span class="line">        sz[u]+=sz[v]; </span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    top[u] = t;<span class="comment">//记录链头 </span></span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;<span class="comment">//无重儿子返回 </span></span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],t);<span class="comment">//搜重儿子 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v:e[u]) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>; </span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);<span class="comment">//搜轻儿子 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">while</span> (top[u]!=top[v]) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v); </span><br><span class="line">        u=fa[top[u]]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> dep[u]&lt;dep[v]?u:v; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql面试题</title>
      <link href="/posts/54e1373e.html"/>
      <url>/posts/54e1373e.html</url>
      
        <content type="html"><![CDATA[<p>⚫ 熟悉Mysql底层存储结构，索引，事务，mvcc工作原理，学习过sql调优及分库分表优化；</p><h1 id="事务的四大特性和隔离级别"><a href="#事务的四大特性和隔离级别" class="headerlink" title="事务的四大特性和隔离级别"></a>事务的四大特性和隔离级别</h1><blockquote><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性确保事务中的所有操作<strong>要么全部完成，要么全部不完成</strong>。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。事务是一个不可分割的最小工作单元。</p><p><strong>例子</strong>：假设有一个银行转账操作，事务包括从账户A中扣钱和向账户B中加钱。如果任何一个操作失败，整个事务都会回滚，账户A和账户B的余额不会发生变化。</p><h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>一致性确保事务在完成后，数据库<strong>从一个一致状态转换到另一个一致状态</strong>。事务开始前和结束后，数据库的完整性约束没有被破坏。</p><p><strong>例子</strong>：在银行转账操作中，一致性确保转账后总金额保持不变。如果账户A减少了100元，账户B就应该增加100元。</p><h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>隔离性确保<strong>并发执行的事务彼此隔离开来</strong>，避免相互干扰。不同的事务之间的操作是互不可见的，直到事务提交。</p><p><strong>例子</strong>：还是上面的银行转账操作，a 正在银行扣 100 块的时候，b 不能往里面加 100 块。</p><p><strong>隔离级别</strong>：</p><ol><li><strong>读未提交（Read Uncommitted）</strong>：<strong>一个事务可以读到另一个未提交事务的数据</strong>，可能导致脏读。</li></ol><p><strong>脏读</strong>：一个事务读取了另一个事务未提交的数据。<strong>如果该事务回滚，那么读到的数据将是无效的</strong>。</p><p>例如：张三的工资为5000,事务A中把他的工资改为8000,但事务A尚未提交。与此同时，事务B正在读取张三的工资，读取到张三的工资为8000。随后，事务A发生异常，而回滚了事务。张三的工资又回滚为5000。最后，事务B读取到的张三工资为8000的数据即为脏数据，事务B做了一次脏读。</p><ol><li><strong>读已提交（Read Committed）</strong>：<strong>一个事务只能读到已提交事务的数据</strong>，避免脏读,但可能会出现不可重复读。</li></ol><p><strong>不可重复读</strong>：一个事务在读取同一行数据时，可能<strong>因为另一个事务的提交而得到不同的结果</strong>。</p><p>例如：在事务A中，读取到张三的工资为5000，操作没有完成，事务还没提交。与此同时，事务B把张三的工资改为8000，并提交了事务。随后，在事务A中，再次读取张三的工资，此时工资变为8000。在一个事务中前后两次读取的结果并不致，导致了不可重复读。</p><ol><li><strong>可重复读（Repeatable Read）</strong>：<strong>一个事务在整个过程中看到的数据是一致的</strong>，避免不可重复读，但可能会出现幻读。</li></ol><p><strong>幻读</strong>：一个事务在读取某个范围内的行时，另一个事务在该范围内插入了新的行，导致前一个事务再次读取时发现了“幻影”行。</p><p>例如：目前工资为5000的员工有10人，事务A读取所有工资为5000的人数为10人。此时，事务B插入一条工资也为5000的记录。这是，事务A再次读取工资为5000的员工，记录为11人。此时产生了幻读。</p><p><strong>不可重复读</strong>的重点是<strong>修改</strong>：同样的条件，你读取过的数据，再次读取出来发现值不一样了。</p><p><strong>幻读</strong>的重点在于<strong>新增或者删除</strong>：同样的条件，第 1 次和第 2 次读出来的记录数不一样。</p><ol><li><strong>串行化（Serializable）</strong>：最高隔离级别，事务完全串行化执行，避免幻读，代价是并发性大大降低，事务可能会因为锁等待而阻塞。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>隔离级别</strong></th><th style="text-align:center"><strong>脏读</strong></th><th style="text-align:center"><strong>不可重复读</strong></th><th style="text-align:center"><strong>幻读</strong></th><th style="text-align:center"><strong>原理</strong></th></tr></thead><tbody><tr><td style="text-align:center">Read uncommitted (读未提交)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td><td style="text-align:center">直接读取数据，不处理并发问题</td></tr><tr><td style="text-align:center">Read committed (读已提交)</td><td style="text-align:center">×</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td><td style="text-align:center">读操作不加锁，写操作加排他锁</td></tr><tr><td style="text-align:center">Repeatable read (可重复读)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">存在</td><td style="text-align:center">MVCC实现，事务开始时创建ReadView，之后事务的其他查询都用这个ReadView</td></tr><tr><td style="text-align:center">Serializable (串行化)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">使用锁，读加共享锁，写加排他锁，串行执行</td></tr></tbody></table></div><h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>持久性确保<strong>事务一旦提交，其结果是永久性的</strong>，即使系统发生故障，数据也不会丢失。</p><p><strong>例子</strong>：在银行转账操作中，一旦事务提交，转账操作的结果（账户A和账户B的余额变化）将永久保存在数据库中，即使之后系统崩溃，数据也不会丢失。</p></blockquote><h1 id="MyISAM与InnoDB区别及选择"><a href="#MyISAM与InnoDB区别及选择" class="headerlink" title="MyISAM与InnoDB区别及选择"></a>MyISAM与InnoDB区别及选择</h1><blockquote><h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><p><strong>MyISAM</strong> 将<strong>数据</strong>存储在<strong>三个文件</strong>中（.frm文件存储表结构，.MYD文件存储数据，.MYI文件存储索引）；</p><p><strong>InnoDB</strong> 将<strong>数据和索引</strong>存储在<strong>表空间文件</strong>中，支持自动扩展和多表空间。（.frm文件存储表结构定义，.ibd存储数据和索引）</p><p>由于MyISAM的数据和索引是分开存储的，所以查询的时候，<strong>MyISAM</strong>的<strong>叶子节点</strong>存储的是数据所在的<strong>地址</strong>，而不是直接存储数据。</p><h3 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h3><p><strong>MyISAM</strong> <strong>不支持事务</strong>，无法进行回滚和提交操作</p><p><strong>InnoDB</strong> 支持事务，提供 ACID 特性（原子性、一致性、隔离性、持久性）。</p><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p><strong>MyISAM</strong> 使用<strong>表级锁</strong>，每次操作都会锁定整个表，适合读多写少的应用</p><p><strong>InnoDB</strong> 使用<strong>行级锁</strong>，每次操作只锁定相关的行，适合高并发和写操作频繁的应用。</p><h3 id="外键支持"><a href="#外键支持" class="headerlink" title="外键支持"></a>外键支持</h3><p><strong>MyISAM</strong> <strong>不支持外键</strong>，无法在表间建立引用完整性约束</p><p><strong>InnoDB</strong> 支持外键，可以在表间建立引用完整性约束，保证数据的一致性和完整性。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p><strong>MyISAM</strong> 原生<strong>支持全文索引</strong>，适合需要全文搜索的应用</p><p><strong>InnoDB</strong> 从 MySQL 5.6 开始支持全文索引，但性能和功能上仍不如 MyISAM。</p><h3 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h3><p><strong>MyISAM</strong> 存储空间效率较高，数据文件较小</p><p><strong>InnoDB</strong> 可能占用更多存储空间，特别是需要存储事务日志和外键约束信息。</p><h3 id="表的大小限制"><a href="#表的大小限制" class="headerlink" title="表的大小限制"></a>表的大小限制</h3><p><strong>MyISAM</strong> 受文件系统限制，单个表最大<strong>可达 256TB</strong>（取决于文件系统）</p><p><strong>InnoDB</strong> 最大<strong>表大小可达 64TB</strong>，适合处理大规模数据集。</p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>1、 需要事务支持必选InnoDB，不需要事务选择MyISAM</p><p>2、如果表的大部分操作都是查询，数据不大，并发不大，可以考虑选择MyISAM，但是一般还是选择 innodb，有写又有读则选择InnoDB</p><p>3、如果系统奔溃导致数据难以恢复，且成本高，选择 innodb</p></blockquote><h1 id="自适应hash索引"><a href="#自适应hash索引" class="headerlink" title="自适应hash索引"></a>自适应hash索引</h1><blockquote><p><strong>自适应哈希索引</strong>是InnoDB存储引擎的一项独特<strong>性能优化特性</strong>，旨在针对高频访问的热点数据提升查询效率。与传统的静态哈希索引不同，自适应哈希索引采纳了一种<strong>自动化、动态调整</strong>的机制：InnoDB<strong>自主监控查询模式及数据访问频次</strong>，据此智能决策哈希索引的创建与否，并能依据数据集变动及查询模式的演进灵活地调整索引结构，无需人工介入。<br>其运作<strong>原理</strong>如下：当InnoDB检测到特定索引键值频繁遭受等值查询操作，系统便会在内存中自发为这些热点键值生成哈希索引，以此来加速后续的等值查询响应时间。这一系列优化行为均在后台自动执行，无需用户的直接参与或配置。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>自动优化：自适应哈希索引会自己悄悄地建立和打理，你不需要专门去做什么或者管它。<br>性能提升：在找一些特定相同值的时候，这个自适应哈希索引能大大加快寻找速度，它的查找速度超级快，差不多是瞬间完成的（专业点说就是查询时间是<strong>O(1)</strong>）。<br>省资源：它还减少了去二级索引树那里找信息的次数，这样就节约了系统资源。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><strong>内存消耗</strong>： 自适应哈希索引完全在内存中构建，需要足够的内存资源。</p><p><strong>不可预测性</strong>：由于是基于运行时查询模式的，所以哈希索引的存在和组成是不可预测的。</p><p><strong>不适用于所有查询</strong>：自适应哈希索引主要<strong>优化等值查询</strong>，对于<strong>范围查询或排序操作没有帮助</strong>。</p><p><strong>hash自适应索引会占用innodb buffer pool；</strong></p><p>总的来说，自适应哈希索引是 InnoDB 存储引擎为了提高特定类型查询性能而自动构建的一种内存中的哈希索引结构。它可以根据查询模式和数据访问频率自动调整，以优化数据库的性能。</p></blockquote><h1 id="Mysql使用规范"><a href="#Mysql使用规范" class="headerlink" title="Mysql使用规范"></a>Mysql使用规范</h1><blockquote><h3 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h3><p><strong>范式化设计</strong>：根据业务需求，合理选择符合一定范式（如1NF、2NF、3NF或BCNF）进行表结构设计，减少数据冗余，保证数据的一致性。</p><p><strong>表命名规范</strong>：采用有意义的、区分大小写的表名，通常使用小写字母，并用下划线<code>_</code>分隔单词，如<code>user_info</code>。</p><p><strong>字段命名规范</strong>：同样遵循有意义的命名原则，使用小写字母加下划线，避免使用数据库保留字。</p><h3 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h3><p><strong>适度索引</strong>：为频繁查询和参与JOIN操作的字段创建索引，但需注意过多的索引会影响插入、删除和更新操作的性能。</p><p><strong>索引类型选择</strong>：根据数据特性和查询需求选择合适的索引类型，如<strong>BTREE索引适用于范围查询，哈希索引适合等值查询</strong>。</p><p><strong>复合索引</strong>：合理安排复合索引中字段的顺序，一般<strong>将区分度高的字段放在前面以提高索引利用率</strong>。</p><h3 id="SQL编写规范"><a href="#SQL编写规范" class="headerlink" title="SQL编写规范"></a>SQL编写规范</h3><p><strong>避免SELECT *</strong>：明确指定需要查询的字段，减少不必要的数据传输量。</p><p><strong>使用参数化查询</strong>：防止SQL注入攻击，提高代码安全性和可读性。</p><p><strong>事务处理</strong>：对相关操作使用事务管理，确保数据一致性，尤其是在涉及多表操作时。</p><h3 id="数据类型选择"><a href="#数据类型选择" class="headerlink" title="数据类型选择"></a>数据类型选择</h3><p>根据实际存储需求选择最合适的的数据类型，避免过度使用大容量类型，比如合理使用<code>INT</code>而非<code>BIGINT</code>，使用<code>VARCHAR</code>并限制长度而非无限制的<code>TEXT</code>。</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p><strong>定期分析和优化表</strong>：使用<code>ANALYZE TABLE</code>和<code>OPTIMIZE TABLE</code>命令来分析表的状态并进行必要的优化。</p><p><strong>查询优化</strong>：利用<code>EXPLAIN</code>分析查询计划，优化复杂的查询语句，<strong>减少子查询</strong>的使用，适当情况下使<strong>用连接（JOIN）代替</strong>。</p><p>定期进行数据库备份，包括全备和增量备份，确保在数据丢失或损坏时能够快速恢复。</p><h3 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h3><p><strong>最小权限原则</strong>：为不同用户或应用分配仅满足其功能所需的最小权限。</p><p><strong>加密敏感数据</strong>：对敏感信息如密码进行加密存储，不直接保存明文。</p><h3 id="监控与日志"><a href="#监控与日志" class="headerlink" title="监控与日志"></a>监控与日志</h3><p>启用并监控MySQL的日志系统（如错误日志、慢查询日志），及时发现并解决问题。<br>遵循这些规范，可以帮助开发团队构建更加健壮、高效、易于维护的MySQL数据库应用系统。</p></blockquote><h1 id="建立索引需要考虑的因素"><a href="#建立索引需要考虑的因素" class="headerlink" title="建立索引需要考虑的因素"></a>建立索引需要考虑的因素</h1><blockquote><h3 id="选择合适的列"><a href="#选择合适的列" class="headerlink" title="选择合适的列"></a>选择合适的列</h3><p>并非所有列都适合创建索引。通常，那些频繁用于查询条件（如WHERE子句）、JOIN操作或者ORDER BY、GROUP BY语句中的列是建立索引的首选。同时，考虑到索引维护的成本，应<strong>避免</strong>在具有<strong>高更新频率或大量重复值的列</strong>上建立索引。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>如果一个查询的所有需要的数据都能从索引中直接获取而<strong>无需回表查询</strong>（即<strong>索引覆盖查询</strong>），那么这样的查询将更加高效。因此，在设计索引时，考虑是否能通过包含额外的列来实现索引覆盖。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>根据数据特性和查询需求选择合适的索引类型。例如，<strong>B-Tree索引</strong>是最常见的，适用于<strong>范围查询和等于操作</strong>；<strong>哈希索引</strong>适合<strong>等值查询</strong>；<strong>位图索引</strong>在数据只有<strong>几种固定值</strong>时效率较高；而<strong>全文索引</strong>则用于<strong>文本的全文搜索</strong>。</p><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><p>当查询涉及多个列时，可以考虑创建<strong>复合索引</strong>（即<strong>包含多个列的索引</strong>）。合理安排复合索引中列的顺序至关重要，一般将区分度高的列放在前面以提高筛选效率。</p><h3 id="索引的稀疏性"><a href="#索引的稀疏性" class="headerlink" title="索引的稀疏性"></a>索引的稀疏性</h3><p>索引应该尽可能地“瘦”，即只包含对查询有帮助的列，避免不必要的数据冗余，减少索引的大小和维护成本。</p><h3 id="系统资源与性能影响"><a href="#系统资源与性能影响" class="headerlink" title="系统资源与性能影响"></a>系统资源与性能影响</h3><p>创建和维护索引会占用磁盘空间，并可能影响数据插入、删除和更新的性能。需要权衡索引带来的查询加速与资源消耗之间的平衡，尤其是在数据量大、写操作频繁的场景下。索引会占用额外的存储空间，特别是对大表和多列索引，需要权衡存储成本。</p><h3 id="评估和优化"><a href="#评估和优化" class="headerlink" title="评估和优化"></a>评估和优化</h3><p>随着业务需求和数据量的变化，定期评估现有索引的有效性，删除不再使用的索引，添加新的索引。使用数据库的监控工具（如 MySQL 的慢查询日志、性能模式等）监控索引的使用情况和性能。</p></blockquote><h1 id="数据库的三范式"><a href="#数据库的三范式" class="headerlink" title="数据库的三范式"></a>数据库的三范式</h1><blockquote><p>数据库设计中的三范式（3NF）是关系数据库理论中的一种规范化标准，用于<strong>减少数据冗余和提高数据一致性</strong>。</p><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式 (1NF)"></a>第一范式 (1NF)</h3><p>第一范式要求每个表中的字段值都是原子的，即<strong>每个字段只能包含一个值，不能包含重复的组或数组</strong>。</p><ol><li>每个列中的值必须是不可分割的原子值。</li><li>表中的每一行必须是唯一的，即每一行都应该有一个唯一的标识符（通常是主键）。</li></ol><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式 (2NF)"></a>第二范式 (2NF)</h3><p>第二范式在满足第一范式的基础上，要求表中的<strong>每个非主键字段必须完全依赖于主键</strong>，消除部分依赖。</p><ol><li>表必须满足第一范式。</li><li>非主键字段必须完全依赖于主键，而不能只依赖于主键的一部分（如果主键是复合主键）。</li></ol><h3 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式 (3NF)"></a>第三范式 (3NF)</h3><p>第三范式在满足第二范式的基础上，要求表中的<strong>非主键字段之间不能有传递依赖</strong>。</p><ol><li>表必须满足第二范式。</li><li>非主键字段之间不能存在传递依赖，即<strong>非主键字段必须直接依赖于主键</strong>，而不能通过其他非主键字段间接依赖于主键。</li></ol></blockquote><h1 id="Mysql的explain有哪些列"><a href="#Mysql的explain有哪些列" class="headerlink" title="Mysql的explain有哪些列"></a>Mysql的explain有哪些列</h1><blockquote><p>EXPLAIN命令用于<strong>分析 SQL 查询的执行计划</strong>，帮助优化查询性能。通过 explain 命令获取 select 语句的执行计划，通过 explain 我们可以知道以下信息：<code>表的读取顺序，数据读取操作的类型，哪些索引可以使用，哪些索引实际使用了，表之间的引用，每张表有多少行被优化器查询</code>等信息。</p><h3 id="idM"><a href="#idM" class="headerlink" title="idM"></a>idM</h3><p>查询的标识符。一个查询中的每个子查询或联合查询都会有一个唯一的id。id相同时，执行顺序由上至下。如果是子查询，id的序号会递增，<strong>id值越大优先级越高</strong>，越先被执行。id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行。主要用于区分查询中的不同部分。</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>查询的类型，描述 SELECT 的类型。</p><p><strong>常见值</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;SIMPLE：简单的 SELECT 查询，不包含子查询或 UNION。</span><br><span class="line">&gt;PRIMARY：最外层的 SELECT。</span><br><span class="line">&gt;UNION：UNION 中的第二个或后续的 SELECT 查询。</span><br><span class="line">&gt;DEPENDENT UNION：UNION 中的第二个或后续的 SELECT 查询，依赖于外部查询。</span><br><span class="line">&gt;UNION RESULT：UNION 的结果。</span><br><span class="line">&gt;SUBQUERY：子查询中的第一个 SELECT。</span><br><span class="line">&gt;DEPENDENT SUBQUERY：子查询，依赖于外部查询。</span><br><span class="line">&gt;DERIVED：派生表（子查询的结果作为临时表）。</span><br></pre></td></tr></table></figure><p>当通过union来连接多个查询结果时，第二个之后的select其select_type为UNION。</p><p>当union作为<strong>子查询</strong>时，其中第二个union的select_type就是DEPENDENT UNION。第一个子查询的select_type则是DEPENDENT SUBQUERY。</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>这一列表示 explain的<strong>这一行正在访问哪个表</strong>。</p><p>1）当 from 子句中有子查询时，如果table列是 <code>&lt;derivenN&gt;</code> 格式，则表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。</p><p>2）当有 union 时，UNION RESULT 的 table 列的值为<union1,2>，1和2表示参与 union 的 select 行id。</union1,2></p><h3 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h3><p>如果该查询是<strong>基于分区表的查询</strong>，partitions字段会显示查询所访问的分区。</p><h3 id="type-重点"><a href="#type-重点" class="headerlink" title="type(重点)"></a>type(重点)</h3><p>这一列表示<strong>关联类型或访问类型</strong>，即，Mysql决定通过哪种方式查找数据表中的数据。</p><p>从优到最差分别为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p><p>一般来说，至少需要保证查询达到range级别，最好达到ref级别。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center">system</td><td style="text-align:left">表只有一行（等于系统表）</td></tr><tr><td style="text-align:center">const</td><td style="text-align:left">表最多有一行匹配</td></tr><tr><td style="text-align:center">eq_ref</td><td style="text-align:left">对于每个来自前一个表的行，最多一行与之匹配，比如一个订单表的对应另一张订单信息扩充表，扩充表的记录和订单表肯定是 1 对 1 的，就是 eq</td></tr><tr><td style="text-align:center">ref</td><td style="text-align:left">对于每个来自前一个表的行，可能有多行与之匹配，如果上面的例子是一对多，那么就是 ref</td></tr><tr><td style="text-align:center">range</td><td style="text-align:left">使用索引查找指定范围的行</td></tr><tr><td style="text-align:center">index</td><td style="text-align:left">全索引扫描，扫描索引树</td></tr><tr><td style="text-align:center">ALL</td><td style="text-align:left">全表扫描</td></tr></tbody></table></div><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>指出MySQL能<strong>使用哪个索引在表中找到记录</strong>，查询涉及到的字段上若存在索引，则该索引将被列出，但<strong>不一定被使用</strong>（该查询可以利用的索引，如果没有任何索引显示 null）</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>key列显示MySQL<strong>实际决定使用的键（索引）</strong>，必然包含在possible_keys中</p><p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p><p>可能出现这种情况，possible_keys有显示列，而key显示NULL的情况，这种情况是因为表中数据不多，Mysql优化器认为查询时走索引对此查询语句帮助不大，从而优化器会选择全表扫描（扫描聚簇索引），而不是走索引来查询。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>显示MySQL认为它执行查询时检查的行数。多行之间的同组数据相乘可以估算要处理的行数，不同组的相加</p><h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h3><p>该列是一个百分比的值，rows * filtered/100 可以估算出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。</p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>附加信息。</p><p><strong>Using index</strong>：查询使用了覆盖索引（索引包含所有需要的数据）。</p><p><strong>Using where</strong>：使用了WHERE子句进行过滤。</p><p><strong>Using temporary</strong>：使用了临时表。</p><p><strong>Using filesort</strong>：使用了文件排序。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设我们有一个电子商务数据库，包含以下两个表：</p><ol><li>orders表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">   order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   customer_id <span class="type">INT</span>,</span><br><span class="line">   order_date <span class="type">DATE</span>,</span><br><span class="line">   total_amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>customers表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">   customer_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   customer_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line"><span class="operator">&gt;</span>);</span><br></pre></td></tr></table></figure><p>我们有一个查询，想要获取在特定日期范围内下单的客户信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> c.customer_name, c.email, o.order_date, o.total_amount <span class="keyword">FROM</span> orders o <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id <span class="keyword">WHERE</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2024-01-31&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="使用-EXPLAIN-分析查询"><a href="#使用-EXPLAIN-分析查询" class="headerlink" title="使用 EXPLAIN 分析查询"></a>使用 EXPLAIN 分析查询</h3><p>执行EXPLAIN命令来分析这个查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>EXPLAIN <span class="keyword">SELECT</span> c.customer_name, c.email, o.order_date, o.total_amount <span class="keyword">FROM</span> orders o <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id <span class="keyword">WHERE</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2024-01-31&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="EXPLAIN-输出示例"><a href="#EXPLAIN-输出示例" class="headerlink" title="EXPLAIN 输出示例"></a>EXPLAIN 输出示例</h3><p>假设EXPLAIN返回以下结果：</p><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>o</td><td>NULL</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>10000</td><td>10.00</td><td>Using where</td></tr><tr><td>1</td><td>SIMPLE</td><td>c</td><td>NULL</td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>e_commerce.o.customer_id</td><td>1</td><td>100.00</td><td>NULL</td></tr></tbody></table></div><h3 id="分析-EXPLAIN-输出"><a href="#分析-EXPLAIN-输出" class="headerlink" title="分析 EXPLAIN 输出"></a>分析 EXPLAIN 输出</h3><h3 id="orders-表扫描（o-表）"><a href="#orders-表扫描（o-表）" class="headerlink" title="orders 表扫描（o 表）"></a>orders 表扫描（o 表）</h3><p><strong>type</strong>: ALL表示全表扫描，这意味着 MySQL 需要扫描orders表的所有行。</p><p><strong>possible_keys</strong>:NULL表示没有可用的索引。</p><p><strong>rows</strong>: 10000 表示 MySQL 估计需要扫描 10,000 行。</p><p><strong>Extra</strong>:Using where表示 MySQL 使用了WHERE子句来过滤行。</p><h3 id="customers-表扫描（c-表）"><a href="#customers-表扫描（c-表）" class="headerlink" title="customers 表扫描（c 表）"></a>customers 表扫描（c 表）</h3><p><strong>type</strong>:eq_ref表示对customer_id列的精确查找。</p><p><strong>key</strong>:PRIMARY表示使用了customers表的主键索引。</p><p><strong>rows</strong>: 1 表示每次查找只返回一行。</p><h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p><strong>为orders表的order_date列创建索引</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> INDEX idx_order_date <span class="keyword">ON</span> orders(order_date);</span><br></pre></td></tr></table></figure><p><strong>再次运行 EXPLAIN</strong>查看效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>EXPLAIN <span class="keyword">SELECT</span> c.customer_name, c.email, o.order_date, o.total_amount <span class="keyword">FROM</span> orders o <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id <span class="keyword">WHERE</span> o.order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2024-01-31&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="优化后的-EXPLAIN-输出示例"><a href="#优化后的-EXPLAIN-输出示例" class="headerlink" title="优化后的 EXPLAIN 输出示例"></a>优化后的 EXPLAIN 输出示例</h3><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>o</td><td>NULL</td><td>range</td><td>idx_order_date</td><td>idx_order_date</td><td>3</td><td>NULL</td><td>1000</td><td>100.00</td><td>Using index</td></tr><tr><td>1</td><td>SIMPLE</td><td>c</td><td>NULL</td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>e_commerce.o.customer_id</td><td>1</td><td>100.00</td><td>NULL</td></tr></tbody></table></div><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><h3 id="orders-表扫描（o-表）-1"><a href="#orders-表扫描（o-表）-1" class="headerlink" title="orders 表扫描（o 表）"></a>orders 表扫描（o 表）</h3><p><strong>type</strong>:range表示使用索引扫描特定范围的行。</p><p><strong>key</strong>:idx_order_date表示使用了新创建的索引。</p><p><strong>rows</strong>: 1000 表示 MySQL 估计需要扫描 1,000 行，而不是之前的 10,000 行。</p><p>通过创建索引，查询性能得到了显著提升，因为 MySQL 不再需要对orders表进行全表扫描，而是使用索引快速定位符合条件的行。</p></blockquote><h1 id="Mysql语句种类"><a href="#Mysql语句种类" class="headerlink" title="Mysql语句种类"></a>Mysql语句种类</h1><blockquote><h3 id="数据定义语言-DDL"><a href="#数据定义语言-DDL" class="headerlink" title="数据定义语言 (DDL)"></a>数据定义语言 (DDL)</h3><p>DDL 语句用于定义和管理数据库结构，例如创建、修改和删除数据库和表。</p><p><strong>CREATE</strong>：创建数据库、表、索引等。</p><p><strong>ALTER</strong>：修改现有数据库对象的结构。</p><p><strong>DROP</strong>：删除数据库、表、索引等。</p><p><strong>TRUNCATE</strong>：清空表中的所有数据，但保留表结构。</p><h3 id="数据操作语言-DML"><a href="#数据操作语言-DML" class="headerlink" title="数据操作语言 (DML)"></a>数据操作语言 (DML)</h3><p>DML 语句用于操作数据库中的数据，例如插入、更新、删除和查询数据。</p><p><strong>INSERT</strong>：插入数据。</p><p><strong>UPDATE</strong>：更新数据。</p><p><strong>DELETE</strong>：删除数据。</p><p><strong>SELECT</strong>：查询数据。</p><h3 id="数据控制语言-DCL"><a href="#数据控制语言-DCL" class="headerlink" title="数据控制语言 (DCL)"></a>数据控制语言 (DCL)</h3><p>DCL 语句用于控制数据库的访问权限。</p><p><strong>GRANT</strong>：授予用户权限。</p><p><strong>REVOKE</strong>：撤销用户权限。</p><h3 id="事务控制语言-TCL"><a href="#事务控制语言-TCL" class="headerlink" title="事务控制语言 (TCL)"></a>事务控制语言 (TCL)</h3><p>TCL 语句用于管理事务，确保数据的一致性和完整性。</p><p><strong>START TRANSACTION</strong>：开始一个事务。</p><p><strong>COMMIT</strong>：提交事务。</p><p><strong>ROLLBACK</strong>：回滚事务。</p><p><strong>SAVEPOINT</strong>：设置保存点。</p><p><strong>RELEASE SAVEPOINT</strong>：释放保存点。</p><p><strong>ROLLBACK TO SAVEPOINT</strong>：回滚到保存点。</p><h3 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言 (DQL)"></a>数据查询语言 (DQL)</h3><p>DQL 主要包括SELECT语句，用于查询数据库中的数据。</p><p><strong>SELECT</strong>：查询数据。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>EXPLAIN</strong>：解释查询执行计划。</p><p><strong>SHOW</strong>：显示数据库对象的信息。</p><p><strong>DESCRIBE</strong>：显示表的结构。</p></blockquote><h1 id="Mysql查询优化"><a href="#Mysql查询优化" class="headerlink" title="Mysql查询优化"></a>Mysql查询优化</h1><blockquote><h3 id="避免全表扫描"><a href="#避免全表扫描" class="headerlink" title="避免全表扫描"></a>避免全表扫描</h3><p>优化查询时，应避免全表扫描，优先在 WHERE 和 ORDER BY 涉及的列上建立索引。</p><h3 id="避免-NULL-值判断"><a href="#避免-NULL-值判断" class="headerlink" title="避免 NULL 值判断"></a>避免 NULL 值判断</h3><p><strong>避免在 WHERE 子句中对字段进行 NULL 值判断</strong>。创建表时，尽量使用 NOT NULL 或使用特殊值（如 0 或 -1）作为默认值。</p><p>Mysql难以优化引用可空列查询，它会使索引、索引统计和值更加复杂。可空列需要更多的存储空间，还需要mysql内部进行特殊处理。可空列被索引后，每条记录都需要一个额外的字节，还能导致MYisam 中固定大小的索引变成可变大小的索引。</p><p>还有几点原因：</p><p>1、所有使用NULL值的情况，都可以通过一个有意义的值的表示，这样有利于代码的可读性和可维护性，并能从约束上增强业务数据的规范性。</p><p>2、NULL值到非NULL的更新无法做到原地更新，更容易发生索引分裂，从而影响性能。</p><p>3、NOT IN、!= 等负向条件查询在有 NULL 值的情况下返回永远为空结果，查询容易出错</p><h3 id="避免-或-lt-gt-操作符"><a href="#避免-或-lt-gt-操作符" class="headerlink" title="避免 != 或 &lt;&gt; 操作符"></a>避免 != 或 &lt;&gt; 操作符</h3><p>避免在 WHERE 子句中使用 != 或 &lt;&gt; 操作符。MySQL 仅对 &lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN 以及某些情况下的 LIKE 使用索引。</p><h3 id="避免-OR-条件"><a href="#避免-OR-条件" class="headerlink" title="避免 OR 条件"></a>避免 OR 条件</h3><p>避免在 WHERE 子句中使用 OR 连接条件，因这会导致全表扫描。可以使用 <strong>UNION 合并查询</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;SELECT id FROM t WHERE num=10 UNION ALL SELECT id FROM t WHERE num=20;</span><br></pre></td></tr></table></figure><h3 id="谨慎使用-IN-和-NOT-IN"><a href="#谨慎使用-IN-和-NOT-IN" class="headerlink" title="谨慎使用 IN 和 NOT IN"></a>谨慎使用 IN 和 NOT IN</h3><p>谨慎使用 IN 和 NOT IN，因其可能导致全表扫描。对于连续数值，用 <strong>BETWEEN 替代</strong> IN：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> num <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="LIKE-查询优化"><a href="#LIKE-查询优化" class="headerlink" title="LIKE 查询优化"></a>LIKE 查询优化</h3><p>避免使用%abc%或%abc的 LIKE 查询，这会导致全表扫描。可以考虑<strong>使用全文检索</strong>。只有abc%的 LIKE 查询会使用索引。</p><h3 id="避免参数化查询导致的全表扫描"><a href="#避免参数化查询导致的全表扫描" class="headerlink" title="避免参数化查询导致的全表扫描"></a>避免参数化查询导致的全表扫描</h3><p>避免在 WHERE 子句中使用参数，这会导致全表扫描。可以<strong>强制查询使用索引</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t <span class="keyword">WITH</span> (INDEX(索引名)) <span class="keyword">WHERE</span> num<span class="operator">=</span><span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><h3 id="避免表达式操作"><a href="#避免表达式操作" class="headerlink" title="避免表达式操作"></a>避免表达式操作</h3><p>避免在 WHERE 子句中对字段进行函数操作。</p><p>不要<code>WHERE YEAR(order_date) = 2024</code>使用 ，而要使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">WHERE</span> order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> order_date <span class="operator">&lt;</span> <span class="string">&#x27;2025-01-01&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用-EXISTS-替代-IN"><a href="#使用-EXISTS-替代-IN" class="headerlink" title="使用 EXISTS 替代 IN"></a>使用 EXISTS 替代 IN</h3><p>使用 EXISTS 替代 IN，可以提高查询效率：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> num <span class="keyword">FROM</span> a <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> b <span class="keyword">WHERE</span> num<span class="operator">=</span>a.num);</span><br></pre></td></tr></table></figure></blockquote><h1 id="Mysql聚集索引"><a href="#Mysql聚集索引" class="headerlink" title="Mysql聚集索引"></a>Mysql聚集索引</h1><blockquote><p>MySQL 中的聚集索引是指<strong>数据表的记录按照索引的顺序进行物理存储</strong>。也就是说，表中的数据行和索引行一起存储，并且数据行的顺序与索引的顺序相同。聚集索引的特点是<strong>索引的叶节点包含了实际的数据行</strong>。<strong>一个表中只能有一个聚集索引</strong>，因为只能以一种物理顺序存放。</p><p>在 MySQL 中，<strong>InnoDB 存储引擎默认使用聚集索引</strong>。InnoDB 表必须有一个聚集索引，如果没有显式定义主键，InnoDB 会选择一个<strong>唯一的非空索引</strong>作为聚集索引。如果没有这样的索引，InnoDB 会自动生成一个名为<strong>row_id隐藏的聚集索引</strong>。</p><p>我们通过InnoDB把数据存放到B+树中，而B+树中的键值就是主键，那么在B+树中的叶子节点存储的就是表中的所有数据（即该主键对应的整行数据），数据文件和索引文件是同一个文件，找到了索引便找到了数据，所以称之为聚集索引。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>物理顺序存储</strong>：数据行按照索引键的顺序存储在数据页中。</li><li><strong>叶节点包含数据</strong>：聚集索引的叶节点包含了实际的数据行。</li><li><strong>只能有一个</strong>：每个数据表只能有一个聚集索引，因为数据行只能按一种顺序存储。</li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>查询效率高</strong>：对于基于聚集索引的范围查询（between、&lt;、&lt;=、&gt;、&gt;=）和排序操作（group by、order by），效率较高，因为数据行是按索引顺序存储的。因为聚集索引找到包含第一个值的行后，后续索引值的行在物理上毗连在一起而不必进一步搜索，避免大范围扫描，大大提高查询速度。</li><li><strong>覆盖索引</strong>：在某些查询中，聚集索引可以充当覆盖索引，从而减少读取数据的次数。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>插入速度较慢：在插入新记录时，可能需要移动大量数据行以保持索引顺序。</li><li>更新代价高：更新聚集索引键值时，可能导致数据行的重新排序。移动行可能还会面临页分裂问题（即页已满），存储引擎会将该页分裂成两个页面来容纳，页分裂会占用更多磁盘空间。即索引重排，造成资源浪费。</li><li>占用更多存储空间：由于数据行和索引一起存储，可能占用更多的存储空间。</li></ol></blockquote><h1 id="聚集索引不要选择频繁更新的列"><a href="#聚集索引不要选择频繁更新的列" class="headerlink" title="聚集索引不要选择频繁更新的列"></a>聚集索引不要选择频繁更新的列</h1><blockquote><h3 id="数据重排"><a href="#数据重排" class="headerlink" title="数据重排"></a>数据重排</h3><p>由于聚集索引的特点是数据行按照索引键的顺序进行物理存储，当聚集索引键的值发生变化时，数据库需要将该行移动到新的位置以保持索引顺序。这种数据重排操作会消耗大量的 I/O 和 CPU 资源，导致性能下降。</p><h3 id="页分裂和合并"><a href="#页分裂和合并" class="headerlink" title="页分裂和合并"></a>页分裂和合并</h3><p>当新的数据行插入到现有页面中而页面已经满了时，InnoDB 需要进行页分裂（Page Split），将一个页面分成两个页面，以腾出空间存储新数据。这种操作不仅耗时，还会导致磁盘碎片，影响查询性能。频繁更新聚集索引键会增加页分裂的频率。</p><h3 id="二级索引的维护"><a href="#二级索引的维护" class="headerlink" title="二级索引的维护"></a>二级索引的维护</h3><p>InnoDB 中的二级索引会引用聚集索引的键作为指向数据行的指针。当聚集索引键发生变化时，所有引用该键的二级索引也需要更新。这会增加额外的维护成本，影响整体性能。</p><h3 id="锁争用和死锁"><a href="#锁争用和死锁" class="headerlink" title="锁争用和死锁"></a>锁争用和死锁</h3><p>频繁更新聚集索引键可能导致更多的锁争用和死锁问题。数据行的移动和页分裂操作需要持有独占锁，这会阻塞其他事务的读写操作，增加系统的锁争用和死锁风险。</p></blockquote><h1 id="Mysql非聚集索引"><a href="#Mysql非聚集索引" class="headerlink" title="Mysql非聚集索引"></a>Mysql非聚集索引</h1><blockquote><p>MySQL 的非聚集索引（Non-Clustered Index），也称为<strong>辅助索引或二级索引</strong>，是指索引的叶节点不包含实际的数据行，而是包含指向数据行的指针（通常是聚集索引键）。通俗理解，以主键以外的列作为键值构建的B+树索引。非聚集索引的主要作用是<strong>加速特定列上的查询操作，而不改变数据行的物理存储顺序</strong>。记录的物理顺序与逻辑顺序没有必然的联系。</p><p>非聚集索引表数据存储顺序与索引数据无关，<strong>叶节点包含索引字段值及指向数据页数据行的逻辑指针</strong>（其行数量与数据表数据量相同），所以想要查找数据还需要根据主键再去聚集索引中查找，根据聚集索引查找数据的过程就称为<strong>回表</strong>。</p><p>一个表中可以拥有多个非聚集索引。实际上每个表最多可以建立249个非聚集索引，但是每次给字段建一个新索引，字段中的数据就会被复制出来一份用于生成索引，因此给表添加索引会增加表的体积，占据大量磁盘空间和内存。所以若磁盘空间和内存有限，应限制非聚集索引数量。每当你改变了一个建立非聚集索引的表中数据时，必须同时更新索引，所以非聚集索引会降低插入和更新速度。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>独立于数据存储顺序</strong>：非聚集索引不会改变数据行的物理存储顺序，数据行的顺序由聚集索引决定。</li><li><strong>叶节点包含指针</strong>：非聚集索引的叶节点存储的是指向实际数据行的指针（如聚集索引键），而不是数据行本身。</li><li><strong>可以有多个</strong>：一个表可以有多个非聚集索引，每个非聚集索引加速不同列上的查询操作。</li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p><strong>加速查询</strong>：非聚集索引可以显著加速特定列上的查询操作，特别是那些经常出现在 WHERE 子句中的列。</p><p><strong>多样性</strong>：可以在多个列上创建非聚集索引，以满足不同查询需求。</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p><strong>占用空间</strong>：非聚集索引需要额外的存储空间来维护索引结构。</p><p><strong>维护成本</strong>：在插入、更新和删除操作时，需要维护非聚集索引，可能会增加开销。</p></blockquote><h1 id="Mysql的回表查询"><a href="#Mysql的回表查询" class="headerlink" title="Mysql的回表查询"></a>Mysql的回表查询</h1><blockquote><p>聚集索引叶子结点会存数据，非聚集索引存的是主键值。知道这个前提后，在 MySQL 中，回表查询（也称为回表操作）是指在使用非聚集索引进行查询时，需要从索引中获取行的指针（通常是主键值），然后再根据这些指针访问实际的数据行。这种操作通常发生在查询中需要访问的列不完全包含在索引中的情况下。如果查询的列，包含在索引中，那么就是覆盖索引的概念了。</p><h3 id="回表查询的过程"><a href="#回表查询的过程" class="headerlink" title="回表查询的过程"></a>回表查询的过程</h3><ol><li><strong>使用非聚簇索引查找</strong>：首先，MySQL 使用非聚簇索引查找满足查询条件的索引项。</li><li><strong>获取行指针</strong>：从非聚簇索引的叶节点获取指向实际数据行的指针（例如主键值）。</li><li><strong>访问数据行</strong>：根据获取的指针，访问实际的数据行以获取所需的列数据。</li></ol><h3 id="回表查询的步骤"><a href="#回表查询的步骤" class="headerlink" title="回表查询的步骤"></a>回表查询的步骤</h3><ol><li><strong>使用索引查找</strong>：MySQL 使用idx_last_name索引查找last_name为 ‘Smith’ 的索引项。</li><li><strong>获取主键值</strong>：从索引项中获取对应的emp_id（因为emp_id是主键）。</li><li><strong>访问数据行</strong>：根据emp_id，访问实际的数据行以获取first_name和hire_date列的数据。</li></ol></blockquote><h1 id="Mysql的覆盖索引"><a href="#Mysql的覆盖索引" class="headerlink" title="Mysql的覆盖索引"></a>Mysql的覆盖索引</h1><blockquote><p>在 MySQL 中，覆盖索引（Covering Index）是指一个索引包含了查询所需的所有列，从而使查询可以完全从索引中获取数据，而不需要访问实际的数据行。这种技术可以显著提高查询性能，因为它减少了对表数据的访问次数。</p><p>如果我的非聚集索引，在建立的时候，有一个 name 列，而我们查询的时候，也是 select name 这样就在非聚集索引就可以查到。那就不用回表了。</p><h3 id="索引覆盖的好处"><a href="#索引覆盖的好处" class="headerlink" title="索引覆盖的好处"></a>索引覆盖的好处</h3><ol><li><strong>减少I/O操作</strong>：查询可以直接从索引中读取所需的数据，避免了访问磁盘上的数据行，从而减少了I/O操作。</li><li><strong>提高查询性能</strong>：由于减少了对数据行的访问，查询速度会更快。</li><li><strong>减少回表操作</strong>：避免了回表操作，因为所有需要的数据都在索引中。</li></ol><h3 id="示例-Demo"><a href="#示例-Demo" class="headerlink" title="示例 Demo"></a>示例 Demo</h3><p>假设有一个表employees，并且我们在last_name列上创建了一个非聚簇索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">   emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    hire_date <span class="type">DATE</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> INDEX idx_last_name <span class="keyword">ON</span> employees(last_name);</span><br></pre></td></tr></table></figure><p>现在我们执行一个查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> first_name, hire_date <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，idx_last_name索引只包含last_name列的信息，因此 MySQL 需要通过索引找到满足条件的行指针（例如主键值），然后回表访问实际的数据行以获取first_name和hire_date列的数据。</p><h3 id="使用覆盖索引"><a href="#使用覆盖索引" class="headerlink" title="使用覆盖索引"></a>使用覆盖索引</h3><p>为了避免回表操作，可以创建一个覆盖索引，包含所有需要的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> INDEX idx_last_name_full <span class="keyword">ON</span> employees(last_name, first_name, hire_date);</span><br></pre></td></tr></table></figure><h3 id="覆盖索引的工作原理"><a href="#覆盖索引的工作原理" class="headerlink" title="覆盖索引的工作原理"></a>覆盖索引的工作原理</h3><ol><li><strong>索引查找</strong>：MySQL 使用idx_last_name_full索引查找last_name为 ‘Smith’ 的索引项。</li><li><strong>直接获取数据</strong>：因为索引已经包含了first_name和hire_date列，MySQL 可以直接从索引中获取所有需要的数据，而不需要回表。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>覆盖索引特别适用于那些经常需要查询少量列而这些列可以包含在一个索引中的场景。</p><p>查询经常使用的列，需要高查询性能的读密集型应用。</p></blockquote><h1 id="Mysql前缀索引"><a href="#Mysql前缀索引" class="headerlink" title="Mysql前缀索引"></a>Mysql前缀索引</h1><blockquote><p>前缀索引（Prefix Index）是一种索引类型，用于对字符串类型的列（如CHAR、VARCHAR、TEXT等）进行部分索引。通过索引字符串的前一部分，而不是整个字符串，可以显著减少索引的大小，从而提高查询性能，特别是在处理大量数据时。比如一个字符串有 30 个字符，建立索引的时候，发现取前 10 个字符就可以区分出来，这样就可以减少索引大小，也就是前缀索引。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>字符串列的长度较长，且前几位字符就能区分大多数记录。</p><p>需要减少索引的存储空间。</p><h3 id="索引选择性"><a href="#索引选择性" class="headerlink" title="索引选择性"></a>索引选择性</h3><p>这里要了解一个概念，索引的选择性（Index Selectivity），是指<strong>不重复的索引值和数据表的记录总数的比值</strong>。索引的选择性越高则查询效率越高。</p><p>前缀索引的目的其实就是性能和空间中找到一个平衡。假设现在有几条记录。</p><p>vceina12312-ceince</p><p>vceina1demiwad</p><p>dwianfgein-ceicenm</p><p>假设我们取前 7 位来建立前缀索引，就得到如下结果：</p><p>vceina1</p><p>vceina1</p><p>dwianfg</p><p>也就是有两条记录是相同的，那么 2/3 = 0.666666 这就是选择性得到的值。</p><p>那假设扩展到 8 位来建立索引呢。</p><p>vceina12</p><p>vceina1d</p><p>dwianfge</p><p>用 8 位我们就可以区分出来，找到一条记录。那相比最上面的数据，我们的空间就变小了。所以前缀索引的选择性，最好要接近于正常数据的量。</p><p>可以通过如下公式计算：</p><p>全列的数为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>某一长度前缀的选择性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">LEFT</span>(column_name, prefix_length)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>如果二者计算结果约等于全列选择性的时候，就是最佳结果。</p><h3 id="如何创建前缀索引"><a href="#如何创建前缀索引" class="headerlink" title="如何创建前缀索引"></a>如何创建前缀索引</h3><p>创建前缀索引时，需要指定要索引的前缀长度。前缀长度应根据实际数据分布和查询需求来确定，一般选择能够有效区分数据的最小长度。</p><p>假设有一个包含URL的表websites，其结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> websites (</span><br><span class="line">     id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">     url <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="operator">&gt;</span>);</span><br></pre></td></tr></table></figure><p>如果我们希望对url列创建前缀索引，可以使用如下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> INDEX idx_url_prefix <span class="keyword">ON</span> websites (url(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>上述语句创建了一个前缀长度为10的索引，即只对url列的前10个字符进行索引。</p><h3 id="前缀索引的优缺点"><a href="#前缀索引的优缺点" class="headerlink" title="前缀索引的优缺点"></a>前缀索引的优缺点</h3><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><p><strong>减少索引大小</strong>：前缀索引只索引字符串的前部分字符，显著减少了索引占用的存储空间。</p><p><strong>提高性能</strong>：在某些情况下，较小的索引可以提高查询性能，特别是在内存有限的情况下。</p><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><p><strong>精确性降低</strong>：前缀索引可能无法完全区分所有记录，特别是前缀部分相同的记录。在这种情况下，可能需要进行额外的行扫描来完成查询。</p><p><strong>适用场景有限</strong>：前缀索引主要适用于字符串列，对于其他类型的列（如整数、日期等）不适用。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>选择合适的前缀长度</strong>：前缀长度过短可能导致索引选择性差，前缀长度过长则无法充分减少索引大小。需要根据数据分布和查询需求选择合适的前缀长度。</p><p><strong>不适用于ORDER BY和GROUP BY</strong>：前缀索引在某些查询（如ORDER BY和GROUP BY）中可能无法使用，因为这些操作需要完整的列值。</p></blockquote><h1 id="什么情况下应不建或少建索引"><a href="#什么情况下应不建或少建索引" class="headerlink" title="什么情况下应不建或少建索引"></a>什么情况下应不建或少建索引</h1><blockquote><h3 id="表的数据量较小"><a href="#表的数据量较小" class="headerlink" title="表的数据量较小"></a>表的数据量较小</h3><p>对于小表，扫描整个表的速度可能比通过索引查找还要快。在这种情况下，索引带来的性能提升非常有限，甚至可能增加不必要的开销。小表一般不需要额外的索引，除非有特定的查询需要优化。</p><h3 id="表的写操作频繁"><a href="#表的写操作频繁" class="headerlink" title="表的写操作频繁"></a>表的写操作频繁</h3><p>每次插入、更新或删除操作时，索引也需要更新，这会增加额外的开销。如果表的写操作非常频繁，索引的维护成本可能会超过其带来的查询优化收益。对于写操作频繁的表，应谨慎添加索引，尽量减少不必要的索引。</p><h3 id="索引列的基数低"><a href="#索引列的基数低" class="headerlink" title="索引列的基数低"></a>索引列的基数低</h3><p>基数低的列是指列中重复值较多的列，如性别（男/女）、布尔值（是/否）等。对于这种列，索引的选择性较差，使用索引进行查询可能不会显著提高性能。</p><h3 id="频繁的批量数据加载"><a href="#频繁的批量数据加载" class="headerlink" title="频繁的批量数据加载"></a>频繁的批量数据加载</h3><p>在进行批量数据加载（如批量插入或更新）时，索引的维护会显著增加操作时间。如果数据加载频繁，索引的维护成本会非常高。可以考虑在批量数据加载前暂时删除索引，加载完成后再重新创建索引。</p><h3 id="查询模式不确定或多变"><a href="#查询模式不确定或多变" class="headerlink" title="查询模式不确定或多变"></a>查询模式不确定或多变</h3><p>如果表的查询模式不确定或经常变化，创建索引的效果可能无法持续优化查询性能，反而可能带来不必要的维护开销。在查询模式稳定前，不要急于创建索引，先观察和分析实际查询情况，再决定是否需要索引。</p><h3 id="索引过多导致的维护开销"><a href="#索引过多导致的维护开销" class="headerlink" title="索引过多导致的维护开销"></a>索引过多导致的维护开销</h3><p>一个表上创建过多的索引会增加插入、更新和删除操作的开销，因为每次数据修改都需要更新所有相关的索引。此外，过多的索引也会占用更多的存储空间。合理规划和管理索引数量，避免创建过多的冗余索引。</p><h3 id="使用不当的复合索引"><a href="#使用不当的复合索引" class="headerlink" title="使用不当的复合索引"></a>使用不当的复合索引</h3><p>复合索引是指在多个列上创建的索引。如果查询中未使用索引的前导列，索引可能不会被使用，从而无法发挥其优化作用。在创建复合索引时，确保查询中会使用到索引的前导列，否则应重新考虑索引的设计。</p></blockquote><h1 id="Mysql常见索引失效的情况"><a href="#Mysql常见索引失效的情况" class="headerlink" title="Mysql常见索引失效的情况"></a>Mysql常见索引失效的情况</h1><blockquote><h3 id="使用函数或表达式"><a href="#使用函数或表达式" class="headerlink" title="使用函数或表达式"></a>使用函数或表达式</h3><p>在索引列上使用函数或表达式（如UPPER(column)、column + 1）会导致索引失效。</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>当查询条件中的数据类型与索引列的数据类型不匹配时，MySQL 可能会进行隐式类型转换，从而导致索引失效。</p><h3 id="使用OR条件"><a href="#使用OR条件" class="headerlink" title="使用OR条件"></a>使用OR条件</h3><p>如果OR条件中的列没有索引或无法同时使用索引，也会导致索引失效。</p><h3 id="前导模糊查询："><a href="#前导模糊查询：" class="headerlink" title="前导模糊查询："></a>前导模糊查询：</h3><p>在 LIKE 查询中，如果模式以通配符（如%）开头，索引将失效。</p><h3 id="不等于操作"><a href="#不等于操作" class="headerlink" title="不等于操作"></a>不等于操作</h3><p>使用不等于操作符（如!=或&lt;&gt;）通常会导致索引失效。</p><h3 id="范围条件后再使用等值条件"><a href="#范围条件后再使用等值条件" class="headerlink" title="范围条件后再使用等值条件"></a>范围条件后再使用等值条件</h3><p>复合索引中，如果使用了范围条件（如&lt;、&gt;、BETWEEN），后面的等值条件可能无法使用索引。</p><h3 id="不满足最左前缀原则"><a href="#不满足最左前缀原则" class="headerlink" title="不满足最左前缀原则"></a>不满足最左前缀原则</h3><p>对于复合索引，查询条件必须满足最左前缀原则，否则索引将失效。</p><h3 id="查询条件中包含负向查询"><a href="#查询条件中包含负向查询" class="headerlink" title="查询条件中包含负向查询"></a>查询条件中包含负向查询</h3><p>例如NOT IN、NOT LIKE等负向查询条件会导致索引失效。</p><h3 id="数据分布不均匀"><a href="#数据分布不均匀" class="headerlink" title="数据分布不均匀"></a>数据分布不均匀</h3><p>即使有索引，如果数据分布非常不均匀，MySQL 优化器可能会选择全表扫描而不是使用索引。</p></blockquote><h1 id="唯一索引比普通索引快吗"><a href="#唯一索引比普通索引快吗" class="headerlink" title="唯一索引比普通索引快吗"></a>唯一索引比普通索引快吗</h1><blockquote><p>在数据库中，唯一索引和普通索引在性能上的差异主要体现在插入和更新操作上，而不是查询操作上。</p><h3 id="唯一索引与普通索引的区别"><a href="#唯一索引与普通索引的区别" class="headerlink" title="唯一索引与普通索引的区别"></a>唯一索引与普通索引的区别</h3><p><strong>唯一索引（Unique Index）</strong>：保证索引列中的值是唯一的，即不允许重复值。数据库系统在插入或更新数据时，会检查索引列的值是否已经存在，如果存在则会拒绝该操作。</p><p><strong>普通索引（Non-Unique Index）</strong>：不强制索引列中的值唯一，可以有重复值。插入和更新操作不需要进行唯一性检查。</p><h3 id="查询性能"><a href="#查询性能" class="headerlink" title="查询性能"></a>查询性能</h3><p>对于查询操作，唯一索引和普通索引的性能通常是相似的，因为查询操作主要依赖于索引结构（如 B+ 树或哈希表）来快速定位数据。无论是唯一索引还是普通索引，查询操作的复杂度和效率主要取决于索引的深度和数据分布情况。</p><h3 id="插入和更新性能"><a href="#插入和更新性能" class="headerlink" title="插入和更新性能"></a>插入和更新性能</h3><p><strong>唯一索引</strong>：需要进行唯一性检查，以确保新插入或更新的数据不会违反唯一性约束。这意味着每次插入或更新操作都需要额外的步骤来检查索引列中的值是否已经存在，这会增加一定的开销。</p><p><strong>普通索引</strong>：不需要进行唯一性检查，只需插入或更新索引数据即可。由于没有额外的唯一性检查步骤，插入和更新操作通常会比唯一索引更快。</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作对唯一索引和普通索引的性能影响较小，因为删除操作通常只涉及到从索引中移除数据，而不需要进行额外的检查。</p></blockquote><h1 id="A-B-C三个字段组成联合索引，AB-AC-BC三种情况下查询是否能命中索引？"><a href="#A-B-C三个字段组成联合索引，AB-AC-BC三种情况下查询是否能命中索引？" class="headerlink" title="A,B,C三个字段组成联合索引，AB,AC,BC三种情况下查询是否能命中索引？"></a>A,B,C三个字段组成联合索引，AB,AC,BC三种情况下查询是否能命中索引？</h1><blockquote><p>在数据库中，联合索引（也称为<strong>复合索引</strong>）是由多个列组成的单个索引。假设我们有一个包含字段 A、B 和 C 的联合索引(A, B, C)，我们来分析在不同情况下查询是否能命中索引。</p><h3 id="联合索引的基本原则"><a href="#联合索引的基本原则" class="headerlink" title="联合索引的基本原则"></a>联合索引的基本原则</h3><ol><li><strong>最左前缀原则</strong>：联合索引会按照定义的字段顺序进行排序。查询必须从联合索引的最左边开始，才能利用索引。</li><li><strong>连续性原则</strong>：如果跳过了联合索引中的某个字段，那么索引在跳过的字段之后就无法继续利用。</li></ol><h3 id="查询情况分析"><a href="#查询情况分析" class="headerlink" title="查询情况分析"></a>查询情况分析</h3><p>假设我们有一个联合索引(A, B, C)，我们来分析以下几种查询情况是否能命中索引：</p><h4 id="1-查询条件为-A-B"><a href="#1-查询条件为-A-B" class="headerlink" title="1. 查询条件为(A, B)"></a>1. 查询条件为(A, B)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> A <span class="operator">=</span> ? <span class="keyword">AND</span> B <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><p><strong>能命中索引</strong>：这个查询条件从最左边开始使用联合索引的前两个字段(A, B)，因此可以利用索引。</p><h4 id="2-查询条件为-A-C"><a href="#2-查询条件为-A-C" class="headerlink" title="2. 查询条件为(A, C)"></a>2. 查询条件为(A, C)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> A <span class="operator">=</span> ? <span class="keyword">AND</span> C <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><h4 id="3-查询条件为-B-C"><a href="#3-查询条件为-B-C" class="headerlink" title="3. 查询条件为(B, C)"></a>3. 查询条件为(B, C)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> B <span class="operator">=</span> ? <span class="keyword">AND</span> C <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><p><strong>不能命中索引</strong>：查询条件没有从联合索引的最左边字段A开始，因此不能利用联合索引(A, B, C)。</p><h3 id="其他查询情况"><a href="#其他查询情况" class="headerlink" title="其他查询情况"></a>其他查询情况</h3><h4 id="4-查询条件为-A"><a href="#4-查询条件为-A" class="headerlink" title="4. 查询条件为(A)"></a>4. 查询条件为(A)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> A <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><p><strong>能命中索引</strong>：查询条件只包含了联合索引的第一个字段A，可以完全利用索引。</p><h4 id="5-查询条件为-B"><a href="#5-查询条件为-B" class="headerlink" title="5. 查询条件为(B)"></a>5. 查询条件为(B)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> B <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><p><strong>不能命中索引</strong>：查询条件没有包含联合索引的最左边字段A，因此不能利用联合索引(A, B, C)。</p><h4 id="6-查询条件为-A-B-C"><a href="#6-查询条件为-A-B-C" class="headerlink" title="6. 查询条件为(A, B, C)"></a>6. 查询条件为(A, B, C)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> A <span class="operator">=</span> ? <span class="keyword">AND</span> B <span class="operator">=</span> ? <span class="keyword">AND</span> C <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><p><strong>能命中索引</strong>：查询条件包含了联合索引的所有字段(A, B, C)，可以完全利用索引。</p><div class="table-container"><table><thead><tr><th style="text-align:center">查询条件</th><th style="text-align:center">是否命中索引</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">(A, B)</td><td style="text-align:center">是</td><td style="text-align:center">完全匹配联合索引的前缀部分。</td></tr><tr><td style="text-align:center">(A)</td><td style="text-align:center">是</td><td style="text-align:center">只使用了联合索引的第一列，可以命中。</td></tr><tr><td style="text-align:center">(A, B, C)</td><td style="text-align:center">是</td><td style="text-align:center">完全匹配整个联合索引。</td></tr><tr><td style="text-align:center">(A, C)</td><td style="text-align:center">部分</td><td style="text-align:center">能够利用索引中A的部分，但C不在B之后直接出现，因此只能部分利用索引。</td></tr><tr><td style="text-align:center">(B, C)</td><td style="text-align:center">否</td><td style="text-align:center">没有从最左边开始连续匹配索引定义，故无法利用索引。</td></tr><tr><td style="text-align:center">(B)</td><td style="text-align:center">否</td><td style="text-align:center">未包含联合索引中最左侧的列A，所以不能利用索引。</td></tr></tbody></table></div></blockquote><h1 id="B-树索引和哈希索引的区别"><a href="#B-树索引和哈希索引的区别" class="headerlink" title="B+树索引和哈希索引的区别"></a>B+树索引和哈希索引的区别</h1><blockquote><h3 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h3><p>B+树是一种<strong>平衡树</strong>数据结构，所有数据都存储在叶节点上，叶节点通过指针相连形成一个链表。内部节点只存储键值和子节点指针。</p><p>在B+树上的常规检索，从根节点到叶子节点的搜索效率基本相当，不会出现大幅波动，而且基于索引的顺序扫描时，也可以利用双向指针快速左右移动，效率非常高。</p><p>B+树的高度较低，通常为2到4层，因此查找操作的时间复杂度为 O(log n)。</p><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p><strong>有序性</strong>：B+树索引中的数据是有序的，适合范围查询（如BETWEEN、&lt;、&gt;等）。</p><p><strong>节点分裂和合并</strong>：在插入和删除数据时，B+树会保持平衡，通过节点的分裂和合并来维持树的高度。</p><p><strong>磁盘友好</strong>：B+树节点的大小通常与磁盘页大小匹配，减少磁盘 I/O 操作次数。</p><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引基于<strong>哈希表</strong>实现，通过哈希函数将键值映射到哈希表中的位置。哈希表中的每个位置存储一个指向数据记录的指针。</p><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><p><strong>无序性</strong>：哈希索引中的数据是无序的，不适合范围查询。</p><p><strong>高效等值查询</strong>：哈希索引对于等值查询（如=、IN）非常高效，查找时间复杂度为 O(1)。</p><p><strong>冲突处理</strong>：可能会发生哈希冲突，需要通过链表或其他方法来解决冲突。</p><p><strong>内存友好</strong>：通常哈希索引会将哈希表存储在内存中，以提高访问速度。</p><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>适合等值查询非常频繁的场景。</p><p>不适合需要范围查询或排序的场景。</p><p>适合单字段查询，不适合多字段组合查询。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><div class="table-container"><table><thead><tr><th>特性</th><th>B+树索引</th><th>哈希索引</th></tr></thead><tbody><tr><td>结构</td><td>基于平衡树结构，数据有序。</td><td>基于哈希表结构，数据无序。</td></tr><tr><td>查询性能</td><td>支持等值查询和范围查询；查找时间复杂度为 O(log n)。</td><td>等值查询性能高；查找时间复杂度为 O(1)，不支持范围查询。</td></tr><tr><td>适用场景</td><td>适合范围查询、排序操作以及多字段组合查询。</td><td>适合高频等值查询；不适合范围查询及排序操作。</td></tr><tr><td>维护成本</td><td>插入和删除时需维护树的平衡状态，可能涉及节点分裂或合并。</td><td>插入和删除相对简单，但需处理哈希冲突问题。</td></tr><tr><td>存储方式</td><td>通常存储在磁盘上，且节点大小设计以匹配磁盘页大小。</td><td>一般位于内存中，以此来加速数据访问过程。</td></tr></tbody></table></div><p>如果应用场景中需要频繁的范围查询、排序操作或多字段组合查询，选择 B+树索引。</p><p>如果应用场景中等值查询非常频繁且不需要范围查询或排序操作，选择哈希索引。</p></blockquote><h1 id="为什么说B-比B树更适合实际应用中作为数据库索引？"><a href="#为什么说B-比B树更适合实际应用中作为数据库索引？" class="headerlink" title="为什么说B+比B树更适合实际应用中作为数据库索引？"></a>为什么说B+比B树更适合实际应用中作为数据库索引？</h1><blockquote><h3 id="范围查询效率更高"><a href="#范围查询效率更高" class="headerlink" title="范围查询效率更高"></a>范围查询效率更高</h3><p>B树的数据存储在内节点和叶节点中，范围查询需要遍历多个节点，效率较低。B+树所有数据都存储在叶节点中，叶节点通过链表相连，形成一个有序的链表。这种结构使得范围查询和顺序访问非常高效，只需遍历叶节点链表即可完成范围查询。</p><h3 id="内存和磁盘I-O效率更高"><a href="#内存和磁盘I-O效率更高" class="headerlink" title="内存和磁盘I/O效率更高"></a>内存和磁盘I/O效率更高</h3><p>B树数据存储在所有节点中，内存使用较为分散，内节点和叶节点都存储数据，导致更多的磁盘I/O操作。</p><p>B+树内节点只存储索引键和指针，数据集中存储在叶节点中。这种结构使得内节点更小，可以在内存中存储更多的内节点，减少磁盘I/O操作，提高查询效率。</p><h3 id="树的高度更低、更均匀"><a href="#树的高度更低、更均匀" class="headerlink" title="树的高度更低、更均匀"></a>树的高度更低、更均匀</h3><p>B树叶节点不一定在同一层，可能会导致树的高度不均匀，增加查询的复杂度。B+树所有叶节点都在同一层，树的高度更加均匀。更低、更均匀的树高意味着更少的磁盘I/O操作，查询效率更高。</p><h3 id="更适合数据库的插入和删除操作"><a href="#更适合数据库的插入和删除操作" class="headerlink" title="更适合数据库的插入和删除操作"></a>更适合数据库的插入和删除操作</h3><p>B树插入和删除操作可能会导致内节点和叶节点的分裂和合并，影响树的平衡性。</p><p>B+树插入和删除操作主要影响叶节点，内节点的结构相对稳定。叶节点通过链表相连，插入和删除操作在叶节点上进行，不会影响内节点的平衡性。</p><h3 id="更高的空间利用率"><a href="#更高的空间利用率" class="headerlink" title="更高的空间利用率"></a>更高的空间利用率</h3><p>B树：由于数据存储在所有节点中，内节点和叶节点的空间利用率较低。B+树：内节点只存储索引键和指针，空间利用率更高。叶节点通过链表相连，可以更高效地利用磁盘空间。</p></blockquote><h1 id="Mysql分库分表"><a href="#Mysql分库分表" class="headerlink" title="Mysql分库分表"></a>Mysql分库分表</h1><blockquote><h3 id="垂直分表（Vertical-Sharding）"><a href="#垂直分表（Vertical-Sharding）" class="headerlink" title="垂直分表（Vertical Sharding）"></a>垂直分表（Vertical Sharding）</h3><p>将一个大的表按照列拆分成多个较小的表，每个表只包含部分列。根据业务关系，将不同业务字段的数据分散到不同的表中。例如，用户信息和订单信息可以拆分为用户表和订单表，每个表都只包含其相应的字段。</p><p>垂直拆分后业务清晰，数据维护简单。减少了I/O、锁争用和查询的字段数，提高了查询性能。</p><p>不过如果单表的数据量、读写压力大，垂直分表可能无法解决问题。部分业务可能无法直接通过 SQL 关联查询，增加了开发复杂度。</p><p>举一个例子，原有的一张用户表，user 表，里面有 ID，name，sex，drive_lincense。</p><p>像这种情况如果要做到垂直分表，就拆成，user 表和 user_ext 表。drive_lincense 这种信息输入附属的不重要的信息，就可以放在user_ext 内。</p><h3 id="水平分表（Horizontal-Sharding）"><a href="#水平分表（Horizontal-Sharding）" class="headerlink" title="水平分表（Horizontal Sharding）"></a>水平分表（Horizontal Sharding）</h3><p>将一个大的表按照某个字段的取值范围或哈希值拆分成多个较小的表，每个表存储部分数据。根据业务需求和数据量的分布情况选择合适的字段进行分片。例如，订单表可以按照订单创建时间或订单ID的哈希值拆分为多个表。</p><p>这种方式解决了单一表数据量过大的问题，提高了系统性能和可扩展性。但是增加了跨表查询的复杂性。需要考虑数据路由和跨库查询优化。</p><h3 id="分库分表联合使用"><a href="#分库分表联合使用" class="headerlink" title="分库分表联合使用"></a>分库分表联合使用</h3><p>同时进行分库和分表操作，将数据分散到多个数据库和表中。根据业务需求，将数据拆分为多个数据库。在每个数据库中，再根据业务或数据量情况进行水平或垂直分表。</p><h3 id="实现注意事项"><a href="#实现注意事项" class="headerlink" title="实现注意事项"></a>实现注意事项</h3><p><strong>数据分片策略</strong>：选择合适的分片策略对数据库进行分库分表操作，例如按照用户ID、订单创建时间等字段进行分片。</p><p><strong>数据访问路由</strong>：通过中间件（如 MyCAT、ShardingSphere、Cobar 等）来实现数据访问的路由和分片规则的管理。</p><p><strong>跨库查询优化</strong>：优化跨库查询，减少跨库查询的次数和复杂度，提高查询效率。</p></blockquote><h1 id="mysql主从同步原理"><a href="#mysql主从同步原理" class="headerlink" title="mysql主从同步原理"></a>mysql主从同步原理</h1><blockquote><p>MySQL 主从同步（Replication）是一种将数据从一个 MySQL 数据库服务器（称为主服务器）复制到一个或多个 MySQL 数据库服务器（称为从服务器）的过程。这种机制通常用于提高数据冗余、负载均衡和数据备份。</p><p>主从同步的核心原理是将主服务器上的二进制日志复制到从服务器，并在从服务器上执行这些日志中的操作。相对于传输大量的SQL语句，只传输二进制日志可以节省网络带宽，提高同步性能。</p><p><img src="/posts/54e1373e/image-20250430162226942.png" alt="image-20250430162226942"></p><h3 id="主服务器（Master）"><a href="#主服务器（Master）" class="headerlink" title="主服务器（Master）"></a>主服务器（Master）</h3><p>主服务器负责处理写入操作（INSERT、UPDATE、DELETE 等）并记录这些操作的日志（称为二进制日志，Binary Log）。</p><h3 id="二进制日志（Binary-Log）"><a href="#二进制日志（Binary-Log）" class="headerlink" title="二进制日志（Binary Log）"></a>二进制日志（Binary Log）</h3><p>在主服务器上，每次数据更改操作都会被记录到二进制日志文件中。二进制日志包含了所有对数据库进行的更改操作的详细记录。</p><h3 id="从服务器（Slave）"><a href="#从服务器（Slave）" class="headerlink" title="从服务器（Slave）"></a>从服务器（Slave）</h3><p>从服务器连接到主服务器，并从主服务器获取二进制日志。它会将这些日志应用到自己的数据库中，以保持与主服务器的数据一致。</p><h3 id="中继日志（Relay-Log）"><a href="#中继日志（Relay-Log）" class="headerlink" title="中继日志（Relay Log）"></a>中继日志（Relay Log）</h3><p>从服务器将从主服务器获取的二进制日志写入到中继日志文件中，然后再从中继日志中读取并应用这些更改。</p><h3 id="复制过程"><a href="#复制过程" class="headerlink" title="复制过程"></a>复制过程</h3><h4 id="1、-主服务器记录更改到二进制日志"><a href="#1、-主服务器记录更改到二进制日志" class="headerlink" title="1、 主服务器记录更改到二进制日志"></a>1、 主服务器记录更改到二进制日志</h4><p>当主服务器上的数据发生更改时，这些更改会被记录到二进制日志文件中。</p><h4 id="2、从服务器读取二进制日志"><a href="#2、从服务器读取二进制日志" class="headerlink" title="2、从服务器读取二进制日志"></a>2、从服务器读取二进制日志</h4><p>从服务器上的 I/O 线程负责连接到主服务器并读取二进制日志，将其写入到从服务器上的中继日志文件中。中继日志可以作为主服务器的副本。</p><h4 id="3、从服务器应用中继日志"><a href="#3、从服务器应用中继日志" class="headerlink" title="3、从服务器应用中继日志"></a>3、从服务器应用中继日志</h4><p>从服务器上的 SQL 线程读取中继日志文件，并将其中的更改应用到从服务器的数据库中。这样就和主服务器保持了一致。在这个过程中，会生成一个称为复制事件（Replication Event）的记录，并将其更新到主服务器上的复制信息表中。这个复制事件包含了从服务器接收和应用二进制日志事件的相关信息。</p><h4 id="4、心跳检查"><a href="#4、心跳检查" class="headerlink" title="4、心跳检查"></a>4、心跳检查</h4><p>主服务器和从服务器之间会定期进行心跳检查，以确保连接的正常和可靠性。如果从服务器在一定时间内没有收到来自主服务器的二进制日志事件，或者发生连接错误，它将尝试重新连接主服务器并继续复制过程。</p><h3 id="复制如何配置"><a href="#复制如何配置" class="headerlink" title="复制如何配置"></a>复制如何配置</h3><h4 id="配置主服务器"><a href="#配置主服务器" class="headerlink" title="配置主服务器"></a>配置主服务器</h4><p>启用二进制日志记录（在my.cnf文件中设置log_bin），设置服务器唯一 ID（在my.cnf文件中设置server-id）。</p><p><img src="/posts/54e1373e/image-20250430162246060.png" alt="image-20250430162246060"></p><h4 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h4><p>设置服务器唯一 ID（在my.cnf文件中设置server-id）。</p><p>配置从服务器连接到主服务器（使用CHANGE MASTER TO语句）。</p><p>启动从服务器的复制线程（使用START SLAVE语句）。</p><p><img src="/posts/54e1373e/image-20250430162308364.png" alt="image-20250430162308364"></p></blockquote><h1 id="mysql主从同步延迟的原因和解决办法"><a href="#mysql主从同步延迟的原因和解决办法" class="headerlink" title="mysql主从同步延迟的原因和解决办法"></a>mysql主从同步延迟的原因和解决办法</h1><blockquote><p>MySQL 主从同步延迟（Replication Lag）是指从服务器与主服务器之间的数据复制存在时间差，导致从服务器上的数据不够新鲜。这种延迟可能会影响应用程序的性能和数据一致性。</p><h3 id="延迟原因"><a href="#延迟原因" class="headerlink" title="延迟原因"></a>延迟原因</h3><p><strong>主服务器负载过高</strong>：主服务器的高负载会影响二进制日志的生成和发送速度，从而导致从服务器的延迟。</p><p><strong>从服务器性能瓶颈</strong>：从服务器的硬件资源（如 CPU、内存、磁盘 I/O）不足，导致处理中继日志的速度慢。</p><p><strong>网络延迟</strong>：主从服务器之间的网络延迟或带宽不足，会影响二进制日志的传输速度。</p><p><strong>大事务</strong>：大事务（如批量插入或更新）会生成大量的二进制日志，从而增加从服务器的处理时间。</p><p><strong>从服务器上的锁争用</strong>：从服务器在应用中继日志时，可能会遇到锁争用问题，导致延迟。</p><p><strong>配置不当</strong>：MySQL 配置不当（如缓冲区大小、线程数等）会影响复制性能。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>优化主服务器性能</strong>：减轻主服务器的负载，减少不必要的查询。可以使用缓存来减少数据库查询次数。</p><p><strong>提升从服务器性能</strong>：升级从服务器的硬件资源，如增加 CPU 核心数、内存容量和磁盘 I/O 性能，确保从服务器的配置（如innodb_buffer_pool_size、innodb_log_file_size）适合其硬件资源。</p><p><strong>优化网络性能</strong>：确保主从服务器之间的网络连接稳定且带宽充足。使用低延迟、高带宽的网络连接。</p><p><strong>拆分大事务</strong>：将大事务拆分为多个小事务，以减少单个事务的处理时间。</p><p><strong>调整复制配置</strong>：增加从服务器上的 I/O 线程和 SQL 线程数量（适用于 MySQL 8.0 及更高版本），调整slave_parallel_workers参数以启用并行复制。</p><p><strong>监控和调整锁争用</strong>：使用监控工具（如SHOW PROCESSLIST、SHOW ENGINE INNODB STATUS）监控锁争用情况，并优化应用程序的锁使用策略。</p><p><strong>使用半同步复制</strong>：启用半同步复制（Semi-Synchronous Replication），确保主服务器在提交事务后等待至少一个从服务器确认已收到二进制日志，从而减少延迟。</p></blockquote><h1 id="mysql的全复制、半复制、异步复制"><a href="#mysql的全复制、半复制、异步复制" class="headerlink" title="mysql的全复制、半复制、异步复制"></a>mysql的全复制、半复制、异步复制</h1><blockquote><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>MySQL 默认使用异步复制。主服务器（Master）在提交事务后，不需要等待从服务器（Slave）的确认，事务即被认为完成。由于主服务器不需要等待从服务器的响应，性能较好。存在复制延迟的可能性，因为从服务器可能会滞后于主服务器。这种方式可以理解为主提交完之后，不确保是否从都收到了，直接成功。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>主服务器将事务写入二进制日志（binlog）。从服务器读取主服务器的二进制日志，并将其应用到自己的数据副本中。注意：一会对比看到其他的方式，你会发现本方式不需要任何回应。主要适用于对数据一致性要求不高，但对性能要求较高的场景或者读操作较多的应用，通过读写分离提高性能。</p><h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3><p>在主服务器提交事务时，至少需要等待一个从服务器确认已经接收到并写入中继日志（relay log）后，事务才被认为完成。相对于异步复制，性能稍有下降，因为主服务器需要等待从服务器的确认。减少了数据丢失的风险，但仍然存在一定的复制延迟。</p><p><img src="/posts/54e1373e/image-20250430162737239.png" alt="image-20250430162737239"></p><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><p>主服务器将事务写入二进制日志。主服务器等待至少一个从服务器确认已接收到该事务并写入中继日志。收到确认后，主服务器才向客户端确认事务提交成功。适用于需要较高的数据一致性，但仍希望有较好的性能。</p><h3 id="全同步复制"><a href="#全同步复制" class="headerlink" title="全同步复制"></a>全同步复制</h3><p>在主服务器提交事务时，必须等待所有从服务器确认已经接收到并应用了该事务后，事务才被认为完成。性能较差，因为主服务器需要等待所有从服务器的确认。延迟较高，但保证了数据的一致性和可靠性。</p><p><img src="/posts/54e1373e/image-20250430162815118.png" alt="image-20250430162815118"></p><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>主服务器将事务写入二进制日志。主服务器等待所有从服务器确认已接收到并应用了该事务。收到所有确认后，主服务器才向客户端确认事务提交成功。</p><h4 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h4><p>对数据一致性要求极高且可以容忍较高延迟的场景。适用于极端关键的数据系统，如某些金融系统、军事系统等。</p></blockquote><h1 id="drop-delete与truncate的区别"><a href="#drop-delete与truncate的区别" class="headerlink" title="drop,delete与truncate的区别"></a>drop,delete与truncate的区别</h1><blockquote><h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><p>DROP用于删除数据库对象，如表、视图、索引等。可以删除表、数据库、视图、索引等。</p><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><p>完全删除表及其所有数据。删除表后，表的结构和数据都将永久消失，且无法恢复（除非有备份）。不会触发DELETE触发器。无法回滚（不可逆操作）。</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>DELETE用于删除表中符合条件的行。只能删除表中的数据行。</p><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><p>可以通过WHERE子句指定删除哪些行，如果没有WHERE子句，将删除表中所有行，但表结构和索引保留。删除操作会记录在事务日志中，因此可以回滚（可逆操作）。可以触发DELETE触发器。相对较慢，因为每行删除操作都会记录在日志中，并且需要考虑事务处理。</p><h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3><p>TRUNCATE用于快速删除表中的所有行。直接操作表中的所有数据行。</p><h4 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h4><p>删除所有行，但保留表结构及其列、索引等元数据。比DELETE快，因为它不逐行删除数据，而是直接释放数据页。无法回滚（不可逆操作），但在某些数据库系统中，TRUNCATE可能被视为DDL操作，具体行为取决于数据库系统的实现。重置自增列（AUTO_INCREMENT）计数器。</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作对象</th><th style="text-align:center">是否可回滚</th><th style="text-align:center">性能</th><th style="text-align:center">触发器</th></tr></thead><tbody><tr><td style="text-align:center">DROP</td><td style="text-align:center">不可回滚</td><td style="text-align:center">通常比DELETE快，因为它不逐行处理数据。</td><td style="text-align:center">不会触发DELETE触发器</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">可回滚</td><td style="text-align:center">较慢，特别是当删除大量数据时，因为每行操作都会被记录在日志中。</td><td style="text-align:center">会触发DELETE触发器</td></tr><tr><td style="text-align:center">TRUNCATE</td><td style="text-align:center">通常不可回滚（视数据库实现而定）</td><td style="text-align:center">通常比DELETE快，因为它不逐行处理数据。</td><td style="text-align:center">不会触发DELETE触发器</td></tr></tbody></table></div></blockquote><h1 id="多版本并发控制MVCC"><a href="#多版本并发控制MVCC" class="headerlink" title="多版本并发控制MVCC"></a>多版本并发控制MVCC</h1><blockquote><p>MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照（隔离级别RC下），所以MVCC为数据库解决了以下问题：</p><p>在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能。</p><p>解决脏读、幻读、不可重复读等事务隔离问题，但是不能解决更新丢失问题。</p><h3 id="MVCC-的工作原理"><a href="#MVCC-的工作原理" class="headerlink" title="MVCC 的工作原理"></a>MVCC 的工作原理</h3><p>MVCC 通过在数据库中存储每个数据行的多个版本来实现并发控制。每个事务在读取数据时，可以看到一个一致性快照，而不会被其他事务的并发修改所干扰。这种机制主要依赖于以下几个核心概念：</p><p><strong>版本控制</strong>：每个数据行都有多个版本，每个版本与一个特定的事务相关联。每次数据行被修改时，都会创建一个新版本，而旧版本则被保留。</p><p><strong>事务快照</strong>：每个事务在开始时都会获取一个一致性快照，这个快照包含了事务开始时数据库的状态。事务在执行期间，只能看到属于这个快照的数据版本，而不会看到其他事务提交的修改。</p><p><strong>事务ID</strong>：每个事务都有一个唯一的事务ID，用于标识事务的开始和结束时间。事务ID 用于确定哪些数据版本对当前事务可见。</p><p><strong>可见性规则</strong>：数据库系统使用事务ID 和版本号来决定哪些数据版本对当前事务可见。通常，事务只能看到在其开始之前已经提交的版本，而看不到在其开始之后创建的版本。</p><h3 id="MVCC-的优势"><a href="#MVCC-的优势" class="headerlink" title="MVCC 的优势"></a>MVCC 的优势</h3><p><strong>提高并发性</strong>：MVCC 允许多个事务同时读取和写入数据，而不会相互阻塞。这大大提高了数据库的并发性和性能。</p><p><strong>减少锁争用</strong>：由于每个事务在读取数据时不需要加锁，MVCC 减少了锁争用和死锁的可能性。</p><p><strong>一致性视图</strong>：每个事务在开始时获取一致性快照，确保在整个事务期间看到的数据是一致的。</p><h3 id="MVCC-的实现细节"><a href="#MVCC-的实现细节" class="headerlink" title="MVCC 的实现细节"></a>MVCC 的实现细节</h3><p>不同的数据库系统对 MVCC 的实现细节有所不同，但通常包括以下几个方面：</p><p><strong>版本链</strong>：每个数据行维护一个版本链，链中的每个节点表示一个版本。每个版本包含数据行的值、创建该版本的事务ID 和删除该版本的事务ID（如果适用）。</p><p><strong>垃圾回收</strong>：随着时间的推移，旧的版本会变得不再需要。数据库系统需要定期进行垃圾回收，删除不再需要的旧版本，以释放存储空间。</p><p><strong>快照隔离</strong>：MVCC 通常与快照隔离级别结合使用，确保事务在执行期间看到一致的快照。快照隔离级别是介于可重复读和串行化之间的一种隔离级别。</p></blockquote><h1 id="MVCC作用"><a href="#MVCC作用" class="headerlink" title="MVCC作用"></a>MVCC作用</h1><blockquote><h3 id="提高并发性"><a href="#提高并发性" class="headerlink" title="提高并发性"></a>提高并发性</h3><p>MVCC 允许多个事务同时执行读写操作，而无需互相阻塞或等待。这极大地提高了数据库的并发处理能力，特别是在高并发环境中。</p><h3 id="减少锁争用"><a href="#减少锁争用" class="headerlink" title="减少锁争用"></a>减少锁争用</h3><p>在传统的锁机制中，读写操作需要加锁，容易导致锁争用和死锁问题。MVCC 通过版本控制，使得读取操作不需要加锁，从而减少了锁争用的频率。</p><h3 id="提供一致性视图"><a href="#提供一致性视图" class="headerlink" title="提供一致性视图"></a>提供一致性视图</h3><p>MVCC 为每个事务提供一个一致性的快照视图，使得事务在执行过程中看到的数据是固定的，不会受到其他并发事务的影响。这简化了应用程序的开发，因为开发者无需担心数据在事务执行过程中发生变化。</p><h3 id="避免读写冲突"><a href="#避免读写冲突" class="headerlink" title="避免读写冲突"></a>避免读写冲突</h3><p>在 MVCC 中，读操作不会阻塞写操作，写操作也不会阻塞读操作。这避免了读写冲突，提高了系统的整体性能和响应速度。</p><h3 id="减少死锁"><a href="#减少死锁" class="headerlink" title="减少死锁"></a>减少死锁</h3><p>由于读操作不需要加锁，MVCC 减少了死锁的可能性。死锁通常发生在多个事务互相等待资源释放的情况下，而 MVCC 的无锁读操作减少了这种情况发生的机会。</p><h3 id="提高读性能"><a href="#提高读性能" class="headerlink" title="提高读性能"></a>提高读性能</h3><p>MVCC 提供了无锁的读操作，读操作直接读取数据的快照版本，不需要等待其他事务完成。这极大地提高了读操作的性能，尤其是在读操作频繁的场景下。</p><h3 id="实现更高的隔离级别"><a href="#实现更高的隔离级别" class="headerlink" title="实现更高的隔离级别"></a>实现更高的隔离级别</h3><p>MVCC 支持实现更高的隔离级别，如快照隔离（Snapshot Isolation），在这种隔离级别下，事务可以看到一个一致的快照视图，同时避免了脏读和不可重复读等问题。</p><p>假设有一个银行账户表accounts：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| id | balance|</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 1000   |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><h4 id="场景-1：高并发读写"><a href="#场景-1：高并发读写" class="headerlink" title="场景 1：高并发读写"></a>场景 1：高并发读写</h4><ul><li>事务 A：读取账户余额</li><li>事务 B：更新账户余额</li></ul><p>在传统的锁机制下，事务 A 和事务 B 可能会互相阻塞。然而在 MVCC 中：</p><ol><li>事务 A 开始，读取balance = 1000。</li><li>事务 B 开始，更新balance为 1200。</li><li>事务 A 继续读取，仍然看到balance = 1000。</li><li>事务 B 提交后，新的事务可以看到balance = 1200。</li></ol><p>这种情况下，事务 A 和事务 B 可以并发执行，互不影响。</p><h4 id="场景-2：避免读写冲突"><a href="#场景-2：避免读写冲突" class="headerlink" title="场景 2：避免读写冲突"></a>场景 2：避免读写冲突</h4><ul><li>事务 C：读取账户余额</li><li>事务 D：更新账户余额</li></ul><p>在 MVCC 中：</p><ol><li>事务 C 开始，读取balance = 1000。</li><li>事务 D 开始，更新balance为 1500。</li><li>事务 D 提交后，新的事务可以看到balance = 1500。</li><li>事务 C 继续读取，仍然看到balance = 1000。</li></ol><p>通过 MVCC，读取操作和写入操作可以并发执行，避免了读写冲突。</p></blockquote><h1 id="MySQL中有哪几种锁"><a href="#MySQL中有哪几种锁" class="headerlink" title="MySQL中有哪几种锁"></a>MySQL中有哪几种锁</h1><blockquote><h3 id="表级锁（Table-Locks）"><a href="#表级锁（Table-Locks）" class="headerlink" title="表级锁（Table Locks）"></a>表级锁（Table Locks）</h3><p><strong>表锁（Table Lock）</strong>：表级锁是对整个表进行加锁。它有两种类型：</p><ul><li><strong>读锁（Read Lock）</strong>：多个事务可以同时对表加读锁，但不能对表进行写操作。</li><li><strong>写锁（Write Lock）</strong>：当一个事务对表加写锁时，其他事务不能对该表进行读或写操作。</li></ul><p>表锁的优点是实现简单，开销较小，但在高并发情况下可能会导致较多的锁等待和性能瓶颈。</p><h3 id="行级锁（Row-Locks）"><a href="#行级锁（Row-Locks）" class="headerlink" title="行级锁（Row Locks）"></a>行级锁（Row Locks）</h3><p>行级锁是对单行记录进行加锁，适用于 InnoDB 存储引擎。它的粒度更细，可以提高并发性能。行级锁主要有两种类型：</p><p><strong>共享锁（Share Lock，S 锁）</strong>：允许事务读取一行数据，但不允许修改。其他事务也可以获得该行的共享锁。</p><p><strong>排他锁（Exclusive Lock，X 锁）</strong>：允许事务读取和修改一行数据，但不允许其他事务获取该行的任何锁。</p><h3 id="间隙锁（Gap-Locks）"><a href="#间隙锁（Gap-Locks）" class="headerlink" title="间隙锁（Gap Locks）"></a>间隙锁（Gap Locks）</h3><p>间隙锁是 InnoDB 存储引擎特有的锁，用于防止幻读现象。间隙锁不仅锁定现有的行，还锁定一个范围内的间隙，以防止其他事务在这个间隙内插入新行。</p><p><strong>间隙锁（Gap Lock）</strong>：锁定一个范围内的间隙，但不锁定间隙中的行。</p><p><strong>临键锁（Next-Key Lock）</strong>：是行锁和间隙锁的组合，锁定一个行和它前面的间隙。</p><h3 id="意向锁（Intention-Locks）"><a href="#意向锁（Intention-Locks）" class="headerlink" title="意向锁（Intention Locks）"></a>意向锁（Intention Locks）</h3><p>意向锁是 InnoDB 存储引擎用来支持多粒度锁定的机制，主要用于表级锁和行级锁的协调。意向锁有两种类型：</p><p><strong>意向共享锁（Intention Share Lock，IS 锁）</strong>：事务打算对某些行加共享锁。</p><p><strong>意向排他锁（Intention Exclusive Lock，IX 锁）</strong>：事务打算对某些行加排他锁。</p><p>意向锁本身不会阻塞其他事务，但会阻止其他事务对表加相冲突的表级锁。</p><h3 id="自增锁（Auto-Increment-Locks）"><a href="#自增锁（Auto-Increment-Locks）" class="headerlink" title="自增锁（Auto-Increment Locks）"></a>自增锁（Auto-Increment Locks）</h3><p>自增锁用于处理自增列（AUTO_INCREMENT）的并发问题。InnoDB 存储引擎使用一种特殊的表级锁来确保自增列的值在并发插入时的正确性。</p><h3 id="元数据锁（Metadata-Locks）"><a href="#元数据锁（Metadata-Locks）" class="headerlink" title="元数据锁（Metadata Locks）"></a>元数据锁（Metadata Locks）</h3><p>元数据锁用于保护表结构的变化，确保在表结构变更（如ALTER TABLE）时不会有其他事务对表进行操作。主要用于 DDL（数据定义语言）操作。</p><h3 id="外键锁（Foreign-Key-Locks）"><a href="#外键锁（Foreign-Key-Locks）" class="headerlink" title="外键锁（Foreign Key Locks）"></a>外键锁（Foreign Key Locks）</h3><p>外键锁用于保证外键约束的完整性。InnoDB 存储引擎在插入、更新或删除涉及外键的记录时，会自动加锁以确保外键约束不被破坏。</p><h3 id="临时锁（Temporary-Locks）"><a href="#临时锁（Temporary-Locks）" class="headerlink" title="临时锁（Temporary Locks）"></a>临时锁（Temporary Locks）</h3><p>临时锁是 MySQL 在某些特定操作（如复制、备份等）过程中使用的锁，用于确保操作的原子性和一致性。</p></blockquote><h1 id="Mysql的常用函数"><a href="#Mysql的常用函数" class="headerlink" title="Mysql的常用函数"></a>Mysql的常用函数</h1><blockquote><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><strong>CONCAT(str1, str2, …)</strong>：连接多个字符串。</p><p><strong>SUBSTRING(str, pos, len)</strong>：从字符串str的pos位置开始，截取长度为len的子字符串。</p><p><strong>LENGTH(str)</strong>：返回字符串的长度（字节数）。</p><p><strong>UPPER(str)</strong>：将字符串转换为大写。</p><p><strong>LOWER(str)</strong>：将字符串转换为小写。</p><p><strong>TRIM(str)</strong>：去除字符串两端的空格。</p><p><strong>REPLACE(str, from_str, to_str)</strong>：将字符串str中的from_str替换为to_str。</p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><strong>ABS(x)</strong>：返回x的绝对值。</p><p><strong>CEIL(x)</strong>或<strong>CEILING(x)</strong>：返回大于或等于x的最小整数。</p><p><strong>FLOOR(x)</strong>：返回小于或等于x的最大整数。</p><p><strong>ROUND(x, d)</strong>：将x四舍五入到d位小数。</p><p><strong>RAND()</strong>：返回一个 0 到 1 之间的随机数。</p><p><strong>POWER(x, y)</strong>或<strong>POW(x, y)</strong>：返回x的y次幂。</p><h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><p><strong>NOW()</strong>：返回当前日期和时间。</p><p><strong>CURDATE()</strong>或<strong>CURRENT_DATE()</strong>：返回当前日期。</p><p><strong>CURTIME()</strong>或<strong>CURRENT_TIME()</strong>：返回当前时间。</p><p><strong>CURTIME()</strong>或<strong>CURRENT_TIME()</strong>：返回当前时间。</p><p><strong>DATEDIFF(date1, date2)</strong>：返回两个日期之间的天数差。</p><p><strong>ADDDATE(date, interval)</strong>或<strong>DATE_ADD(date, interval)</strong>：在日期上加上一个时间间隔。</p><p><strong>SUBDATE(date, interval)</strong>或<strong>DATE_SUB(date, interval)</strong>：在日期上减去一个时间间隔。</p><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><strong>COUNT(expression)</strong>：返回满足条件的行数。</p><p><strong>SUM(expression)</strong>：返回数值列的总和。</p><p><strong>AVG(expression)</strong>：返回数值列的平均值。</p><p><strong>MAX(expression)</strong>：返回列的最大值。</p><p><strong>MIN(expression)</strong>：返回列的最小值。</p><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><p><strong>IF(condition, true_value, false_value)</strong>：条件判断函数。</p><p><strong>COALESCE(value1, value2, …)</strong>：返回第一个非 NULL 的值。</p><p><strong>IFNULL(expression, alt_value)</strong>：如果expression为 NULL，返回alt_value。</p><p><strong>NULLIF(expr1, expr2)</strong>：如果expr1等于expr2，返回 NULL，否则返回expr1。</p></blockquote><h1 id="Mysql的常用数据类型"><a href="#Mysql的常用数据类型" class="headerlink" title="Mysql的常用数据类型"></a>Mysql的常用数据类型</h1><blockquote><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p><strong>TINYINT</strong>: 1 字节，范围 -128 到 127 或 0 到 255（无符号）。</p><p><strong>SMALLINT</strong>: 2 字节，范围 -32,768 到 32,767 或 0 到 65,535（无符号）。</p><p><strong>MEDIUMINT</strong>: 3 字节，范围 -8,388,608 到 8,388,607 或 0 到 16,777,215（无符号）。</p><p><strong>INT</strong>: 4 字节，范围 -2,147,483,648 到 2,147,483,647 或 0 到 4,294,967,295（无符号）。</p><p><strong>BIGINT</strong>: 8 字节，范围 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 或 0 到 18,446,744,073,709,551,615（无符号）。</p><h4 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h4><p><strong>FLOAT</strong>: 单精度浮点数，4 字节。</p><p><strong>DOUBLE</strong>: 双精度浮点数，8 字节。</p><h4 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h4><p><strong>DECIMAL</strong>: 精确的定点数，用户可以指定精度和小数位数。适用于需要高精度的金融计算。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p><strong>CHAR</strong>: 固定长度字符串，最多 255 个字符。</p><p><strong>VARCHAR</strong>: 可变长度字符串，最多 65,535 个字符（实际长度受行大小限制）。</p><p><strong>TINYTEXT</strong>: 最多 255 个字符。</p><p><strong>TEXT</strong>: 最多 65,535 个字符。</p><p><strong>MEDIUMTEXT</strong>: 最多 16,777,215 个字符。</p><p><strong>LONGTEXT</strong>: 最多 4,294,967,295 个字符。</p><h3 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h3><p><strong>BINARY</strong>: 固定长度二进制数据，最多 255 字节。</p><p><strong>VARBINARY</strong>: 可变长度二进制数据，最多 65,535 字节。</p><p><strong>TINYBLOB</strong>: 最多 255 字节的二进制数据。</p><p><strong>BLOB</strong>: 最多 65,535 字节的二进制数据。</p><p><strong>MEDIUMBLOB</strong>: 最多 16,777,215 字节的二进制数据。</p><p><strong>LONGBLOB</strong>: 最多 4,294,967,295 字节的二进制数据。</p><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p><strong>DATE</strong>: 日期，格式为 ‘YYYY-MM-DD’，范围 ‘1000-01-01’ 到 ‘9999-12-31’。</p><p><strong>TIME</strong>: 时间，格式为 ‘HH:MM:SS’，范围 ‘-838:59:59’ 到 ‘838:59:59’。</p><p><strong>DATETIME</strong>: 日期和时间，格式为 ‘YYYY-MM-DD HH:MM:SS’，范围 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’。</p><p><strong>TIMESTAMP</strong>: 时间戳，格式为 ‘YYYY-MM-DD HH:MM:SS’，范围 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC。</p><p><strong>YEAR</strong>: 年份，格式为 ‘YYYY’，范围 ‘1901’ 到 ‘2155’。</p><h3 id="JSON-类型"><a href="#JSON-类型" class="headerlink" title="JSON 类型"></a>JSON 类型</h3><p><strong>JSON</strong>: 用于存储 JSON 格式的数据，可以方便地进行 JSON 数据的存储和查询。</p><h3 id="枚举和集合类型"><a href="#枚举和集合类型" class="headerlink" title="枚举和集合类型"></a>枚举和集合类型</h3><p><strong>ENUM</strong>: 枚举类型，字符串对象的集合，每次只能存储一个值。</p><p><strong>SET</strong>: 集合类型，字符串对象的集合，每次可以存储多个值。</p><h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><p><strong>BOOLEAN</strong>: 布尔类型，实际上是 TINYINT(1) 的别名，0 表示 FALSE，非 0 表示 TRUE。</p><p><strong>SERIAL</strong>: 自动递增的整数类型，实际上是<code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code>的别名。</p></blockquote><h1 id="Mysql的char和varchar的区别"><a href="#Mysql的char和varchar的区别" class="headerlink" title="Mysql的char和varchar的区别"></a>Mysql的char和varchar的区别</h1><blockquote><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p><strong>CHAR</strong>：CHAR是固定长度的字符串类型。无论实际存储的字符串长度是多少，CHAR类型的字段都会占用固定的空间。例如，CHAR(10)类型的字段，无论存储的字符串是 “abc” 还是 “abcdefghij”，都会占用 10 个字符的空间。如果存储的字符串长度小于定义的长度，MySQL 会在字符串的末尾填充空格以达到指定的长度。</p><p><strong>VARCHAR</strong>：VARCHAR是可变长度的字符串类型。VARCHAR类型的字段根据实际存储的字符串长度来分配空间。例如，VARCHAR(10)类型的字段，存储 “abc” 只占用 3 个字符的空间（加上一个额外的字节用于存储字符串的长度）。VARCHAR类型的字段在存储时会记录实际字符串的长度，因此不会有额外的空格填充。</p><h3 id="存储效率"><a href="#存储效率" class="headerlink" title="存储效率"></a>存储效率</h3><p><strong>CHAR</strong>：由于是固定长度，CHAR类型的字段在存储和检索时效率较高，特别适用于存储长度固定的字符串（如国家代码、邮政编码等）。但对于长度变化较大的字符串，CHAR类型可能会浪费大量的存储空间。</p><p><strong>VARCHAR</strong>：VARCHAR类型的字段在存储空间上更节省，因为它只分配实际需要的空间。对于长度变化较大的字符串，VARCHAR类型更加合适。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><strong>CHAR</strong>：由于固定长度，CHAR类型的字段在进行比较和检索时速度较快。适用于需要频繁查询和比较的字段。</p><p><strong>VARCHAR</strong>：VARCHAR类型的字段在存储和检索时需要额外的长度信息，因此在某些情况下性能可能稍逊于CHAR。适用于长度不固定且不需要频繁比较的字段。</p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>CHAR</strong>：适用于存储长度固定的字符串，如固定长度的编码、标识符等。例如，存储国家代码（如 “USA”、”CHN”）或邮政编码（如 “12345”）。</p><p><strong>VARCHAR</strong>：适用于存储长度可变的字符串，如姓名、地址、描述等。例如，存储用户的姓名、电子邮件地址或文章内容。</p></blockquote><h1 id="mysql中int-1-和int-10-的区别"><a href="#mysql中int-1-和int-10-的区别" class="headerlink" title="mysql中int(1)和int(10)的区别"></a>mysql中int(1)和int(10)的区别</h1><blockquote><p>INT(1)和INT(10)的区别并不在于它们能存储的数值范围，而是在于显示宽度（display width）。</p><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>无论是INT(1)还是INT(10)，它们的数值范围都是由INT类型决定的，而不是括号中的数字。</p><p>INT类型的数值范围（无符号）是-2147483648到2147483647。</p><h3 id="显示宽度"><a href="#显示宽度" class="headerlink" title="显示宽度"></a>显示宽度</h3><p>INT(1)和INT(10)中的数字（1 和 10）表示的是显示宽度，而不是存储的数值范围。</p><p>显示宽度是指当你使用ZEROFILL属性时，MySQL 会将数字填充到指定的宽度。例如，如果你定义了INT(5) ZEROFILL，并插入值42，它会显示为00042。</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><p><strong>存储大小</strong>：显示宽度不会影响实际的存储大小。INT类型始终占用 4 个字节的存储空间。</p><p><strong>显示效果</strong>：显示宽度主要影响的是数据的显示效果，尤其是在使用ZEROFILL属性时。没有ZEROFILL属性时，显示宽度的影响很小。</p></blockquote><h1 id="blob和text的区别"><a href="#blob和text的区别" class="headerlink" title="blob和text的区别"></a>blob和text的区别</h1><blockquote><p>BLOB 和 TEXT 是两种用于存储大数据的列类型。</p><h3 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h3><p><strong>BLOB</strong>（Binary Large Object）：用于存储二进制数据，如图像、音频、视频等。BLOB字段中的数据以二进制格式存储，不进行字符集转换。</p><p><strong>TEXT</strong>：用于存储大文本数据，如长文章、日志等。TEXT字段中的数据以字符格式存储，受字符集和排序规则的影响。</p><h3 id="类型和大小"><a href="#类型和大小" class="headerlink" title="类型和大小"></a>类型和大小</h3><p>BLOB和TEXT都有四种不同的类型，每种类型支持不同的数据大小：</p><p><strong>TINYBLOB</strong>/<strong>TINYTEXT</strong>：最大长度 255 字节</p><p><strong>BLOB</strong>/<strong>TEXT</strong>：最大长度 65,535 字节（约 64 KB）</p><p><strong>MEDIUMBLOB</strong>/<strong>MEDIUMTEXT</strong>：最大长度 16,777,215 字节（约 16 MB）</p><p><strong>LONGBLOB</strong>/<strong>LONGTEXT</strong>：最大长度 4,294,967,295 字节（约 4 GB）</p><h3 id="字符集和排序规则"><a href="#字符集和排序规则" class="headerlink" title="字符集和排序规则"></a>字符集和排序规则</h3><p><strong>BLOB</strong>：不使用字符集和排序规则。数据按字节存储和比较。</p><p><strong>TEXT</strong>：使用字符集和排序规则。数据按字符存储和比较，字符集转换会影响数据的存储和检索。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>BLOB</strong>：适用于存储二进制数据，如图像、音频、视频文件等。</p><p><strong>TEXT</strong>：适用于存储大文本数据，如文章、日志、HTML 内容等。</p><h3 id="索引和性能"><a href="#索引和性能" class="headerlink" title="索引和性能"></a>索引和性能</h3><p><strong>索引</strong>：BLOB和TEXT类型的列不能被索引，除非你指定一个前缀长度。例如：</p><p><strong>性能</strong>：由于BLOB和TEXT类型的数据可能非常大，它们的读写性能可能会受到影响。在设计数据库时，应尽量避免在这些字段上进行频繁的搜索和排序操作。</p><h3 id="存储和检索"><a href="#存储和检索" class="headerlink" title="存储和检索"></a>存储和检索</h3><p><strong>BLOB</strong>：存储和检索时不会进行字符集转换，适合存储二进制数据。</p><p><strong>TEXT</strong>：存储和检索时会进行字符集转换，适合存储需要字符集支持的文本数据。</p></blockquote><h1 id="什么是表分区"><a href="#什么是表分区" class="headerlink" title="什么是表分区"></a>什么是表分区</h1><blockquote><p>在MySQL中，表分区是一种将表的数据按照某种规则分成多个较小的独立部分（分区）的技术。每个分区可以独立存储在不同的文件或磁盘上，从而提高查询性能、简化管理和优化存储资源的利用。表分区特别适用于处理大型表的数据管理和查询优化。</p><h3 id="表分区的类型"><a href="#表分区的类型" class="headerlink" title="表分区的类型"></a>表分区的类型</h3><p>MySQL支持几种不同的分区方法，每种方法适用于不同的应用场景：</p><h4 id="范围分区（Range-Partitioning）"><a href="#范围分区（Range-Partitioning）" class="headerlink" title="范围分区（Range Partitioning）"></a>范围分区（Range Partitioning）</h4><p>根据列值的范围将数据分配到不同的分区。适用于日期或数值范围的分区。</p><p>例如，可以按年份、月份或其他数值范围进行分区。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  sale_date <span class="type">DATE</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">YEAR</span>(sale_date)) (</span><br><span class="line">  <span class="keyword">PARTITION</span> p2021 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2022</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> p2022 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2023</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> p2023 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2024</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="列表分区（List-Partitioning）"><a href="#列表分区（List-Partitioning）" class="headerlink" title="列表分区（List Partitioning）"></a>列表分区（List Partitioning）</h4><p>根据列值的具体列表将数据分配到不同的分区。适用于离散值的分区。</p><p>例如，可以按地区代码或类别进行分区。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  region_code <span class="type">CHAR</span>(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LIST (region_code) (</span><br><span class="line">  <span class="keyword">PARTITION</span> pNorth <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="string">&#x27;NA&#x27;</span>, <span class="string">&#x27;EU&#x27;</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> pSouth <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="string">&#x27;SA&#x27;</span>, <span class="string">&#x27;AF&#x27;</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> pEast <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="string">&#x27;AS&#x27;</span>, <span class="string">&#x27;OC&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="哈希分区（Hash-Partitioning）"><a href="#哈希分区（Hash-Partitioning）" class="headerlink" title="哈希分区（Hash Partitioning）"></a>哈希分区（Hash Partitioning）</h4><p>根据列值的哈希值将数据分配到不同的分区。适用于均匀分布数据的分区。</p><p>例如，可以使用主键或其他列的哈希值进行分区。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logs (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  log_message TEXT</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> HASH (id) PARTITIONS <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h4 id="键分区（Key-Partitioning）"><a href="#键分区（Key-Partitioning）" class="headerlink" title="键分区（Key Partitioning）"></a>键分区（Key Partitioning）</h4><p>类似于哈希分区，但使用MySQL内部的哈希函数。适用于需要更灵活的哈希分区策略。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> KEY (id) PARTITIONS <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="复合分区（Composite-Partitioning）"><a href="#复合分区（Composite-Partitioning）" class="headerlink" title="复合分区（Composite Partitioning）"></a>复合分区（Composite Partitioning）</h3><p>结合两种分区方法，例如范围分区和哈希分区的组合。适用于更复杂的分区需求。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  order_date <span class="type">DATE</span>,</span><br><span class="line">  customer_id <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">YEAR</span>(order_date))</span><br><span class="line">SUBPARTITION <span class="keyword">BY</span> HASH (customer_id) SUBPARTITIONS <span class="number">4</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> p2021 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2022</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> p2022 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2023</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="表分区的优点"><a href="#表分区的优点" class="headerlink" title="表分区的优点"></a>表分区的优点</h3><p><strong>性能提升</strong>：通过将大表分成多个较小的分区，可以提高查询和操作的性能。查询可以在特定的分区上执行，减少了扫描的数据量。</p><p><strong>管理简化</strong>：分区表可以更容易地进行维护和管理，例如分区的添加、删除和归档。可以方便地进行备份和恢复操作。</p><p><strong>存储优化</strong>：不同的分区可以存储在不同的存储设备上，优化存储资源的利用。可以为不同的分区设置不同的存储引擎和参数。</p><p><strong>并行处理</strong>：分区表可以更好地利用并行处理能力，提高多线程查询的性能。</p><h3 id="使用表分区的注意事项"><a href="#使用表分区的注意事项" class="headerlink" title="使用表分区的注意事项"></a>使用表分区的注意事项</h3><h4 id="分区键的选择"><a href="#分区键的选择" class="headerlink" title="分区键的选择"></a>分区键的选择</h4><p>选择合适的分区键非常重要，直接影响查询和操作的性能。</p><p>分区键应当是查询中经常使用的列。</p><h4 id="分区管理"><a href="#分区管理" class="headerlink" title="分区管理"></a>分区管理</h4><p>定期维护分区，例如合并小分区、拆分大分区、归档历史数据等。</p></blockquote><h1 id="表分区与分表的区别"><a href="#表分区与分表的区别" class="headerlink" title="表分区与分表的区别"></a>表分区与分表的区别</h1><blockquote><h3 id="分区（Partitioning）"><a href="#分区（Partitioning）" class="headerlink" title="分区（Partitioning）"></a>分区（Partitioning）</h3><p>分区是将一个大表按照某种规则分成多个较小的部分，每个部分称为一个分区。这些分区在逻辑上仍然属于同一个表，但在物理上可以独立存储。</p><p><strong>实现方式</strong>：</p><p><strong>内部实现</strong>：分区是在数据库内部实现的，用户在查询或操作时不需要关注分区的存在。</p><p><strong>分区类型</strong>：MySQL支持多种分区类型，如范围分区、列表分区、哈希分区和键分区等。</p><p><strong>优点</strong>：</p><ol><li><strong>查询优化</strong>：通过分区裁剪（Partition Pruning），查询可以只在相关的分区上执行，减少扫描的数据量。</li><li><strong>管理简化</strong>：可以方便地进行分区的添加、删除和归档等操作。</li><li><strong>并行处理</strong>：分区可以更好地利用并行处理能力，提高多线程查询的性能。</li><li><strong>存储优化</strong>：不同的分区可以存储在不同的存储设备上，优化存储资源的利用。</li></ol><h3 id="分表（Sharding）"><a href="#分表（Sharding）" class="headerlink" title="分表（Sharding）"></a>分表（Sharding）</h3><p>分表是将一个大表按照某种规则拆分成多个较小的表，每个表称为一个分片（Shard）。这些分片在逻辑上是独立的表，但在应用层面上被视为一个整体。</p><p><strong>实现方式</strong>：</p><p><strong>外部实现</strong>：分表通常需要在应用层面实现，应用程序需要知道数据如何分布在不同的表中。</p><p><strong>分片规则</strong>：分表的规则可以是基于某个列的范围、哈希值或者其他自定义规则。</p><p><strong>优点</strong>：</p><ol><li><strong>水平扩展</strong>：分表可以将数据分布到多个数据库实例上，实现水平扩展。</li><li><strong>负载均衡</strong>：通过分表可以将负载均衡到不同的数据库实例上，减少单个实例的压力。</li><li><strong>独立管理</strong>：每个分片可以独立进行备份、恢复和优化等操作。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">分区</th><th style="text-align:center">分表</th></tr></thead><tbody><tr><td style="text-align:center">实现层面</td><td style="text-align:center">在数据库内部实现，用户透明。</td><td style="text-align:center">在应用层面实现，应用程序需要处理数据分布。</td></tr><tr><td style="text-align:center">管理复杂度</td><td style="text-align:center">管理相对简单，可以通过SQL语句直接操作分区。</td><td style="text-align:center">管理复杂，需要应用程序和数据库层面共同处理。</td></tr><tr><td style="text-align:center">性能优化</td><td style="text-align:center">通过分区裁剪和并行处理优化查询性能。</td><td style="text-align:center">通过将数据分布到多个实例上减少单个实例的负载。</td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">适用于单个数据库实例内的数据管理和性能优化。</td><td style="text-align:center">适用于跨多个数据库实例的水平扩展和负载均衡。</td></tr><tr><td style="text-align:center">适用场景</td><td style="text-align:center">适用于大表的数据管理和查询优化，特别是需要处理大量数据的单个数据库实例。</td><td style="text-align:center">适用于需要水平扩展和负载均衡的大规模分布式系统。</td></tr></tbody></table></div></blockquote><h1 id="什么情况下会产生死锁"><a href="#什么情况下会产生死锁" class="headerlink" title="什么情况下会产生死锁"></a>什么情况下会产生死锁</h1><blockquote><h3 id="不同顺序的锁定"><a href="#不同顺序的锁定" class="headerlink" title="不同顺序的锁定"></a>不同顺序的锁定</h3><p>当两个或多个事务以不同的顺序请求相同的资源时，容易引发死锁。</p><p>1、 事务A先锁定表1的记录，然后尝试锁定表2的记录。</p><p>2、 事务B先锁定表2的记录，然后尝试锁定表1的记录。</p><p>3、 如果事务A和事务B同时执行，就可能导致死锁。</p><h3 id="间隙锁（Gap-Lock）"><a href="#间隙锁（Gap-Lock）" class="headerlink" title="间隙锁（Gap Lock）"></a>间隙锁（Gap Lock）</h3><p>在InnoDB存储引擎中，间隙锁用于防止幻读。在范围查询中，间隙锁可能会导致死锁。</p><p>1、 事务A执行SELECT * FROM table WHERE id &gt; 10 FOR UPDATE，锁定了id大于10的所有记录及其间隙。</p><p>2、 事务B执行INSERT INTO table (id) VALUES (15)，试图插入一个新记录。</p><p>3、 如果这两个事务并发执行，可能会导致死锁。</p><h3 id="自增列的死锁"><a href="#自增列的死锁" class="headerlink" title="自增列的死锁"></a>自增列的死锁</h3><p>在高并发情况下，当多个事务同时插入自增列时，可能会导致死锁。</p><p>1、 事务A和事务B同时插入数据到包含自增主键的表中。</p><p>2、MySQL在分配自增值时可能会导致锁争用，从而引发死锁。</p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>在涉及外键约束的表中，更新或删除操作可能会导致死锁。</p><p>1、 事务A在表1中删除一条记录，该表有一个外键引用表2。</p><p>2、 事务B在表2中更新或删除与表1中记录相关的记录。</p><p>3、 如果这两个事务并发执行，可能会导致死锁。</p><h3 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h3><p>当MySQL从行级锁升级到表级锁时，可能会导致死锁。</p><p>1、 事务A和事务B分别锁定同一表中的不同行。</p><p>2、 如果某个操作需要将行级锁升级为表级锁，这可能会导致死锁。</p><h3 id="混合使用不同类型的锁"><a href="#混合使用不同类型的锁" class="headerlink" title="混合使用不同类型的锁"></a>混合使用不同类型的锁</h3><p>在同一个事务中混合使用不同类型的锁（如读锁和写锁）时，可能会导致死锁。</p><p>1、事务A持有一个读锁，并试图获取一个写锁。</p><p>2、事务B持有一个写锁，并试图获取一个读锁。</p><p>3、如果这两个事务并发执行，可能会导致死锁。</p><h3 id="大量并发事务"><a href="#大量并发事务" class="headerlink" title="大量并发事务"></a>大量并发事务</h3><p>在高并发环境中，大量事务同时操作同一资源，可能会导致死锁。</p><p>1、多个事务同时对同一行数据进行更新操作。</p><p>2、事务之间相互等待资源释放，可能会导致死锁。</p><h3 id="处理和预防死锁的方法"><a href="#处理和预防死锁的方法" class="headerlink" title="处理和预防死锁的方法"></a>处理和预防死锁的方法</h3><ol><li><strong>自动检测和回滚</strong>：InnoDB存储引擎能够自动检测死锁，并回滚其中一个事务以解除死锁。</li><li><strong>查看死锁信息</strong>：使用命令SHOW ENGINE INNODB STATUS查看最近一次死锁的信息，以帮助诊断问题。</li><li><strong>合理的事务设计</strong>：尽量避免长时间持有锁，确保事务尽可能短小和高效。</li><li><strong>一致的锁定顺序</strong>：确保所有事务以相同的顺序请求资源，以减少死锁的可能性。</li><li><strong>减少并发事务</strong>：通过优化应用程序逻辑，减少同时并发的事务数量。</li></ol></blockquote><h1 id="死锁常见解决方案"><a href="#死锁常见解决方案" class="headerlink" title="死锁常见解决方案"></a>死锁常见解决方案</h1><blockquote><p>MySQL中的死锁是指两个或多个事务相互等待对方持有的锁，从而导致这些事务无法继续执行。死锁是并发控制中的一个常见问题，特别是在高并发环境下。</p><h3 id="分析和优化SQL语句"><a href="#分析和优化SQL语句" class="headerlink" title="分析和优化SQL语句"></a>分析和优化SQL语句</h3><p><strong>减少锁的持有时间</strong>：优化SQL语句，使其执行时间更短，从而减少锁的持有时间，降低死锁发生的概率。</p><p><strong>避免大事务</strong>：将大事务拆分为多个小事务，减少每个事务持有锁的时间。</p><p><strong>索引优化</strong>：确保查询使用了合适的索引，减少全表扫描，从而减少锁冲突。</p><h3 id="调整事务的顺序"><a href="#调整事务的顺序" class="headerlink" title="调整事务的顺序"></a>调整事务的顺序</h3><p><strong>统一访问顺序</strong>：确保所有事务以相同的顺序访问资源。例如，如果多个事务都需要访问表A和表B，确保所有事务都先访问表A，再访问表B。</p><p><strong>减少循环等待</strong>：通过调整事务的执行顺序，避免事务之间形成循环等待。</p><h3 id="使用合适的隔离级别"><a href="#使用合适的隔离级别" class="headerlink" title="使用合适的隔离级别"></a>使用合适的隔离级别</h3><p><strong>降低隔离级别</strong>：在某些情况下，可以考虑使用较低的隔离级别（如READ COMMITTED）来减少锁冲突。但需要权衡数据一致性和并发性能。</p><p><strong>使用锁机制</strong>：在某些情况下，可以显式使用LOCK IN SHARE MODE或FOR UPDATE来控制锁的粒度和范围。</p><h3 id="合理使用索引"><a href="#合理使用索引" class="headerlink" title="合理使用索引"></a>合理使用索引</h3><p><strong>覆盖索引</strong>：使用覆盖索引（covering index）来减少锁的争用。例如，如果查询只需要访问索引列，可以避免访问数据行，从而减少锁冲突。</p><p><strong>避免索引缺失</strong>：确保查询使用了合适的索引，避免全表扫描导致的大量锁争用。</p><h3 id="监控和分析"><a href="#监控和分析" class="headerlink" title="监控和分析"></a>监控和分析</h3><p><strong>启用死锁日志</strong>：在MySQL配置中启用死锁日志，记录死锁信息以便分析。</p><p><strong>分析死锁日志</strong>：通过分析死锁日志，找出导致死锁的SQL语句和事务，进行针对性的优化。</p><h3 id="锁等待超时"><a href="#锁等待超时" class="headerlink" title="锁等待超时"></a>锁等待超时</h3><p><strong>设置合理的锁等待超时</strong>：通过设置合理的锁等待超时参数（如innodb_lock_wait_timeout），避免长时间等待锁，从而减少死锁影响。</p></blockquote><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>视图（View）是SQL数据库中的一种虚拟表，它是基于SQL查询结果定义的。视图本身不存储数据，而是存储了一个SQL查询，当你访问视图时，数据库会执行该查询并返回结果。视图可以包含来自一个或多个表的列和行，并且可以包含过滤、排序、连接等复杂的SQL操作。</p><ol><li><strong>简化复杂查询</strong></li></ol><p>视图可以将复杂的SQL查询封装起来，使得用户在使用时只需简单地查询视图，避免重复编写复杂的SQL语句。</p><ol><li><strong>提高数据安全性</strong></li></ol><p>视图可以限制用户访问底层表中的敏感数据。例如，可以创建一个不包含敏感信息的视图，用户只能访问视图而不是底层表。</p><ol><li><strong>提供数据抽象</strong></li></ol><p>视图可以提供数据的不同视角，抽象出底层表的复杂性。例如，可以创建一个视图，将多个表的联合结果呈现为一个单一的逻辑表。</p><ol><li><strong>实现数据重用</strong></li></ol><p>视图可以被多个应用程序或用户重用，确保数据逻辑的一致性和可维护性。如果查询逻辑发生变化，只需修改视图定义，而不需要修改所有使用该查询的地方。</p><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>视图的更新</strong>：并不是所有视图都可以更新。只有满足一定条件（如视图基于单个表，没有聚合函数等）的视图才可以进行插入、更新和删除操作。</p><p><strong>性能影响</strong>：视图本身不存储数据，每次访问视图时都会执行底层查询。如果视图定义的查询非常复杂，可能会影响性能。</p><p><strong>依赖管理</strong>：视图依赖于底层表结构，如果底层表结构发生变化（如列名更改、表删除等），视图也需要相应调整。</p><h3 id="特点-7"><a href="#特点-7" class="headerlink" title="特点"></a>特点</h3><p>视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系。</p><p>视图是由基本表(实表)产生的表(虚表)。</p><p>视图的建立和删除不影响基本表。</p><p>对视图内容的更新(添加，删除和修改)直接影响基本表。</p><p>当视图来自多个基本表时，不允许添加和删除数据。</p><p>视图的操作包括创建视图，查看视图，删除视图和修改视图。</p><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><p>性能。数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，数据库也把它变成一个复杂的结合体，需要花费一定的时间。</p><p>修改限制。当用户试图修改视图的某些行时，数据库必须把它转化为对基本表的某些行的修改。事实上，当从视图中插入或者删除时，情况也是这样。对于简单视图来说，这是很方便的，但是，对于比较复杂的视图，是不可修改的</p></blockquote><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><blockquote><p>存储过程（Stored Procedure）是数据库中一组预编译的SQL语句和控制结构的集合，可以在数据库中保存并执行。存储过程可以包含逻辑控制、循环、条件判断等复杂的逻辑，并且可以接受参数和返回结果。存储过程的主要目的是将业务逻辑封装在数据库层，以提高性能和简化应用程序的实现。</p><h3 id="创建存储过程的基本语法"><a href="#创建存储过程的基本语法" class="headerlink" title="创建存储过程的基本语法"></a>创建存储过程的基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name (<span class="keyword">IN</span> parameter1 datatype, <span class="keyword">OUT</span> parameter2 datatype, <span class="keyword">INOUT</span> parameter3 datatype)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- SQL 语句</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> increase_salary(<span class="keyword">IN</span> emp_id <span class="type">INT</span>, <span class="keyword">IN</span> increment <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> employees</span><br><span class="line">    <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> increment</span><br><span class="line">    <span class="keyword">WHERE</span> id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="存储过程的优缺点"><a href="#存储过程的优缺点" class="headerlink" title="存储过程的优缺点"></a>存储过程的优缺点</h3><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><p><strong>预编译</strong>：存储过程在首次执行时会被编译，并存储在数据库中，后续执行时无需再次编译，减少了解析和优化的开销。</p><p><strong>权限控制</strong>：可以通过设置存储过程的执行权限，限制用户直接访问底层表，只允许通过存储过程进行操作。</p><p><strong>隐藏复杂逻辑</strong>：存储过程可以封装复杂的业务逻辑，用户无需了解具体实现细节。</p><p><strong>封装业务逻辑</strong>：将常用的业务逻辑封装在存储过程内，多个应用程序可以重用这些逻辑，减少代码重复。</p><h3 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h3><p><strong>调试工具有限</strong>：与应用程序代码相比，存储过程的调试工具和方法较为有限，调试和排错较为困难。</p><p><strong>错误处理复杂</strong>：存储过程中的错误处理通常比应用程序代码中的错误处理更复杂。</p><p><strong>数据库依赖性</strong>：存储过程通常依赖于特定数据库的语法和功能，不同数据库之间的存储过程可能无法直接移植。</p><p><strong>资源消耗</strong>：存储过程在数据库服务器上执行，可能会占用大量服务器资源，导致性能瓶颈。</p></blockquote><h1 id="union和union-all区别"><a href="#union和union-all区别" class="headerlink" title="union和union all区别"></a>union和union all区别</h1><blockquote><p>UNION和UNION ALL是 SQL 中用于合并两个或多个结果集的操作符。它们的主要区别在于是否去除重复的行。</p><p> <strong>UNION</strong> </p><p>去除重复行：UNION操作会自动去除合并结果中的重复行。</p><p>排序操作：由于UNION需要去除重复行，因此它会在内部执行一个排序操作来识别和删除重复行，这可能会影响性能。</p><p><strong>UNION ALL</strong><br>保留重复行：UNION ALL操作不会去除重复行，所有的结果行都会被保留。<br>性能较好：由于UNION ALL不需要进行去重操作，因此通常比UNION性能更好，特别是在处理大数据量时。</p></blockquote><h1 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h1><blockquote><p>MySQL 的二进制日志（binlog）是一个重要的日志文件，用于记录对数据库进行的所有更改操作。二进制日志的主要功能包括数据恢复、复制和审计。</p><h2 id="二进制日志的作用"><a href="#二进制日志的作用" class="headerlink" title="二进制日志的作用"></a>二进制日志的作用</h2><p><strong>数据恢复</strong>：在发生崩溃或数据丢失时，可以使用二进制日志恢复数据。通过重放日志中的更改，可以将数据库恢复到某个时间点。</p><p><strong>复制</strong>：二进制日志是 MySQL 复制机制的基础。主服务器（master）将其上的所有更改记录到二进制日志中，从服务器（slave）通过读取这些日志来复制数据变化，从而保持数据同步。</p><p><strong>审计和分析</strong>：二进制日志可以用来审计数据库上的更改操作，帮助管理员了解谁在何时对数据库进行了哪些更改。</p><h2 id="二进制日志的组成"><a href="#二进制日志的组成" class="headerlink" title="二进制日志的组成"></a>二进制日志的组成</h2><p>二进制日志由多个日志文件组成，这些文件按照顺序记录了所有的更改操作。每个日志文件都有一个唯一的编号，MySQL 会自动轮换和生成新的日志文件。</p><h2 id="配置和管理二进制日志"><a href="#配置和管理二进制日志" class="headerlink" title="配置和管理二进制日志"></a>配置和管理二进制日志</h2><ol><li><strong>启用二进制日志</strong>：在 MySQL 配置文件（通常是<code>my.cnf</code>或<code>my.ini</code>）中，添加以下配置项以启用二进制日志：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure><ol><li><strong>查看二进制日志状态</strong>：使用以下 SQL 命令查看二进制日志的状态：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br></pre></td></tr></table></figure><p>查看当前正在使用的二进制日志文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> MASTER STATUS;</span><br></pre></td></tr></table></figure><ol><li><strong>管理二进制日志</strong>：手动刷新二进制日志文件：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH LOGS;</span><br></pre></td></tr></table></figure><p>删除旧的二进制日志文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PURGE <span class="type">BINARY</span> LOGS <span class="keyword">TO</span> <span class="string">&#x27;mysql-bin.000010&#x27;</span>;</span><br><span class="line">或</span><br><span class="line">PURGE <span class="type">BINARY</span> LOGS BEFORE <span class="string">&#x27;2024-01-01 00:00:00&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li><strong>配置二进制日志保留策略</strong>：可以在配置文件中设置保留策略，例如自动删除7天前的二进制日志：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">expire_logs_days <span class="operator">=</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="解析二进制日志"><a href="#解析二进制日志" class="headerlink" title="解析二进制日志"></a>解析二进制日志</h3><p>MySQL 提供了<code>mysqlbinlog</code>工具，用于读取和解析二进制日志文件。以下是一些常用的命令：</p><ol><li><strong>显示二进制日志内容</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog mysql<span class="operator">-</span>bin<span class="number">.000001</span></span><br></pre></td></tr></table></figure><ol><li><strong>将二进制日志内容导入数据库</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span> mysql <span class="operator">-</span>u username <span class="operator">-</span>p</span><br></pre></td></tr></table></figure></blockquote><h1 id="redolog"><a href="#redolog" class="headerlink" title="redolog"></a>redolog</h1><blockquote><p>MySQL 的重做日志（redo log）是 InnoDB 存储引擎中的一个关键组件，用于保证数据的持久性和一致性。重做日志记录了所有对数据库进行的修改操作，这些操作在实际写入数据文件之前先写入重做日志。</p><h2 id="重做日志的作用"><a href="#重做日志的作用" class="headerlink" title="重做日志的作用"></a>重做日志的作用</h2><ol><li><strong>数据恢复</strong>：在数据库崩溃或意外关机时，重做日志可以用于恢复未完成的事务。通过重做日志，InnoDB 可以在重新启动时重新应用未完成的事务，确保数据的一致性。</li><li><strong>提高性能</strong>：重做日志的存在使得 InnoDB 可以将事务提交的更改快速写入日志文件，而不是立即写入数据文件。这种机制减少了磁盘 I/O 操作，提高了数据库的性能。</li></ol><h2 id="重做日志的工作原理"><a href="#重做日志的工作原理" class="headerlink" title="重做日志的工作原理"></a>重做日志的工作原理</h2><ol><li><strong>写入重做日志</strong>：当一个事务开始时，所有的修改操作都会首先记录到内存中的重做日志缓存（redo log buffer）。当事务提交时，重做日志缓存中的内容会被刷新到磁盘上的重做日志文件中，以确保事务的持久性。</li><li><strong>重做日志应用</strong>：在数据库重启时，InnoDB 会检查重做日志文件中的内容，并重新应用所有未完成的事务。这一过程称为“重做（redo）”。</li></ol><h2 id="重做日志的组成"><a href="#重做日志的组成" class="headerlink" title="重做日志的组成"></a>重做日志的组成</h2><p>重做日志由一组固定大小的日志文件组成，这些文件循环使用。具体配置项包括：</p><ol><li><strong>重做日志文件路径和大小</strong>：可以在 MySQL 配置文件（<code>my.cnf</code>或<code>my.ini</code>）中设置重做日志文件的路径和大小：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_log_group_home_dir <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>  # 重做日志文件的存储路径</span><br><span class="line">innodb_log_file_size <span class="operator">=</span> <span class="number">512</span>M  # 每个重做日志文件的大小</span><br><span class="line">innodb_log_files_in_group <span class="operator">=</span> <span class="number">2</span>  # 重做日志文件的数量</span><br></pre></td></tr></table></figure><ol><li><strong>重做日志缓冲区大小</strong>：设置重做日志缓冲区的大小：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_log_buffer_size <span class="operator">=</span> <span class="number">16</span>M</span><br></pre></td></tr></table></figure><h2 id="管理重做日志"><a href="#管理重做日志" class="headerlink" title="管理重做日志"></a>管理重做日志</h2><ol><li><strong>查看重做日志状态</strong>：可以通过以下命令查看重做日志的状态：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure><ol><li><strong>调整重做日志配置</strong>：调整重做日志文件的大小和数量需要先关闭 MySQL 服务，删除现有的重做日志文件，然后重新启动 MySQL 服务。具体步骤如下：</li></ol><p>关闭 MySQL 服务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysql</span><br></pre></td></tr></table></figure><p>删除现有的重做日志文件（通常位于数据目录中，例如/var/lib/mysql）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>ib_logfile<span class="operator">*</span></span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文件中的重做日志设置。</p><p>重新启动 MySQL 服务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">start</span> mysql</span><br></pre></td></tr></table></figure></blockquote><h1 id="其他的什么log"><a href="#其他的什么log" class="headerlink" title="其他的什么log"></a>其他的什么log</h1><blockquote><h3 id="错误日志（Error-Log）"><a href="#错误日志（Error-Log）" class="headerlink" title="错误日志（Error Log）"></a>错误日志（Error Log）</h3><p>记录 MySQL 服务器启动、运行和停止期间发生的错误和重要事件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log_error <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>error.log</span><br></pre></td></tr></table></figure><p>错误日志可以通过查看配置的日志文件来检查，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>error.log</span><br></pre></td></tr></table></figure><h3 id="查询日志（General-Query-Log）"><a href="#查询日志（General-Query-Log）" class="headerlink" title="查询日志（General Query Log）"></a>查询日志（General Query Log）</h3><p>记录所有客户端连接和执行的 SQL 语句。这对于调试和审计非常有用，但由于记录了所有查询，可能会对性能产生影响。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">general_log <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">general_log_file <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>query.log</span><br></pre></td></tr></table></figure><p>查询日志可以通过查看配置的日志文件来检查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>query.log</span><br></pre></td></tr></table></figure><h3 id="慢查询日志（Slow-Query-Log）"><a href="#慢查询日志（Slow-Query-Log）" class="headerlink" title="慢查询日志（Slow Query Log）"></a>慢查询日志（Slow Query Log）</h3><p>记录执行时间超过指定阈值的查询。这对于优化性能和识别慢查询非常有用。</p><p>可以在 MySQL 配置文件中启用慢查询日志并设置日志文件路径和阈值时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">slow_query_log_file <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>slow.log</span><br><span class="line">long_query_time <span class="operator">=</span> <span class="number">2</span>  # 记录执行时间超过 <span class="number">2</span> 秒的查询</span><br></pre></td></tr></table></figure><p>慢查询日志可以通过查看配置的日志文件来检查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>slow.log</span><br></pre></td></tr></table></figure><h3 id="中继日志（Relay-Log）-1"><a href="#中继日志（Relay-Log）-1" class="headerlink" title="中继日志（Relay Log）"></a>中继日志（Relay Log）</h3><p>在 MySQL 复制环境中，从服务器（slave）使用中继日志记录从主服务器（master）接收到的二进制日志事件。中继日志用于应用这些事件以保持数据同步。</p><h3 id="事务日志（Undo-Log）"><a href="#事务日志（Undo-Log）" class="headerlink" title="事务日志（Undo Log）"></a>事务日志（Undo Log）</h3><p>记录事务的撤销操作，用于支持事务的回滚和 MVCC（多版本并发控制）。撤销日志通常是 InnoDB 存储引擎的一部分。</p><h3 id="表空间日志（Tablespace-Log）"><a href="#表空间日志（Tablespace-Log）" class="headerlink" title="表空间日志（Tablespace Log）"></a>表空间日志（Tablespace Log）</h3><p>记录表空间的扩展、收缩等操作。主要用于管理 InnoDB 的物理存储。</p><p>表空间日志由 InnoDB 自动管理，通常不需要手动配置。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/posts/d87f7e0c.html"/>
      <url>/posts/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><code>abstract</code>：用于设置加密文章显示的摘要。</li><li><code>message</code>：输入密码提示。</li><li><code>wrong_pass_message</code>: 输入错误提示。</li></ul></blockquote><p><img src="/posts/d87f7e0c/test.jpg" alt="111"></p><p><img src="/posts/d87f7e0c/1222.webp" alt="111"></p><blockquote><ul><li><a href="https://img.zcool.cn/community/011f8a5c9e21cba801214168ae2c61.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/011f8a5c9e21cba801214168ae2c61.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a><ul><li><a href="https://img.zcool.cn/community/01c9765c9e21c9a801208f8b3657ee.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01c9765c9e21c9a801208f8b3657ee.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0163b85c9e21cba801208f8b89e09a.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0163b85c9e21cba801208f8b89e09a.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/016ebc5c9e21cba801208f8b31cbe4.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/016ebc5c9e21cba801208f8b31cbe4.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01c9165c9e21caa801214168bb8f86.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01c9165c9e21caa801214168bb8f86.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0127555c9e21d0a80121416883ffd3.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0127555c9e21d0a80121416883ffd3.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01307e5c9e21d4a8012141686775c5.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01307e5c9e21d4a8012141686775c5.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/011e505c9e21d5a801208f8bc0b432.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/011e505c9e21d5a801208f8bc0b432.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/016ba25c9e21d3a80121416822ddf7.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/016ba25c9e21d3a80121416822ddf7.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01c6db5c9e21d0a80121416884a1bf.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01c6db5c9e21d0a80121416884a1bf.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01c19d5c9e21d9a801208f8b973596.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01c19d5c9e21d9a801208f8b973596.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0130c75c9e21d8a8012141688a9ebc.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0130c75c9e21d8a8012141688a9ebc.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01ada95c9e21d9a8012141687ab247.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01ada95c9e21d9a8012141687ab247.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0147db5c9e21dda801208f8b793a3d.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0147db5c9e21dda801208f8b793a3d.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01e5115c9e21dfa801208f8ba4f85b.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01e5115c9e21dfa801208f8ba4f85b.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01550e5c9e21e3a801208f8b13f2ea.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01550e5c9e21e3a801208f8b13f2ea.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0110555c9e21dfa8012141680d0a45.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0110555c9e21dfa8012141680d0a45.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01f2ed5c9e21e1a80121416856912c.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01f2ed5c9e21e1a80121416856912c.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01c6695c9e21e1a801208f8b79a45a.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01c6695c9e21e1a801208f8b79a45a.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01b8b35c9e21e8a801214168e27da6.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01b8b35c9e21e8a801214168e27da6.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01e1475c9e21e7a801208f8b8a6417.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01e1475c9e21e7a801208f8b8a6417.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01d9305c9e21e7a80121416800067b.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01d9305c9e21e7a80121416800067b.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01d2935c9e21eea801214168d8abd2.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp、">https://img.zcool.cn/community/01d2935c9e21eea801214168d8abd2.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp、</a></li><li><a href="https://img.zcool.cn/community/0165825c9e21eaa801208f8bf87ebe.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0165825c9e21eaa801208f8bf87ebe.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01cd375c9e21f0a801208f8b505146.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01cd375c9e21f0a801208f8b505146.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01a7b25c9e21eea801208f8be5ad53.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01a7b25c9e21eea801208f8be5ad53.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01b5315c9e21efa8012141680d7eab.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01b5315c9e21efa8012141680d7eab.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/018f215c9e21f1a8012141689131ec.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/018f215c9e21f1a8012141689131ec.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01d17e5c9e21f7a801208f8bf8cbd8.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01d17e5c9e21f7a801208f8bf8cbd8.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0179d25c9e21f7a801214168e46332.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0179d25c9e21f7a801214168e46332.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01be365c9e21f9a801208f8bd3d4d1.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01be365c9e21f9a801208f8bd3d4d1.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01b9955c9e21f9a801214168f2f061.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01b9955c9e21f9a801214168f2f061.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01840c5c9e21faa801208f8ba37d12.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01840c5c9e21faa801208f8ba37d12.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01cb7d5c9e21fca801214168b21a97.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01cb7d5c9e21fca801214168b21a97.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0171275c9e21fda801208f8bcfb081.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0171275c9e21fda801208f8bcfb081.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/01e0a35c9e2202a801214168bbbed6.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/01e0a35c9e2202a801214168bbbed6.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/0168705c9e2204a801214168cb5922.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/0168705c9e2204a801214168cb5922.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li><li><a href="https://img.zcool.cn/community/011b605c9e2203a801208f8b538846.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp">https://img.zcool.cn/community/011b605c9e2203a801208f8b538846.jpg?imageMogr2/auto-orient/thumbnail/1280x%3e/sharpen/0.5/quality/100/format/webp</a></li></ul></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历八股文</title>
      <link href="/posts/1bb262db.html"/>
      <url>/posts/1bb262db.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc9e040ed0bde15bd45e45318e24d26eda2991876bdefdd3b9813de993fca693"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请填写密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架项目</title>
      <link href="/posts/94051bc2.html"/>
      <url>/posts/94051bc2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a61aea5b7e3ad15e99c51150ecd712f722be93f2ac9d45b9260569ae91b03e71"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请填写密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社区项目</title>
      <link href="/posts/d12215f8.html"/>
      <url>/posts/d12215f8.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="19de59e18408389d15491820996308891df6ac4c6b9519d2a45b93b5e49df660"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请填写密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chat项目</title>
      <link href="/posts/bc8ba982.html"/>
      <url>/posts/bc8ba982.html</url>
      
        <content type="html"><![CDATA[<h3 id="js文件中export-default和export"><a href="#js文件中export-default和export" class="headerlink" title="js文件中export default和export"></a>js文件中export default和export</h3><p>在一个js文件中，export default和export都可以用来导出内容，但它们之间有一些区别：<br>export default只能有一个默认导出，而export可以有多个命名导出。默认导出可以在导入时指定任意名称，而命名导出需要使用相同的名称。</p><p>例如，以下是使用export default导出默认函数的示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// utils.js</span><br><span class="line">function add(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">export default add;</span><br></pre></td></tr></table></figure></p><p>在另一个文件中导入默认函数的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import myAdd from &#x27;./utils.js&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(myAdd(2, 3)); // 输出: 5</span><br></pre></td></tr></table></figure><p>当使用export default时，在导入时可以使用import语句的一个额外的语法糖。例如，可以省略导入的内容的花括号。<br>例如，以下是使用export default导出默认函数，并在导入时省略花括号的示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// utils.js</span><br><span class="line">function add(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">export default add;</span><br></pre></td></tr></table></figure><br>在另一个文件中导入默认函数的方式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import myAdd from &#x27;./utils.js&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(myAdd(2, 3)); // 输出: 5</span><br></pre></td></tr></table></figure></p><h3 id="插槽Slots"><a href="#插槽Slots" class="headerlink" title="插槽Slots"></a>插槽Slots</h3><p>为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。</p><p>举例来说，这里有一个 <FancyButton> 组件，可以像这样使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FancyButton</span>&gt;</span><br><span class="line">  <span class="title class_">Click</span> me! &lt;!-- 插槽内容 --&gt;</span><br><span class="line">&lt;/<span class="title class_">FancyButton</span>&gt;</span><br></pre></td></tr></table></figure><br>而 <FancyButton> 的模板是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;fancy-btn&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span> &lt;!-- 插槽出口 --&gt;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></FancyButton></FancyButton></p><blockquote><p><slot> 元素是一个插槽出口 (slot outlet)，标示了父元素提供的插槽内容 (slot content) 将在哪里被渲染。<br><img src="/posts/bc8ba982/png/image.png" alt="alt text"></slot></p></blockquote><p>最终渲染出的 DOM 是这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://cn.vuejs.org/guide/components/slots.html">插槽</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex</title>
      <link href="/posts/7b7eec0b.html"/>
      <url>/posts/7b7eec0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><blockquote><p>mapState , mapGetters, mapMutations, mapActions</p></blockquote><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><blockquote><p>在vue的任何组件中都可以使用this.$store.state.属性名访问<br>在开发中我们推荐将store中的state赋值给需要使用该状态的组件的计算属性中(一定不能把state赋值给data,state发生改变时不会重新给data赋值)</p></blockquote><p><strong>如下:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 错误state.book 发生改变时book不会更新</span></span><br><span class="line">            <span class="attr">myBook</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">book</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">book</span>(<span class="params"></span>) &#123;</span><br><span class="line">             <span class="comment">// 正确 state.book会作为当前计算属性的依赖,当state.book发生改变时计算属性book将会重新计算当前值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">book</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><blockquote><p>Vuex 为了简化 state与计算属性配合使用时的代码,提供了一个辅助函数mapState 可以简化上面的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 首先引入辅助函数mapState</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    computed: &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        book() &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          return this.$store.state.book;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    &#125;*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 下面的写法等价于上面的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapState</span>([<span class="string">&#x27;book&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><blockquote><p>getter就是Vuex的计算属性，开发人员可以将state 或其他getter 计算后的的返回值存放在指定getter中,当前getter会将这些依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算<br>在任何组件中都可以通过this.$store.getter.属性名访问</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">score</span>: [<span class="number">30</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">66</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 可以认为是 store 的计算属性, 就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</span></span><br><span class="line">    <span class="title function_">calcScore</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="comment">// p(state, getters, rootState, rootGetters)</span></span><br><span class="line">      <span class="comment">//state: 当前模块的state</span></span><br><span class="line">      <span class="comment">//getters: 当前模块的getters</span></span><br><span class="line">      <span class="comment">//rootState: 全局的state</span></span><br><span class="line">      <span class="comment">//rootGetters: 全局的getters</span></span><br><span class="line">      <span class="keyword">let</span> ps = state.<span class="property">score</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v &gt;= <span class="number">30</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> ps.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><ul><li><p>mapState可以接收一个字符串数组作为参数,数组中的每一项字符串都会成为当前组件的计算属性并且与Vuex中的同名getter建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;calcScore&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 首先引入辅助函数mapGetters</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    computed: &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        book() &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          return this.$store.getters.calcScore;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    &#125;*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 下面的写法等价于上面的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       ...<span class="title function_">mapGetters</span>([<span class="string">&quot;calcScore&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>mapGetters可以接收对象作为参数,对象的每一个key都会成为当前组件的计算属性名,value必须是一个字符串并且与Vuex中的同名getter建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;s1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapGetters</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">s1</span>: <span class="string">&#x27;calcScore&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><blockquote><p>vuex规定mutation是唯一可以修改state的地方<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: <span class="string">&#x27;HTML+CSS&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; <span class="comment">// 修改state的方法</span></span><br><span class="line">    <span class="comment">// 同步操作 直接修改</span></span><br><span class="line">    <span class="title function_">changeBook</span>(<span class="params">state, book</span>) &#123;</span><br><span class="line">      state.<span class="property">book</span> = book;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><blockquote><p>在Vuex中，mutation函数的第一个参数是state，<br>这是Vuex自动传递的，因此在调用mutation函数时不需要显式传递state。<br>Vuex会自动将当前的状态对象作为第一个参数传递给mutation函数。</p></blockquote><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><blockquote><p>注意: Mutation 需遵守 Vue 的响应规则 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：<br>1、最好提前在你的 store 中初始化好所有所需state属性。<br>2、当需要在对象上添加新属性时，你应该使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象<br>Vue.set(obj, ‘newProp’, 123)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将mutation里的函数映射到组件里</span></span><br><span class="line">...<span class="title function_">mapMutations</span>([   <span class="comment">//使用es6的拓展运算符</span></span><br><span class="line">        <span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DECREASE_SHOPCART&#x27;</span></span><br><span class="line">   ])</span><br><span class="line"></span><br><span class="line"><span class="comment">//将mutation里的函数映射到组件里，在组件里</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">INCREASE_SHOPCART</span> === <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在有参数的情况下，mutation的state默认参数可以省略</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">INCREASE_SHOPCART</span>(id) === <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>,id) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">组件中使用 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;xxx&#x27;</span>) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.<span class="property">commit</span> 调用（需要在根节点注入 store）。</span><br></pre></td></tr></table></figure><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><blockquote><p>Vuex给开发人员提供了一个可以执行异步操作的函数action</p><p>注意: action函数中接收两个参数<br>参数一 context 与 store对象相似所以可以访问 context.state / context.getters / context.commit / context.dispatch<br>参数二 action的载荷,action载荷与mutation一样只有一个如果需要传递多个参数请传递对象<br><strong>action是不允许直接修改state的</strong></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Vuex中通过配置选项actions创建,并使用 $store.dispatch方法分发action</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、在应用中通过store.dispatch(&#x27;action名&#x27;,载荷)的形式调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">result</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        [types.<span class="property">SET_RESULT</span>](state, result) &#123;</span><br><span class="line">            <span class="comment">// 修改state</span></span><br><span class="line">            state.<span class="property">result</span> = result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">searchMusic</span>(<span class="params">context, keywords</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(context)</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">&#x27;http://musicapi.leanapp.cn/search?keywords=&#x27;</span> + keywords)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">            <span class="comment">// 只有mutation才能修改state,所以action异步请求数据后,只能通过提交mutation修改state</span></span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;result&#125;</span>) =&gt;</span> context.<span class="title function_">commit</span>(types.<span class="property">SET_RESULT</span>, result))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.js</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;searchMusic&#x27;</span>, <span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><blockquote><p>mapActions生成的方法只接受一个参数,这个参数就是当前action的载荷。</p></blockquote><ul><li><p>方法一: mapActions可以接收一个字符串数组作为参数,数组中的每一项字符串都会成为当前组件的方法并且与Vuex中的同名action建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//   this.$store.dispatch(&#x27;searchMusic&#x27;,&#x27;海阔天空&#x27;)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">searchMusic</span>(<span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>([<span class="string">&#x27;searchMusic&#x27;</span>]),</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>方法二: mapAction可以接收对象作为参数,对象的每一个key都会成为当前组件的方法名,value必须是action的同名字符串与Vuex中的action建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//   this.$store.dispatch(&#x27;searchMusic&#x27;,&#x27;海阔天空&#x27;)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">search</span>(<span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>(&#123;<span class="attr">search</span>: <span class="string">&#x27;searchMusic&#x27;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>应用层级的状态都应该集中在store中<br>提交 mutation 是更改状态state的唯一方式，并且这个过程是同步的。<br>异步的操作应该都放在action里面</p></blockquote><h3 id="参-考"><a href="#参-考" class="headerlink" title="参 考"></a>参 考</h3><p><a href="https://juejin.cn/post/6973080514215280647">vuex参考链接</a><br><a href="https://juejin.cn/post/6972334587875688455">vuex模块化</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/posts/3c50d03d.html"/>
      <url>/posts/3c50d03d.html</url>
      
        <content type="html"><![CDATA[<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>这是一篇讲解如何正确使用 <strong>Markdown</strong> 的排版示例，学会这个很有必要，能让你的文章有更加清晰的排版。</p><blockquote><p>引用文本：Markdown is a text formatting syntax inspired</p></blockquote><h2 id="语法指导"><a href="#语法指导" class="headerlink" title="语法指导"></a>语法指导</h2><h3 id="普通内容"><a href="#普通内容" class="headerlink" title="普通内容"></a>普通内容</h3><p>这段内容展示了在内容里面一些排版格式，比如：</p><ul><li><strong>加粗</strong> - <code>**加粗**</code></li><li><em>倾斜</em> - <code>*倾斜*</code></li><li><del>删除线</del> - <code>~~删除线~~</code></li><li><code>Code 标记</code> - <code>Code 标记</code></li><li><a href="https://hacpai.com">超级链接</a> - <code>[超级链接](https://hacpai.com)</code></li><li><a href="mailto:username@gmail.com">username@gmail.com</a> - <code>[username@gmail.com](mailto:username@gmail.com)</code></li></ul><h3 id="大标题-Heading-3"><a href="#大标题-Heading-3" class="headerlink" title="大标题 - Heading 3"></a>大标题 - Heading 3</h3><p>你可以选择使用 H1 至 H6，使用 ##(N) 打头。建议帖子或回帖中的顶级标题使用 Heading 3，不要使用 1 或 2，因为 1 是系统站点级，2 是帖子标题级。</p><blockquote><p>NOTE: 别忘了 # 后面需要有空格！</p></blockquote><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://img.zcool.cn/community/0163b85c9e21cba801208f8b89e09a.jpg?x-oss-process=image/format,webp" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 文本](http://image-path.png)</span><br><span class="line">![alt 文本](http://image-path.png &quot;图片 Title 值&quot;)</span><br></pre></td></tr></table></figure><p>支持复制粘贴直接上传。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*emphasize*    **strong**</span><br><span class="line">_emphasize_    __strong__</span><br><span class="line">var a = 1</span><br></pre></td></tr></table></figure><h4 id="语法高亮支持"><a href="#语法高亮支持" class="headerlink" title="语法高亮支持"></a>语法高亮支持</h4><p>如果在 ``` 后面跟随语言名称，可以有语法高亮的效果哦，比如:</p><h5 id="演示-Go-代码高亮"><a href="#演示-Go-代码高亮" class="headerlink" title="演示 Go 代码高亮"></a>演示 Go 代码高亮</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, 世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="演示-Java-高亮"><a href="#演示-Java-高亮" class="headerlink" title="演示 Java 高亮"></a>演示 Java 高亮</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tip: 语言名称支持下面这些: <code>ruby</code>, <code>python</code>, <code>js</code>, <code>html</code>, <code>erb</code>, <code>css</code>, <code>coffee</code>, <code>bash</code>, <code>json</code>, <code>yml</code>, <code>xml</code> …</p></blockquote><h3 id="有序、无序、任务列表"><a href="#有序、无序、任务列表" class="headerlink" title="有序、无序、任务列表"></a>有序、无序、任务列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>Java<ul><li>Spring<ul><li>IoC</li><li>AOP</li></ul></li></ul></li><li>Go<ul><li>gofmt</li><li>Wide</li></ul></li><li>Node.js<ul><li>Koa</li><li>Express</li></ul></li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>Node.js<ol><li>Express</li><li>Koa</li><li>Sails</li></ol></li><li>Go<ol><li>gofmt</li><li>Wide</li></ol></li><li>Java<ol><li>Latke</li><li>IDEA</li></ol></li></ol><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><ul><li>[x] 发布 Sym</li><li>[x] 发布 Solo</li><li>[ ] 预约牙医</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>如果需要展示数据什么的，可以选择使用表格。</p><div class="table-container"><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>cell 1</td><td>cell 2</td></tr><tr><td>cell 3</td><td>cell 4</td></tr><tr><td>cell 5</td><td>cell 6</td></tr></tbody></table></div><h3 id="隐藏细节"><a href="#隐藏细节" class="headerlink" title="隐藏细节"></a>隐藏细节</h3><details><summary>这里是摘要部分。</summary>这里是细节部分。</details><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>空行可以将内容进行分段，便于阅读。（这是第一段）</p><p>使用空行在 Markdown 排版中相当重要。（这是第二段）</p><h3 id="链接引用"><a href="#链接引用" class="headerlink" title="链接引用"></a>链接引用</h3><p><a href="https://b3log.org">链接文本</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文本][链接标识]</span><br><span class="line"></span><br><span class="line">[链接标识]: https://b3log.org</span><br></pre></td></tr></table></figure><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>多行公式块：</p><script type="math/tex; mode=display">\frac{1}{  \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{  \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {    1+\frac{e^{-6\pi}}    {1+\frac{e^{-8\pi}}{1+\cdots}}  }}</script><p>行内公式：</p><p>公式 $a^2 + b^2 = \color{red}c^2$ 是行内。</p><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- 教程</span><br><span class="line">- 语法指导</span><br><span class="line">  - 普通内容</span><br><span class="line">  - 提及用户</span><br><span class="line">  - 表情符号 Emoji</span><br><span class="line">    - 一些表情例子</span><br><span class="line">  - 大标题 - Heading 3</span><br><span class="line">    - Heading 4</span><br><span class="line">      - Heading 5</span><br><span class="line">        - Heading 6</span><br><span class="line">  - 图片</span><br><span class="line">  - 代码块</span><br><span class="line">    - 普通</span><br><span class="line">    - 语法高亮支持</span><br><span class="line">      - 演示 Go 代码高亮</span><br><span class="line">      - 演示 Java 高亮</span><br><span class="line">  - 有序、无序、任务列表</span><br><span class="line">    - 无序列表</span><br><span class="line">    - 有序列表</span><br><span class="line">    - 任务列表</span><br><span class="line">  - 表格</span><br><span class="line">  - 隐藏细节</span><br><span class="line">  - 段落</span><br><span class="line">  - 链接引用</span><br><span class="line">  - 数学公式</span><br><span class="line">  - 脑图</span><br><span class="line">  - 流程图</span><br><span class="line">  - 时序图</span><br><span class="line">  - 甘特图</span><br><span class="line">  - 图表</span><br><span class="line">  - 五线谱</span><br><span class="line">  - Graphviz</span><br><span class="line">  - 多媒体</span><br><span class="line">  - 脚注</span><br><span class="line">- 快捷键</span><br></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Every minute</span><br><span class="line">        John--&gt;&gt;Alice: Great!</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title A Gantt Diagram</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2019-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2019-01-12  , 12d</span><br><span class="line">    another task      : 24d</span><br></pre></td></tr></table></figure><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &#123; &quot;text&quot;: &quot;最近 30 天&quot; &#125;,</span><br><span class="line">  &quot;tooltip&quot;: &#123; &quot;trigger&quot;: &quot;axis&quot;, &quot;axisPointer&quot;: &#123; &quot;lineStyle&quot;: &#123; &quot;width&quot;: 0 &#125; &#125; &#125;,</span><br><span class="line">  &quot;legend&quot;: &#123; &quot;data&quot;: [&quot;帖子&quot;, &quot;用户&quot;, &quot;回帖&quot;] &#125;,</span><br><span class="line">  &quot;xAxis&quot;: [&#123;</span><br><span class="line">      &quot;type&quot;: &quot;category&quot;,</span><br><span class="line">      &quot;boundaryGap&quot;: false,</span><br><span class="line">      &quot;data&quot;: [&quot;2019-05-08&quot;,&quot;2019-05-09&quot;,&quot;2019-05-10&quot;,&quot;2019-05-11&quot;,&quot;2019-05-12&quot;,&quot;2019-05-13&quot;,&quot;2019-05-14&quot;,&quot;2019-05-15&quot;,&quot;2019-05-16&quot;,&quot;2019-05-17&quot;,&quot;2019-05-18&quot;,&quot;2019-05-19&quot;,&quot;2019-05-20&quot;,&quot;2019-05-21&quot;,&quot;2019-05-22&quot;,&quot;2019-05-23&quot;,&quot;2019-05-24&quot;,&quot;2019-05-25&quot;,&quot;2019-05-26&quot;,&quot;2019-05-27&quot;,&quot;2019-05-28&quot;,&quot;2019-05-29&quot;,&quot;2019-05-30&quot;,&quot;2019-05-31&quot;,&quot;2019-06-01&quot;,&quot;2019-06-02&quot;,&quot;2019-06-03&quot;,&quot;2019-06-04&quot;,&quot;2019-06-05&quot;,&quot;2019-06-06&quot;,&quot;2019-06-07&quot;],</span><br><span class="line">      &quot;axisTick&quot;: &#123; &quot;show&quot;: false &#125;,</span><br><span class="line">      &quot;axisLine&quot;: &#123; &quot;show&quot;: false &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;yAxis&quot;: [&#123; &quot;type&quot;: &quot;value&quot;, &quot;axisTick&quot;: &#123; &quot;show&quot;: false &#125;, &quot;axisLine&quot;: &#123; &quot;show&quot;: false &#125;, &quot;splitLine&quot;: &#123; &quot;lineStyle&quot;: &#123; &quot;color&quot;: &quot;rgba(0, 0, 0, .38)&quot;, &quot;type&quot;: &quot;dashed&quot; &#125; &#125; &#125;],</span><br><span class="line">  &quot;series&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;帖子&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#d23f31&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 3,</span><br><span class="line">      &quot;data&quot;: [&quot;18&quot;,&quot;14&quot;,&quot;22&quot;,&quot;9&quot;,&quot;7&quot;,&quot;18&quot;,&quot;10&quot;,&quot;12&quot;,&quot;13&quot;,&quot;16&quot;,&quot;6&quot;,&quot;9&quot;,&quot;15&quot;,&quot;15&quot;,&quot;12&quot;,&quot;15&quot;,&quot;8&quot;,&quot;14&quot;,&quot;9&quot;,&quot;10&quot;,&quot;29&quot;,&quot;22&quot;,&quot;14&quot;,&quot;22&quot;,&quot;9&quot;,&quot;10&quot;,&quot;15&quot;,&quot;9&quot;,&quot;9&quot;,&quot;15&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;用户&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#f1e05a&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 2,</span><br><span class="line">      &quot;data&quot;: [&quot;31&quot;,&quot;33&quot;,&quot;30&quot;,&quot;23&quot;,&quot;16&quot;,&quot;29&quot;,&quot;23&quot;,&quot;37&quot;,&quot;41&quot;,&quot;29&quot;,&quot;16&quot;,&quot;13&quot;,&quot;39&quot;,&quot;23&quot;,&quot;38&quot;,&quot;136&quot;,&quot;89&quot;,&quot;35&quot;,&quot;22&quot;,&quot;50&quot;,&quot;57&quot;,&quot;47&quot;,&quot;36&quot;,&quot;59&quot;,&quot;14&quot;,&quot;23&quot;,&quot;46&quot;,&quot;44&quot;,&quot;51&quot;,&quot;43&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;回帖&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#4285f4&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 1,</span><br><span class="line">      &quot;data&quot;: [&quot;35&quot;,&quot;42&quot;,&quot;73&quot;,&quot;15&quot;,&quot;43&quot;,&quot;58&quot;,&quot;55&quot;,&quot;35&quot;,&quot;46&quot;,&quot;87&quot;,&quot;36&quot;,&quot;15&quot;,&quot;44&quot;,&quot;76&quot;,&quot;130&quot;,&quot;73&quot;,&quot;50&quot;,&quot;20&quot;,&quot;21&quot;,&quot;54&quot;,&quot;48&quot;,&quot;73&quot;,&quot;60&quot;,&quot;89&quot;,&quot;26&quot;,&quot;27&quot;,&quot;70&quot;,&quot;63&quot;,&quot;55&quot;,&quot;37&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五线谱"><a href="#五线谱" class="headerlink" title="五线谱"></a>五线谱</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">X: 24</span><br><span class="line">T: Clouds Thicken</span><br><span class="line">C: Paul Rosen</span><br><span class="line">S: Copyright 2005, Paul Rosen</span><br><span class="line">M: 6/8</span><br><span class="line">L: 1/8</span><br><span class="line">Q: 3/8=116</span><br><span class="line">R: Creepy Jig</span><br><span class="line">K: Em</span><br><span class="line">|:&quot;Em&quot;EEE E2G|&quot;C7&quot;_B2A G2F|&quot;Em&quot;EEE E2G|\</span><br><span class="line">&quot;C7&quot;_B2A &quot;B7&quot;=B3|&quot;Em&quot;EEE E2G|</span><br><span class="line">&quot;C7&quot;_B2A G2F|&quot;Em&quot;GFE &quot;D (Bm7)&quot;F2D|\</span><br><span class="line">1&quot;Em&quot;E3-E3:|2&quot;Em&quot;E3-E2B|:&quot;Em&quot;e2e gfe|</span><br><span class="line">&quot;G&quot;g2ab3|&quot;Em&quot;gfeg2e|&quot;D&quot;fedB2A|&quot;Em&quot;e2e gfe|\</span><br><span class="line">&quot;G&quot;g2ab3|&quot;Em&quot;gfe&quot;D&quot;f2d|&quot;Em&quot;e3-e3:|</span><br></pre></td></tr></table></figure><h3 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">digraph finite_state_machine &#123;</span><br><span class="line">    rankdir=LR;</span><br><span class="line">    size=&quot;8,5&quot;</span><br><span class="line">    node [shape = doublecircle]; S;</span><br><span class="line">    node [shape = point ]; qi</span><br><span class="line"></span><br><span class="line">    node [shape = circle];</span><br><span class="line">    qi -&gt; S;</span><br><span class="line">    S  -&gt; q1 [ label = &quot;a&quot; ];</span><br><span class="line">    S  -&gt; S  [ label = &quot;a&quot; ];</span><br><span class="line">    q1 -&gt; S  [ label = &quot;a&quot; ];</span><br><span class="line">    q1 -&gt; q2 [ label = &quot;ddb&quot; ];</span><br><span class="line">    q2 -&gt; q1 [ label = &quot;b&quot; ];</span><br><span class="line">    q2 -&gt; q2 [ label = &quot;b&quot; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><p>支持 v.qq.com，youtube.com，youku.com，coub.com，facebook.com/video，dailymotion.com，.mp4，.m4v，.ogg，.ogv，.webm，.mp3，.wav 链接解析</p><p><a href="https://v.qq.com/x/cover/zf2z0xpqcculhcz/y0016tj0qvh.html">https://v.qq.com/x/cover/zf2z0xpqcculhcz/y0016tj0qvh.html</a></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>这里是一个脚注引用<sup><a href="#fn_1" id="reffn_1">1</a></sup>，这里是另一个脚注引用<sup><a href="#fn_bignote" id="reffn_bignote">bignote</a></sup>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这里是一个脚注引用[^1]，这里是另一个脚注引用[^bignote]。</span><br><span class="line">[^1]: 第一个脚注定义。</span><br><span class="line">[^bignote]: 脚注定义可使用多段内容。</span><br><span class="line"></span><br><span class="line">    缩进对齐的段落包含在这个脚注定义内。</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>可以使用代码块。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">还有其他行级排版语法，比如**加粗**和[链接](https://b3log.org)。</span><br></pre></td></tr></table></figure></code></pre><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>我们的编辑器支持很多快捷键，具体请参考 <a href="https://hacpai.com/article/1474030007391">键盘快捷键</a>（或者按 “<code>?</code> “😼）</p><blockquote id="fn_1"><sup>1</sup>. 第一个脚注定义。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_bignote"><sup>bignote</sup>. 脚注定义可使用多段内容。<a href="#reffn_bignote" title="Jump back to footnote [bignote] in the text."> &#8617;</a></blockquote><pre><code>缩进对齐的段落包含在这个脚注定义内。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用代码块。</span><br></pre></td></tr></table></figure><pre><code>还有其他行级排版语法，比如**加粗**和[链接](https://b3log.org)。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"WYH`Blog","short_name":"WYH","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */   #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }     #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tages</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tag</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var t = new Date("05/24/2024 00:00:00"); now.setTime(now.getTime() + 250); var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i); var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval(() => { createtime() }, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_4560691='<svg><symbol id="icon-aixin" viewBox="0 0 1024 1024"><path d="M5.1 831.1h253.5c2.8 0 5.1-2.3 5.1-5.1s-2.3-5.1-5.1-5.1H5.1c-2.8 0-5.1 2.3-5.1 5.1 0 2.9 2.3 5.1 5.1 5.1z m314.3 0h55.8c2.8 0 5.1-2.3 5.1-5.1s-2.3-5.1-5.1-5.1h-55.8c-2.8 0-5.1 2.3-5.1 5.1 0.1 2.9 2.3 5.1 5.1 5.1z m106.5 0h253.5c2.8 0 5.1-2.3 5.1-5.1s-2.3-5.1-5.1-5.1H425.9c-2.8 0-5.1 2.3-5.1 5.1 0 2.9 2.3 5.1 5.1 5.1z m314.4 0H796c2.8 0 5.1-2.3 5.1-5.1s-2.3-5.1-5.1-5.1h-55.8c-2.8 0-5.1 2.3-5.1 5.1 0.1 2.9 2.4 5.1 5.2 5.1z m106.4 0h172.4c2.8 0 5.1-2.3 5.1-5.1s-2.3-5.1-5.1-5.1H846.7c-2.8 0-5.1 2.3-5.1 5.1 0.1 2.9 2.3 5.1 5.1 5.1z" fill="#3B0404" ></path><path d="M409.6 803.5H86.9c-14 0-25.4-11.4-25.4-25.4 0-14 11.4-25.4 25.4-25.4h118.2c-10.1-3.4-17.3-12.9-17.3-24 0-10.9 6.8-20.1 16.4-23.7h-73.9c-14 0-25.4-11.4-25.4-25.4 0-14 11.4-25.4 25.4-25.4h130.1l-40.8-40.8-1.8-1.8c-88.1-88.1-88.1-231 0-319.1s231-88.1 319.1 0l1.8 1.8 1.8-1.8c88.1-88.1 231-88.1 319.1 0 88.1 88.1 88.1 231 0 319.1l-1.8 1.8L560.2 911c-11.9 11.9-31.1 11.9-43 0L409.6 803.5zM54.5 753.1c-14 0-25.4-11.4-25.4-25.4 0-14 11.4-25.4 25.4-25.4s25.4 11.4 25.4 25.4c0 14.1-11.4 25.4-25.4 25.4z" fill="#FF5E5E" ></path><path d="M668.1 228.8c67.9-9.7 139.3 11.6 191.5 63.8 88.1 88.1 88.1 231 0 319.1l-1.8 1.8L560.2 911c-11.9 11.9-31.1 11.9-43 0l-5.1-5.1 291.3-291.4 1.8-1.8c88.1-88.1 88.1-231 0-319.1-38.3-38.2-87-59.9-137.1-64.8z" fill="#CB2828" ></path><path d="M196 633.3c2 2 2 5.2 0 7.2s-5.2 2-7.2 0L165.3 617l-1-1-0.3-0.3-0.5-0.5c-54.3-54.3-77.4-130.8-63.8-204.9 0.5-2.8 3.1-4.6 5.9-4.1 2.8 0.5 4.6 3.1 4.1 5.9-13 70.9 9.1 144 61 195.9l0.5 0.5 0.3 0.3 1.1 1.1 23.4 23.4z m-85.3-226c-0.6 2.7-3.2 4.5-6 3.9-2.7-0.6-4.5-3.2-3.9-6 0.3-1.7 0.7-3.4 1.1-5.1 0.6-2.7 3.3-4.4 6.1-3.8 2.7 0.6 4.4 3.3 3.8 6.1-0.4 1.6-0.7 3.3-1.1 4.9z m17.4-51.2c-1.2 2.5-4.3 3.6-6.8 2.4s-3.6-4.3-2.4-6.8c11.1-23 26-44 44.5-62.5 44.3-44.3 103.3-68.1 164.6-67.7 2.8 0 5.1 2.3 5 5.1 0 2.8-2.3 5.1-5.1 5-58.6-0.3-115 22.4-157.4 64.7-17.5 17.7-31.8 37.8-42.4 59.8zM333 231.7c-2.8-0.1-5-2.4-4.9-5.2 0.1-2.8 2.4-5 5.2-4.9 1.7 0 3.5 0.1 5.2 0.2 2.8 0.1 4.9 2.5 4.8 5.3-0.1 2.8-2.5 4.9-5.3 4.8-1.7-0.1-3.4-0.2-5-0.2z m272.4-6c2.7-0.5 5.4 1.3 5.9 4s-1.3 5.4-4 5.9c-42.8 8.3-82.3 29-113.9 60.6l-0.4 0.4-1.5 1.5c-2 2-5.2 2-7.2-0.1-0.6-0.6-1.2-1.2-1.7-1.8-26.9-26.9-59.7-46-95.5-56.2-2.7-0.8-4.3-3.6-3.5-6.3 0.8-2.7 3.6-4.3 6.3-3.5 36.7 10.4 70.3 29.8 98.2 57 32.6-31.9 73.2-53 117.3-61.5z m6.6 9c-2.8 0.5-5.4-1.4-5.9-4.1-0.5-2.8 1.4-5.4 4.1-5.9 1.7-0.3 3.4-0.6 5.1-0.8 2.8-0.4 5.3 1.5 5.8 4.3 0.4 2.8-1.5 5.3-4.3 5.8-1.5 0.2-3.2 0.5-4.8 0.7z m54.6-2.5c-2.8-0.2-4.9-2.7-4.7-5.4 0.2-2.8 2.7-4.9 5.4-4.7 54.4 4.2 105.7 27.5 145.1 66.9 23.1 23.1 40.7 50.3 52.2 80.2 1 2.6-0.3 5.5-2.9 6.6-2.6 1-5.5-0.3-6.6-2.9-11-28.5-27.8-54.6-49.9-76.7-37.6-37.7-86.6-59.9-138.6-64zM857 377.5c-0.9-2.6 0.4-5.5 3.1-6.5 2.6-0.9 5.5 0.4 6.5 3.1 0.6 1.6 1.1 3.3 1.7 4.9 0.9 2.7-0.6 5.5-3.2 6.4-2.7 0.9-5.5-0.6-6.4-3.2-0.6-1.6-1.2-3.1-1.7-4.7z m11.9 53.1c-0.3-2.8 1.8-5.3 4.6-5.5 2.8-0.3 5.3 1.8 5.5 4.6 6.7 68.3-17 136.2-66.5 185.7l-1.8 1.8-36.8 36.8c-2 2-5.2 2-7.2 0s-2-5.2 0-7.2l36.8-36.8c0.6-0.6 1.2-1.2 1.8-1.7 47.3-47.5 69.9-112.5 63.6-177.7zM763.1 650.2c2-2 5.2-2 7.2 0s2 5.2 0 7.2l-3.6 3.6c-2 2-5.2 2-7.2 0s-2-5.2 0-7.2l3.6-3.6z m-39.4 39.5c2-2 5.2-2 7.2 0s2 5.2 0 7.2L551.6 876.1c-2 2-5.2 2-7.2 0s-2-5.2 0-7.2l179.3-179.2zM540.9 872.5c2-2 5.2-2 7.2 0s2 5.2 0 7.2l-3.6 3.6c-2 2-5.2 2-7.2 0s-2-5.2 0-7.2l3.6-3.6z m-39.1 38.3c-9.8 6.4-22.9 5.2-31.4-3.1L367.8 805.1c-2-2-5.2-2-7.2 0s-2 5.2 0 7.2L463.3 915c12 11.6 30.3 13.3 44.1 4.4 2.3-1.5 3-4.7 1.5-7-1.6-2.4-4.7-3.1-7.1-1.6z" fill="#3B0404" ></path><path d="M494.3 514.2c-8.4 0-15.2-6.8-15.2-15.2s6.8-15.2 15.2-15.2c8.4 0 15.2 6.8 15.2 15.2s-6.8 15.2-15.2 15.2z m91.3 0c-8.4 0-15.2-6.8-15.2-15.2s6.8-15.2 15.2-15.2 15.2 6.8 15.2 15.2-6.8 15.2-15.2 15.2zM465.1 583.3c18.7 22.9 46.6 36.5 76.7 36.5 29.2 0 56.3-12.7 74.9-34.4 1.8-2.1 1.6-5.3-0.5-7.2-2.1-1.8-5.3-1.6-7.2 0.5-16.8 19.5-41.1 30.9-67.3 30.9-27 0-52.1-12.2-68.8-32.7-1.8-2.2-5-2.5-7.1-0.7s-2.5 5-0.7 7.1z" fill="#3B0404" ></path><path d="M428.4 559.9c-8.4 0-15.2-6.8-15.2-15.2 0-8.4 6.8-15.2 15.2-15.2 8.4 0 15.2 6.8 15.2 15.2 0 8.4-6.8 15.2-15.2 15.2z m223.1 0c-8.4 0-15.2-6.8-15.2-15.2 0-8.4 6.8-15.2 15.2-15.2s15.2 6.8 15.2 15.2c0 8.4-6.8 15.2-15.2 15.2z" fill="#CB2828" ></path><path d="M332.1 483.8c-30.8 0-55.8-25-55.8-55.8s25-55.8 55.8-55.8 55.8 25 55.8 55.8-25 55.8-55.8 55.8z m415.8 0c-30.8 0-55.8-25-55.8-55.8s25-55.8 55.8-55.8 55.8 25 55.8 55.8-25 55.8-55.8 55.8z" fill="#F54040" ></path><path d="M871.4 125.7v-0.3c0-14.9 12.1-26.9 26.9-26.9s26.9 12.1 26.9 26.9V160.6c0 10.5-8.5 19-19 19H871c-14.9 0-26.9-12.1-26.9-26.9s12.1-26.9 26.9-26.9c0.2-0.1 0.3-0.1 0.4-0.1z" fill="#FF5E5E" ></path></symbol></svg>',function(c){var t=(t=document.getElementsByTagName("script"))[t.length-1],e=t.getAttribute("data-injectcss"),t=t.getAttribute("data-disable-injectsvg");if(!t){var n,i,s,l,o,a=function(t,e){e.parentNode.insertBefore(t,e)};if(e&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(t){console&&console.log(t)}}n=function(){var t,e=document.createElement("div");e.innerHTML=c._iconfont_svg_string_4560691,(e=e.getElementsByTagName("svg")[0])&&(e.setAttribute("aria-hidden","true"),e.style.position="absolute",e.style.width=0,e.style.height=0,e.style.overflow="hidden",e=e,(t=document.body).firstChild?a(e,t.firstChild):t.appendChild(e))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(n,0):(i=function(){document.removeEventListener("DOMContentLoaded",i,!1),n()},document.addEventListener("DOMContentLoaded",i,!1)):document.attachEvent&&(s=n,l=c.document,o=!1,h(),l.onreadystatechange=function(){"complete"==l.readyState&&(l.onreadystatechange=null,d())})}function d(){o||(o=!0,s())}function h(){try{l.documentElement.doScroll("left")}catch(t){return void setTimeout(h,50)}d()}}(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font1.js"/>
      <url>/js/ali_font1.js</url>
      
        <content type="html"><![CDATA[!(function (c) {    var l,      h,      a,      t,      i,      v =        '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',      o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),      p = function (c, l) {        l.parentNode.insertBefore(c, l);      };    if (o && !c.__iconfont__svg__cssinject__) {      c.__iconfont__svg__cssinject__ = !0;      try {        document.write(          "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"        );      } catch (c) {        console && console.log(c);      }    }    function d() {      i || ((i = !0), a());    }    function m() {      try {        t.documentElement.doScroll("left");      } catch (c) {        return void setTimeout(m, 50);      }      d();    }    (l = function () {      var c,        l = document.createElement("div");      (l.innerHTML = v),        (v = null),        (l = l.getElementsByTagName("svg")[0]) &&          (l.setAttribute("aria-hidden", "true"),          (l.style.position = "absolute"),          (l.style.width = 0),          (l.style.height = 0),          (l.style.overflow = "hidden"),          (l = l),          (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));    }),      document.addEventListener        ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)          ? setTimeout(l, 0)          : ((h = function () {              document.removeEventListener("DOMContentLoaded", h, !1), l();            }),            document.addEventListener("DOMContentLoaded", h, !1))        : document.attachEvent &&          ((a = l),          (t = c.document),          (i = !1),          m(),          (t.onreadystatechange = function () {            "complete" == t.readyState && ((t.onreadystatechange = null), d());          }));  })(window);]]></content>
      
    </entry>
    
    
  
</search>
