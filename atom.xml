<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WYH</title>
  
  
  <link href="http://wyh-7.github.io/atom.xml" rel="self"/>
  
  <link href="http://wyh-7.github.io/"/>
  <updated>2025-04-04T14:48:22.341Z</updated>
  <id>http://wyh-7.github.io/</id>
  
  <author>
    <name>WYH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>八股</title>
    <link href="http://wyh-7.github.io/posts/1bb262db.html"/>
    <id>http://wyh-7.github.io/posts/1bb262db.html</id>
    <published>2025-04-04T14:28:29.000Z</published>
    <updated>2025-04-04T14:48:22.341Z</updated>
    
    <content type="html"><![CDATA[<p>⚫ 扎实的java基础，阅读过jdk中常用的juc及集合源码，拥有良好的代码风格；</p><p>⚫ 熟悉JVM相关知识，如JVM组成，垃圾回收，双亲委派机制，类加载机制和过程等；</p><p>⚫ 熟练掌握设计模式及架构原则，单例、模板、工厂+策略模式等在项目中有多次使用；</p><p>⚫ 熟悉Mysql底层存储结构，索引，事务，mvcc工作原理，学习过sql调优及分库分表优化；</p><p>⚫ 熟悉Redis缓存，熟悉数据类型，缓存持久化，分布式锁，对于缓存雪崩等问题有解决方案；</p><p>⚫ 熟悉Spring，SpringMVC，Mybatis，SpringBoot，SpringCloud常用框架，并基于此封装脚手架；</p><p>⚫ 熟悉Rocketmq的使用，掌握持久化机制，消息可靠性，延迟消费等，解决过消息积压，消息逆序等问题；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;⚫ 扎实的java基础，阅读过jdk中常用的juc及集合源码，拥有良好的代码风格；&lt;/p&gt;
&lt;p&gt;⚫ 熟悉JVM相关知识，如JVM组成，垃圾回收，双亲委派机制，类加载机制和过程等；&lt;/p&gt;
&lt;p&gt;⚫ 熟练掌握设计模式及架构原则，单例、模板、工厂+策略模式等在项目中有多次使用</summary>
      
    
    
    
    
    <category term="八股" scheme="http://wyh-7.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>框架</title>
    <link href="http://wyh-7.github.io/posts/94051bc2.html"/>
    <id>http://wyh-7.github.io/posts/94051bc2.html</id>
    <published>2025-04-04T14:28:29.000Z</published>
    <updated>2025-04-04T14:48:21.787Z</updated>
    
    <content type="html"><![CDATA[<p>⚫ 采用模块化思想，对项目模块进行拆分设计，模块可插拔，可按需选择模块装载，模块间解耦；</p><p>⚫ 负责核心redis模块的建设，提供分布式锁，本地缓存，lua脚本，pipeline等功能设计；</p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">initCache</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">        <span class="comment">//缓存预热</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringContextUtil.getApplicationContext();</span><br><span class="line">        Map&lt;String, AbstractCache&gt; beanMap = applicationContext.getBeansOfType(AbstractCache.class);</span><br><span class="line">        <span class="keyword">if</span> (beanMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, AbstractCache&gt; entry : beanMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">AbstractCache</span> <span class="variable">abstractCache</span> <span class="operator">=</span> (AbstractCache) SpringContextUtil.getBean(entry.getValue().getClass());</span><br><span class="line">            abstractCache.initCache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(Class type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>&gt;<br>&gt;<br>&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisShareLockUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">TIME_OUT</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(String lockKey, String requestId, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(lockKey) || StringUtils.isBlank(requestId) || time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShareLockException</span>(<span class="string">&quot;分布式锁-加锁参数异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">outTime</span> <span class="operator">=</span> currentTime + TIME_OUT;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (currentTime &lt; outTime) &#123;</span><br><span class="line">            result = redisUtil.setNx(lockKey, requestId, time, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (result) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            currentTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unlock</span><span class="params">(String lockKey, String requestId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(lockKey) || StringUtils.isBlank(requestId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShareLockException</span>(<span class="string">&quot;分布式锁-解锁参数异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redisUtil.get(lockKey);</span><br><span class="line">            <span class="keyword">if</span> (requestId.equals(value)) &#123;</span><br><span class="line">                redisUtil.del(lockKey);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String lockKey, String requestId, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(lockKey) || StringUtils.isBlank(requestId) || time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShareLockException</span>(<span class="string">&quot;分布式锁-尝试加锁参数异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisUtil.setNx(lockKey, requestId, time, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheUtil</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;guava.cache.switch&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean switchCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化本地缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,String&gt; localCache = CacheBuilder.newBuilder().maximumSize(<span class="number">5000</span>).expireAfterWrite(<span class="number">3</span>, TimeUnit.SECONDS).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;K,V&gt; <span class="title function_">getResult</span><span class="params">(List&lt;K&gt; keys, String cachePrefix, Class&lt;V&gt; clazz, Function&lt;List&lt;K&gt;,Map&lt;K,V&gt;&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(keys)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;K,V&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(keys.size());</span><br><span class="line">        <span class="keyword">if</span> (!switchCache) &#123;</span><br><span class="line">            resultMap = function.apply(keys);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//走缓存</span></span><br><span class="line">        List&lt;K&gt; noCacheKeyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (K key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> cachePrefix + <span class="string">&quot;_&quot;</span> + key;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> localCache.getIfPresent(cacheKey);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(content)) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> JSON.parseObject(content, clazz);</span><br><span class="line">                resultMap.put(key, v);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                noCacheKeyList.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(noCacheKeyList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;K, V&gt; noCacheResultMap = function.apply(noCacheKeyList);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(noCacheResultMap)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;K,V&gt; entry : noCacheResultMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            resultMap.put(key, value);</span><br><span class="line">            localCache.put(cachePrefix + <span class="string">&quot;_&quot;</span> + key, JSON.toJSONString(value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultRedisScript&lt;Boolean&gt; casScript;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    casScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    casScript.setResultType(Boolean.class);</span><br><span class="line">    casScript.setScriptSource(<span class="keyword">new</span> <span class="title class_">ResourceScriptSource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;compareAndSet.lua&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">compareAndSet</span><span class="params">(String key, <span class="type">long</span> oldValue, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    keys.add(key);</span><br><span class="line">    <span class="keyword">return</span> (Boolean) redisTemplate.execute(casScript,keys,oldValue,newValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> oldValue = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> newValue = ARGV[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> redisValue = redis.call(<span class="string">&#x27;get&#x27;</span>,key)</span><br><span class="line"><span class="keyword">if</span> (redisValue == <span class="literal">false</span> <span class="keyword">or</span> <span class="built_in">tonumber</span>(redisValue) == <span class="built_in">tonumber</span>(oldValue))</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">&#x27;set&#x27;</span>,key,newValue)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPipelineExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 连接到 Redis 服务器</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>)) &#123;</span><br><span class="line">            <span class="comment">// 创建 Pipeline</span></span><br><span class="line">            <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> jedis.pipelined();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 批量添加命令</span></span><br><span class="line">            pipeline.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">            pipeline.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">            pipeline.get(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">            pipeline.get(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行管道</span></span><br><span class="line">            List&lt;Object&gt; responses = pipeline.syncAndReturnAll();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理响应</span></span><br><span class="line">            <span class="keyword">for</span> (Object response : responses) &#123;</span><br><span class="line">                System.out.println(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚫ 对常用业务场景，例如数据归档，链路追踪，多数据源等进行覆盖封装，提高开发速度，简化开发步骤。</p><h2 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h2><h2 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h2><h2 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h2><p>⚫ 集成常用中间件mysql，redis，es，mq，xxljob等，并提供集成demo和starter封装；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;⚫ 采用模块化思想，对项目模块进行拆分设计，模块可插拔，可按需选择模块装载，模块间解耦；&lt;/p&gt;
&lt;p&gt;⚫ 负责核心redis模块的建设，提供分布式锁，本地缓存，lua脚本，pipeline等功能设计；&lt;/p&gt;
&lt;h2 id=&quot;缓存预热&quot;&gt;&lt;a href=&quot;#缓存预热&quot; c</summary>
      
    
    
    
    
    <category term="框架" scheme="http://wyh-7.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>社区</title>
    <link href="http://wyh-7.github.io/posts/d12215f8.html"/>
    <id>http://wyh-7.github.io/posts/d12215f8.html</id>
    <published>2025-04-04T14:28:29.000Z</published>
    <updated>2025-04-04T14:48:21.237Z</updated>
    
    <content type="html"><![CDATA[<p>⚫ 采用Gateway配合redis实现统一的鉴权及分布式会话共享功能，在网关层实现统一的全局异常处理；</p><p>⚫ 重构原有复杂代码，采取工厂+策略模式实现不同题目间的解耦处理，采取适配器模式实现oss对接；</p><p>⚫ 基于futuretask及completablefuture实现了分类标签的并发查询，提升性能80%。</p><p>⚫ 使用threadlocal配合网关拦截器，feign拦截器，封装用户上下文全局工具。</p><p>⚫ 基于redis的zset实现实时排行榜功能，解决传统数据库大量交互的瓶颈点；</p><p>⚫ 使用rocketmq，优化原有点赞功能，解决了redis存储点赞可能丢数据的问题</p><p>⚫ 使用websocket实现前端与后端的实时信息推送，扩展心跳机制，连接鉴权等</p><p>⚫ 封装了自定义的线程工厂，实现了线程池间的日志区分，提升了日志排查效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;⚫ 采用Gateway配合redis实现统一的鉴权及分布式会话共享功能，在网关层实现统一的全局异常处理；&lt;/p&gt;
&lt;p&gt;⚫ 重构原有复杂代码，采取工厂+策略模式实现不同题目间的解耦处理，采取适配器模式实现oss对接；&lt;/p&gt;
&lt;p&gt;⚫ 基于futuretask及comple</summary>
      
    
    
    
    
    <category term="社区" scheme="http://wyh-7.github.io/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>杂项</title>
    <link href="http://wyh-7.github.io/posts/bc8ba982.html"/>
    <id>http://wyh-7.github.io/posts/bc8ba982.html</id>
    <published>2024-06-13T13:38:29.000Z</published>
    <updated>2025-04-04T14:48:20.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js文件中export-default和export"><a href="#js文件中export-default和export" class="headerlink" title="js文件中export default和export"></a>js文件中export default和export</h3><p>在一个js文件中，export default和export都可以用来导出内容，但它们之间有一些区别：<br>export default只能有一个默认导出，而export可以有多个命名导出。默认导出可以在导入时指定任意名称，而命名导出需要使用相同的名称。</p><p>例如，以下是使用export default导出默认函数的示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// utils.js</span><br><span class="line">function add(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">export default add;</span><br></pre></td></tr></table></figure></p><p>在另一个文件中导入默认函数的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import myAdd from &#x27;./utils.js&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(myAdd(2, 3)); // 输出: 5</span><br></pre></td></tr></table></figure><p>当使用export default时，在导入时可以使用import语句的一个额外的语法糖。例如，可以省略导入的内容的花括号。<br>例如，以下是使用export default导出默认函数，并在导入时省略花括号的示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// utils.js</span><br><span class="line">function add(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">export default add;</span><br></pre></td></tr></table></figure><br>在另一个文件中导入默认函数的方式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import myAdd from &#x27;./utils.js&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(myAdd(2, 3)); // 输出: 5</span><br></pre></td></tr></table></figure></p><h3 id="插槽Slots"><a href="#插槽Slots" class="headerlink" title="插槽Slots"></a>插槽Slots</h3><p>为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。</p><p>举例来说，这里有一个 <FancyButton> 组件，可以像这样使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FancyButton</span>&gt;</span><br><span class="line">  <span class="title class_">Click</span> me! &lt;!-- 插槽内容 --&gt;</span><br><span class="line">&lt;/<span class="title class_">FancyButton</span>&gt;</span><br></pre></td></tr></table></figure><br>而 <FancyButton> 的模板是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;fancy-btn&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span> &lt;!-- 插槽出口 --&gt;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p><slot> 元素是一个插槽出口 (slot outlet)，标示了父元素提供的插槽内容 (slot content) 将在哪里被渲染。<br><img src="../png/image.png" alt="alt text"></p></blockquote><p>最终渲染出的 DOM 是这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://cn.vuejs.org/guide/components/slots.html">插槽</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;js文件中export-default和export&quot;&gt;&lt;a href=&quot;#js文件中export-default和export&quot; class=&quot;headerlink&quot; title=&quot;js文件中export default和export&quot;&gt;&lt;/a&gt;js文件中exp</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://wyh-7.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://wyh-7.github.io/posts/7b7eec0b.html"/>
    <id>http://wyh-7.github.io/posts/7b7eec0b.html</id>
    <published>2024-06-03T11:57:13.000Z</published>
    <updated>2025-04-04T14:48:12.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><blockquote><p>mapState , mapGetters, mapMutations, mapActions</p></blockquote><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><blockquote><p>在vue的任何组件中都可以使用this.$store.state.属性名访问<br>在开发中我们推荐将store中的state赋值给需要使用该状态的组件的计算属性中(一定不能把state赋值给data,state发生改变时不会重新给data赋值)</p></blockquote><p><strong>如下:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 错误state.book 发生改变时book不会更新</span></span><br><span class="line">            <span class="attr">myBook</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">book</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">book</span>(<span class="params"></span>) &#123;</span><br><span class="line">             <span class="comment">// 正确 state.book会作为当前计算属性的依赖,当state.book发生改变时计算属性book将会重新计算当前值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">book</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><blockquote><p>Vuex 为了简化 state与计算属性配合使用时的代码,提供了一个辅助函数mapState 可以简化上面的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 首先引入辅助函数mapState</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    computed: &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        book() &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          return this.$store.state.book;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    &#125;*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 下面的写法等价于上面的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapState</span>([<span class="string">&#x27;book&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><blockquote><p>getter就是Vuex的计算属性，开发人员可以将state 或其他getter 计算后的的返回值存放在指定getter中,当前getter会将这些依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算<br>在任何组件中都可以通过this.$store.getter.属性名访问</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">score</span>: [<span class="number">30</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">66</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 可以认为是 store 的计算属性, 就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</span></span><br><span class="line">    <span class="title function_">calcScore</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="comment">// p(state, getters, rootState, rootGetters)</span></span><br><span class="line">      <span class="comment">//state: 当前模块的state</span></span><br><span class="line">      <span class="comment">//getters: 当前模块的getters</span></span><br><span class="line">      <span class="comment">//rootState: 全局的state</span></span><br><span class="line">      <span class="comment">//rootGetters: 全局的getters</span></span><br><span class="line">      <span class="keyword">let</span> ps = state.<span class="property">score</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v &gt;= <span class="number">30</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> ps.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><ul><li><p>mapState可以接收一个字符串数组作为参数,数组中的每一项字符串都会成为当前组件的计算属性并且与Vuex中的同名getter建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;calcScore&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 首先引入辅助函数mapGetters</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    computed: &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        book() &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          return this.$store.getters.calcScore;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    &#125;*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 下面的写法等价于上面的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       ...<span class="title function_">mapGetters</span>([<span class="string">&quot;calcScore&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>mapGetters可以接收对象作为参数,对象的每一个key都会成为当前组件的计算属性名,value必须是一个字符串并且与Vuex中的同名getter建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;s1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapGetters</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">s1</span>: <span class="string">&#x27;calcScore&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><blockquote><p>vuex规定mutation是唯一可以修改state的地方<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: <span class="string">&#x27;HTML+CSS&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; <span class="comment">// 修改state的方法</span></span><br><span class="line">    <span class="comment">// 同步操作 直接修改</span></span><br><span class="line">    <span class="title function_">changeBook</span>(<span class="params">state, book</span>) &#123;</span><br><span class="line">      state.<span class="property">book</span> = book;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><blockquote><p>在Vuex中，mutation函数的第一个参数是state，<br>这是Vuex自动传递的，因此在调用mutation函数时不需要显式传递state。<br>Vuex会自动将当前的状态对象作为第一个参数传递给mutation函数。</p></blockquote><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><blockquote><p>注意: Mutation 需遵守 Vue 的响应规则 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：<br>1、最好提前在你的 store 中初始化好所有所需state属性。<br>2、当需要在对象上添加新属性时，你应该使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象<br>Vue.set(obj, ‘newProp’, 123)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将mutation里的函数映射到组件里</span></span><br><span class="line">...<span class="title function_">mapMutations</span>([   <span class="comment">//使用es6的拓展运算符</span></span><br><span class="line">        <span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DECREASE_SHOPCART&#x27;</span></span><br><span class="line">   ])</span><br><span class="line"></span><br><span class="line"><span class="comment">//将mutation里的函数映射到组件里，在组件里</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">INCREASE_SHOPCART</span> === <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在有参数的情况下，mutation的state默认参数可以省略</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">INCREASE_SHOPCART</span>(id) === <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;INCREASE_SHOPCART&#x27;</span>,id) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">组件中使用 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;xxx&#x27;</span>) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.<span class="property">commit</span> 调用（需要在根节点注入 store）。</span><br></pre></td></tr></table></figure><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><blockquote><p>Vuex给开发人员提供了一个可以执行异步操作的函数action</p><p>注意: action函数中接收两个参数<br>参数一 context 与 store对象相似所以可以访问 context.state / context.getters / context.commit / context.dispatch<br>参数二 action的载荷,action载荷与mutation一样只有一个如果需要传递多个参数请传递对象<br><strong>action是不允许直接修改state的</strong></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Vuex中通过配置选项actions创建,并使用 $store.dispatch方法分发action</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、在应用中通过store.dispatch(&#x27;action名&#x27;,载荷)的形式调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">result</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        [types.<span class="property">SET_RESULT</span>](state, result) &#123;</span><br><span class="line">            <span class="comment">// 修改state</span></span><br><span class="line">            state.<span class="property">result</span> = result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">searchMusic</span>(<span class="params">context, keywords</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(context)</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">&#x27;http://musicapi.leanapp.cn/search?keywords=&#x27;</span> + keywords)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">            <span class="comment">// 只有mutation才能修改state,所以action异步请求数据后,只能通过提交mutation修改state</span></span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;result&#125;</span>) =&gt;</span> context.<span class="title function_">commit</span>(types.<span class="property">SET_RESULT</span>, result))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.js</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;searchMusic&#x27;</span>, <span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><blockquote><p>mapActions生成的方法只接受一个参数,这个参数就是当前action的载荷。</p></blockquote><ul><li><p>方法一: mapActions可以接收一个字符串数组作为参数,数组中的每一项字符串都会成为当前组件的方法并且与Vuex中的同名action建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//   this.$store.dispatch(&#x27;searchMusic&#x27;,&#x27;海阔天空&#x27;)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">searchMusic</span>(<span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>([<span class="string">&#x27;searchMusic&#x27;</span>]),</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>方法二: mapAction可以接收对象作为参数,对象的每一个key都会成为当前组件的方法名,value必须是action的同名字符串与Vuex中的action建立映射对应关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//   this.$store.dispatch(&#x27;searchMusic&#x27;,&#x27;海阔天空&#x27;)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">search</span>(<span class="string">&#x27;海阔天空&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>(&#123;<span class="attr">search</span>: <span class="string">&#x27;searchMusic&#x27;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>应用层级的状态都应该集中在store中<br>提交 mutation 是更改状态state的唯一方式，并且这个过程是同步的。<br>异步的操作应该都放在action里面</p></blockquote><h3 id="参-考"><a href="#参-考" class="headerlink" title="参 考"></a>参 考</h3><p><a href="https://juejin.cn/post/6973080514215280647">vuex参考链接</a><br><a href="https://juejin.cn/post/6972334587875688455">vuex模块化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;辅助函数&quot;&gt;&lt;a href=&quot;#辅助函数&quot; class=&quot;headerlink&quot; title=&quot;辅助函数&quot;&gt;&lt;/a&gt;辅助函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mapState , mapGetters, mapMutations, mapActions&lt;/</summary>
      
    
    
    
    
    <category term="vuex" scheme="http://wyh-7.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://wyh-7.github.io/posts/3c50d03d.html"/>
    <id>http://wyh-7.github.io/posts/3c50d03d.html</id>
    <published>2024-06-01T06:42:25.000Z</published>
    <updated>2025-04-04T14:40:49.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>这是一篇讲解如何正确使用 <strong>Markdown</strong> 的排版示例，学会这个很有必要，能让你的文章有更加清晰的排版。</p><blockquote><p>引用文本：Markdown is a text formatting syntax inspired</p></blockquote><h2 id="语法指导"><a href="#语法指导" class="headerlink" title="语法指导"></a>语法指导</h2><h3 id="普通内容"><a href="#普通内容" class="headerlink" title="普通内容"></a>普通内容</h3><p>这段内容展示了在内容里面一些排版格式，比如：</p><ul><li><strong>加粗</strong> - <code>**加粗**</code></li><li><em>倾斜</em> - <code>*倾斜*</code></li><li><del>删除线</del> - <code>~~删除线~~</code></li><li><code>Code 标记</code> - <code>Code 标记</code></li><li><a href="https://hacpai.com">超级链接</a> - <code>[超级链接](https://hacpai.com)</code></li><li><a href="mailto:username@gmail.com">username@gmail.com</a> - <code>[username@gmail.com](mailto:username@gmail.com)</code></li></ul><h3 id="大标题-Heading-3"><a href="#大标题-Heading-3" class="headerlink" title="大标题 - Heading 3"></a>大标题 - Heading 3</h3><p>你可以选择使用 H1 至 H6，使用 ##(N) 打头。建议帖子或回帖中的顶级标题使用 Heading 3，不要使用 1 或 2，因为 1 是系统站点级，2 是帖子标题级。</p><blockquote><p>NOTE: 别忘了 # 后面需要有空格！</p></blockquote><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://img.zcool.cn/community/0163b85c9e21cba801208f8b89e09a.jpg?x-oss-process=image/format,webp" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 文本](http://image-path.png)</span><br><span class="line">![alt 文本](http://image-path.png &quot;图片 Title 值&quot;)</span><br></pre></td></tr></table></figure><p>支持复制粘贴直接上传。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*emphasize*    **strong**</span><br><span class="line">_emphasize_    __strong__</span><br><span class="line">var a = 1</span><br></pre></td></tr></table></figure><h4 id="语法高亮支持"><a href="#语法高亮支持" class="headerlink" title="语法高亮支持"></a>语法高亮支持</h4><p>如果在 ``` 后面跟随语言名称，可以有语法高亮的效果哦，比如:</p><h5 id="演示-Go-代码高亮"><a href="#演示-Go-代码高亮" class="headerlink" title="演示 Go 代码高亮"></a>演示 Go 代码高亮</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, 世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="演示-Java-高亮"><a href="#演示-Java-高亮" class="headerlink" title="演示 Java 高亮"></a>演示 Java 高亮</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tip: 语言名称支持下面这些: <code>ruby</code>, <code>python</code>, <code>js</code>, <code>html</code>, <code>erb</code>, <code>css</code>, <code>coffee</code>, <code>bash</code>, <code>json</code>, <code>yml</code>, <code>xml</code> …</p></blockquote><h3 id="有序、无序、任务列表"><a href="#有序、无序、任务列表" class="headerlink" title="有序、无序、任务列表"></a>有序、无序、任务列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>Java<ul><li>Spring<ul><li>IoC</li><li>AOP</li></ul></li></ul></li><li>Go<ul><li>gofmt</li><li>Wide</li></ul></li><li>Node.js<ul><li>Koa</li><li>Express</li></ul></li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>Node.js<ol><li>Express</li><li>Koa</li><li>Sails</li></ol></li><li>Go<ol><li>gofmt</li><li>Wide</li></ol></li><li>Java<ol><li>Latke</li><li>IDEA</li></ol></li></ol><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><ul><li>[x] 发布 Sym</li><li>[x] 发布 Solo</li><li>[ ] 预约牙医</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>如果需要展示数据什么的，可以选择使用表格。</p><div class="table-container"><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>cell 1</td><td>cell 2</td></tr><tr><td>cell 3</td><td>cell 4</td></tr><tr><td>cell 5</td><td>cell 6</td></tr></tbody></table></div><h3 id="隐藏细节"><a href="#隐藏细节" class="headerlink" title="隐藏细节"></a>隐藏细节</h3><details><summary>这里是摘要部分。</summary>这里是细节部分。</details><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>空行可以将内容进行分段，便于阅读。（这是第一段）</p><p>使用空行在 Markdown 排版中相当重要。（这是第二段）</p><h3 id="链接引用"><a href="#链接引用" class="headerlink" title="链接引用"></a>链接引用</h3><p><a href="https://b3log.org">链接文本</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文本][链接标识]</span><br><span class="line"></span><br><span class="line">[链接标识]: https://b3log.org</span><br></pre></td></tr></table></figure><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>多行公式块：</p><script type="math/tex; mode=display">\frac{1}{  \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{  \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {    1+\frac{e^{-6\pi}}    {1+\frac{e^{-8\pi}}{1+\cdots}}  }}</script><p>行内公式：</p><p>公式 $a^2 + b^2 = \color{red}c^2$ 是行内。</p><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- 教程</span><br><span class="line">- 语法指导</span><br><span class="line">  - 普通内容</span><br><span class="line">  - 提及用户</span><br><span class="line">  - 表情符号 Emoji</span><br><span class="line">    - 一些表情例子</span><br><span class="line">  - 大标题 - Heading 3</span><br><span class="line">    - Heading 4</span><br><span class="line">      - Heading 5</span><br><span class="line">        - Heading 6</span><br><span class="line">  - 图片</span><br><span class="line">  - 代码块</span><br><span class="line">    - 普通</span><br><span class="line">    - 语法高亮支持</span><br><span class="line">      - 演示 Go 代码高亮</span><br><span class="line">      - 演示 Java 高亮</span><br><span class="line">  - 有序、无序、任务列表</span><br><span class="line">    - 无序列表</span><br><span class="line">    - 有序列表</span><br><span class="line">    - 任务列表</span><br><span class="line">  - 表格</span><br><span class="line">  - 隐藏细节</span><br><span class="line">  - 段落</span><br><span class="line">  - 链接引用</span><br><span class="line">  - 数学公式</span><br><span class="line">  - 脑图</span><br><span class="line">  - 流程图</span><br><span class="line">  - 时序图</span><br><span class="line">  - 甘特图</span><br><span class="line">  - 图表</span><br><span class="line">  - 五线谱</span><br><span class="line">  - Graphviz</span><br><span class="line">  - 多媒体</span><br><span class="line">  - 脚注</span><br><span class="line">- 快捷键</span><br></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Every minute</span><br><span class="line">        John--&gt;&gt;Alice: Great!</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title A Gantt Diagram</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2019-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2019-01-12  , 12d</span><br><span class="line">    another task      : 24d</span><br></pre></td></tr></table></figure><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &#123; &quot;text&quot;: &quot;最近 30 天&quot; &#125;,</span><br><span class="line">  &quot;tooltip&quot;: &#123; &quot;trigger&quot;: &quot;axis&quot;, &quot;axisPointer&quot;: &#123; &quot;lineStyle&quot;: &#123; &quot;width&quot;: 0 &#125; &#125; &#125;,</span><br><span class="line">  &quot;legend&quot;: &#123; &quot;data&quot;: [&quot;帖子&quot;, &quot;用户&quot;, &quot;回帖&quot;] &#125;,</span><br><span class="line">  &quot;xAxis&quot;: [&#123;</span><br><span class="line">      &quot;type&quot;: &quot;category&quot;,</span><br><span class="line">      &quot;boundaryGap&quot;: false,</span><br><span class="line">      &quot;data&quot;: [&quot;2019-05-08&quot;,&quot;2019-05-09&quot;,&quot;2019-05-10&quot;,&quot;2019-05-11&quot;,&quot;2019-05-12&quot;,&quot;2019-05-13&quot;,&quot;2019-05-14&quot;,&quot;2019-05-15&quot;,&quot;2019-05-16&quot;,&quot;2019-05-17&quot;,&quot;2019-05-18&quot;,&quot;2019-05-19&quot;,&quot;2019-05-20&quot;,&quot;2019-05-21&quot;,&quot;2019-05-22&quot;,&quot;2019-05-23&quot;,&quot;2019-05-24&quot;,&quot;2019-05-25&quot;,&quot;2019-05-26&quot;,&quot;2019-05-27&quot;,&quot;2019-05-28&quot;,&quot;2019-05-29&quot;,&quot;2019-05-30&quot;,&quot;2019-05-31&quot;,&quot;2019-06-01&quot;,&quot;2019-06-02&quot;,&quot;2019-06-03&quot;,&quot;2019-06-04&quot;,&quot;2019-06-05&quot;,&quot;2019-06-06&quot;,&quot;2019-06-07&quot;],</span><br><span class="line">      &quot;axisTick&quot;: &#123; &quot;show&quot;: false &#125;,</span><br><span class="line">      &quot;axisLine&quot;: &#123; &quot;show&quot;: false &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;yAxis&quot;: [&#123; &quot;type&quot;: &quot;value&quot;, &quot;axisTick&quot;: &#123; &quot;show&quot;: false &#125;, &quot;axisLine&quot;: &#123; &quot;show&quot;: false &#125;, &quot;splitLine&quot;: &#123; &quot;lineStyle&quot;: &#123; &quot;color&quot;: &quot;rgba(0, 0, 0, .38)&quot;, &quot;type&quot;: &quot;dashed&quot; &#125; &#125; &#125;],</span><br><span class="line">  &quot;series&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;帖子&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#d23f31&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 3,</span><br><span class="line">      &quot;data&quot;: [&quot;18&quot;,&quot;14&quot;,&quot;22&quot;,&quot;9&quot;,&quot;7&quot;,&quot;18&quot;,&quot;10&quot;,&quot;12&quot;,&quot;13&quot;,&quot;16&quot;,&quot;6&quot;,&quot;9&quot;,&quot;15&quot;,&quot;15&quot;,&quot;12&quot;,&quot;15&quot;,&quot;8&quot;,&quot;14&quot;,&quot;9&quot;,&quot;10&quot;,&quot;29&quot;,&quot;22&quot;,&quot;14&quot;,&quot;22&quot;,&quot;9&quot;,&quot;10&quot;,&quot;15&quot;,&quot;9&quot;,&quot;9&quot;,&quot;15&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;用户&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#f1e05a&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 2,</span><br><span class="line">      &quot;data&quot;: [&quot;31&quot;,&quot;33&quot;,&quot;30&quot;,&quot;23&quot;,&quot;16&quot;,&quot;29&quot;,&quot;23&quot;,&quot;37&quot;,&quot;41&quot;,&quot;29&quot;,&quot;16&quot;,&quot;13&quot;,&quot;39&quot;,&quot;23&quot;,&quot;38&quot;,&quot;136&quot;,&quot;89&quot;,&quot;35&quot;,&quot;22&quot;,&quot;50&quot;,&quot;57&quot;,&quot;47&quot;,&quot;36&quot;,&quot;59&quot;,&quot;14&quot;,&quot;23&quot;,&quot;46&quot;,&quot;44&quot;,&quot;51&quot;,&quot;43&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;回帖&quot;, &quot;type&quot;: &quot;line&quot;, &quot;smooth&quot;: true, &quot;itemStyle&quot;: &#123; &quot;color&quot;: &quot;#4285f4&quot; &#125;, &quot;areaStyle&quot;: &#123; &quot;normal&quot;: &#123;&#125; &#125;, &quot;z&quot;: 1,</span><br><span class="line">      &quot;data&quot;: [&quot;35&quot;,&quot;42&quot;,&quot;73&quot;,&quot;15&quot;,&quot;43&quot;,&quot;58&quot;,&quot;55&quot;,&quot;35&quot;,&quot;46&quot;,&quot;87&quot;,&quot;36&quot;,&quot;15&quot;,&quot;44&quot;,&quot;76&quot;,&quot;130&quot;,&quot;73&quot;,&quot;50&quot;,&quot;20&quot;,&quot;21&quot;,&quot;54&quot;,&quot;48&quot;,&quot;73&quot;,&quot;60&quot;,&quot;89&quot;,&quot;26&quot;,&quot;27&quot;,&quot;70&quot;,&quot;63&quot;,&quot;55&quot;,&quot;37&quot;,&quot;0&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五线谱"><a href="#五线谱" class="headerlink" title="五线谱"></a>五线谱</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">X: 24</span><br><span class="line">T: Clouds Thicken</span><br><span class="line">C: Paul Rosen</span><br><span class="line">S: Copyright 2005, Paul Rosen</span><br><span class="line">M: 6/8</span><br><span class="line">L: 1/8</span><br><span class="line">Q: 3/8=116</span><br><span class="line">R: Creepy Jig</span><br><span class="line">K: Em</span><br><span class="line">|:&quot;Em&quot;EEE E2G|&quot;C7&quot;_B2A G2F|&quot;Em&quot;EEE E2G|\</span><br><span class="line">&quot;C7&quot;_B2A &quot;B7&quot;=B3|&quot;Em&quot;EEE E2G|</span><br><span class="line">&quot;C7&quot;_B2A G2F|&quot;Em&quot;GFE &quot;D (Bm7)&quot;F2D|\</span><br><span class="line">1&quot;Em&quot;E3-E3:|2&quot;Em&quot;E3-E2B|:&quot;Em&quot;e2e gfe|</span><br><span class="line">&quot;G&quot;g2ab3|&quot;Em&quot;gfeg2e|&quot;D&quot;fedB2A|&quot;Em&quot;e2e gfe|\</span><br><span class="line">&quot;G&quot;g2ab3|&quot;Em&quot;gfe&quot;D&quot;f2d|&quot;Em&quot;e3-e3:|</span><br></pre></td></tr></table></figure><h3 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">digraph finite_state_machine &#123;</span><br><span class="line">    rankdir=LR;</span><br><span class="line">    size=&quot;8,5&quot;</span><br><span class="line">    node [shape = doublecircle]; S;</span><br><span class="line">    node [shape = point ]; qi</span><br><span class="line"></span><br><span class="line">    node [shape = circle];</span><br><span class="line">    qi -&gt; S;</span><br><span class="line">    S  -&gt; q1 [ label = &quot;a&quot; ];</span><br><span class="line">    S  -&gt; S  [ label = &quot;a&quot; ];</span><br><span class="line">    q1 -&gt; S  [ label = &quot;a&quot; ];</span><br><span class="line">    q1 -&gt; q2 [ label = &quot;ddb&quot; ];</span><br><span class="line">    q2 -&gt; q1 [ label = &quot;b&quot; ];</span><br><span class="line">    q2 -&gt; q2 [ label = &quot;b&quot; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><p>支持 v.qq.com，youtube.com，youku.com，coub.com，facebook.com/video，dailymotion.com，.mp4，.m4v，.ogg，.ogv，.webm，.mp3，.wav 链接解析</p><p><a href="https://v.qq.com/x/cover/zf2z0xpqcculhcz/y0016tj0qvh.html">https://v.qq.com/x/cover/zf2z0xpqcculhcz/y0016tj0qvh.html</a></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>这里是一个脚注引用<sup><a href="#fn_1" id="reffn_1">1</a></sup>，这里是另一个脚注引用<sup><a href="#fn_bignote" id="reffn_bignote">bignote</a></sup>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这里是一个脚注引用[^1]，这里是另一个脚注引用[^bignote]。</span><br><span class="line">[^1]: 第一个脚注定义。</span><br><span class="line">[^bignote]: 脚注定义可使用多段内容。</span><br><span class="line"></span><br><span class="line">    缩进对齐的段落包含在这个脚注定义内。</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>可以使用代码块。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">还有其他行级排版语法，比如**加粗**和[链接](https://b3log.org)。</span><br></pre></td></tr></table></figure></code></pre><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>我们的编辑器支持很多快捷键，具体请参考 <a href="https://hacpai.com/article/1474030007391">键盘快捷键</a>（或者按 “<code>?</code> “😼）</p><blockquote id="fn_1"><sup>1</sup>. 第一个脚注定义。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_bignote"><sup>bignote</sup>. 脚注定义可使用多段内容。<a href="#reffn_bignote" title="Jump back to footnote [bignote] in the text."> &#8617;</a></blockquote><pre><code>缩进对齐的段落包含在这个脚注定义内。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用代码块。</span><br></pre></td></tr></table></figure>还有其他行级排版语法，比如**加粗**和[链接](https://b3log.org)。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;这是一篇讲解如何正确使用 &lt;strong&gt;Markdown&lt;/strong&gt; 的排版示例，学会这个很有必要，能让你的文章有更加清晰的排版。&lt;</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://wyh-7.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
